(() => {
  let __defineProperty = Object.defineProperty;
  let __hasOwnProperty = Object.prototype.hasOwnProperty;
  let __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  let __markAsModule = (target) => {
    return __defineProperty(target, "__esModule", {value: true});
  };
  let __export = (target, all) => {
    __markAsModule(target);
    for (let name in all)
      __defineProperty(target, name, {get: all[name], enumerable: true});
  };
  let __exportStar = (target, module) => {
    __markAsModule(target);
    for (let key3 in module)
      if (__hasOwnProperty.call(module, key3) && !__hasOwnProperty.call(target, key3) && key3 !== "default")
        __defineProperty(target, key3, {get: () => module[key3], enumerable: true});
    return target;
  };
  let __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defineProperty({}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key3 in from) {
          if (hasOwnProperty.call(from, key3)) {
            to[key3] = from[key3];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var checkPropTypes = require_checkPropTypes();
        var ReactVersion = "16.13.1";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          suspense: null
        };
        var ReactCurrentOwner = {
          current: null
        };
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        }
        var Resolved = 1;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = {};
        var currentlyValidatingElement = null;
        function setCurrentlyValidatingElement(element) {
          {
            currentlyValidatingElement = element;
          }
        }
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentlyValidatingElement) {
              var name = getComponentName(currentlyValidatingElement.type);
              var owner = currentlyValidatingElement._owner;
              stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          _assign(ReactSharedInternals, {
            ReactDebugCurrentFrame,
            ReactComponentTreeHook: {}
          });
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component7(props, context2, updater) {
          this.props = props;
          this.context = context2;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component7.prototype.isReactComponent = {};
        Component7.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component7.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component7.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component7.prototype;
        function PureComponent(props, context2, updater) {
          this.props = props;
          this.context = context2;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component7.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config3) {
          {
            if (hasOwnProperty.call(config3, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config3.ref !== void 0;
        }
        function hasValidKey(config3) {
          {
            if (hasOwnProperty.call(config3, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config3.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config3) {
          {
            if (typeof config3.ref === "string" && ReactCurrentOwner.current && config3.__self && ReactCurrentOwner.current.stateNode !== config3.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config3.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key3, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key: key3,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement146(type, config3, children) {
          var propName;
          var props = {};
          var key3 = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config3 != null) {
            if (hasValidRef(config3)) {
              ref = config3.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config3);
              }
            }
            if (hasValidKey(config3)) {
              key3 = "" + config3.key;
            }
            self2 = config3.__self === void 0 ? null : config3.__self;
            source = config3.__source === void 0 ? null : config3.__source;
            for (propName in config3) {
              if (hasOwnProperty.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config3[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key3 || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key3) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key3, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement29(element, config3, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key3 = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config3 != null) {
            if (hasValidRef(config3)) {
              ref = config3.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config3)) {
              key3 = "" + config3.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config3) {
              if (hasOwnProperty.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config3[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config3[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key3, ref, self2, source, owner, props);
        }
        function isValidElement19(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape2(key3) {
          var escapeRegex2 = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = ("" + key3).replace(escapeRegex2, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
        }
        var POOL_SIZE = 10;
        var traverseContextPool = [];
        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
          if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
          } else {
            return {
              result: mapResult,
              keyPrefix,
              func: mapFunction,
              context: mapContext,
              count: 0
            };
          }
        }
        function releaseTraverseContext(traverseContext) {
          traverseContext.result = null;
          traverseContext.keyPrefix = null;
          traverseContext.func = null;
          traverseContext.context = null;
          traverseContext.count = 0;
          if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
          }
        }
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            callback(traverseContext, children, nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getComponentKey(child, i);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              {
                if (iteratorFn === children.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(children);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getComponentKey(child, ii++);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else if (type === "object") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
              }
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                }
              }
            }
          }
          return subtreeCount;
        }
        function traverseAllChildren(children, callback, traverseContext) {
          if (children == null) {
            return 0;
          }
          return traverseAllChildrenImpl(children, "", callback, traverseContext);
        }
        function getComponentKey(component, index3) {
          if (typeof component === "object" && component !== null && component.key != null) {
            return escape2(component.key);
          }
          return index3.toString(36);
        }
        function forEachSingleChild(bookKeeping, child, name) {
          var func = bookKeeping.func, context2 = bookKeeping.context;
          func.call(context2, child, bookKeeping.count++);
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          if (children == null) {
            return children;
          }
          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
          traverseAllChildren(children, forEachSingleChild, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
          var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context2 = bookKeeping.context;
          var mappedChild = func.call(context2, child, bookKeeping.count++);
          if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement19(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey);
            }
            result.push(mappedChild);
          }
        }
        function mapIntoWithKeyPrefixInternal(children, array, prefix3, func, context2) {
          var escapedPrefix = "";
          if (prefix3 != null) {
            escapedPrefix = escapeUserProvidedKey(prefix3) + "/";
          }
          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context2);
          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapChildren(children, func, context2) {
          if (children == null) {
            return children;
          }
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, func, context2);
          return result;
        }
        function countChildren(children) {
          return traverseAllChildren(children, function() {
            return null;
          }, null);
        }
        function toArray3(children) {
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
            return child;
          });
          return result;
        }
        function onlyChild2(children) {
          if (!isValidElement19(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext8(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context2 = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context2.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context2
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context2,
              _calculateChangedBits: context2._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context2.Provider;
                },
                set: function(_Provider) {
                  context2.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context2._currentValue;
                },
                set: function(_currentValue) {
                  context2._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context2._currentValue2;
                },
                set: function(_currentValue2) {
                  context2._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context2._threadCount;
                },
                set: function(_threadCount) {
                  context2._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context2.Consumer;
                }
              }
            });
            context2.Consumer = Consumer;
          }
          {
            context2._currentRenderer = null;
            context2._currentRenderer2 = null;
          }
          return context2;
        }
        function lazy(ctor) {
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            _status: -1,
            _result: null
          };
          {
            var defaultProps2;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef121(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
        }
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function memo2(type, compare) {
          {
            if (!isValidElementType2(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          return {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext13(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState27(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef34(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect34(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create2, deps);
        }
        function useLayoutEffect12(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create2, deps);
        }
        function useCallback22(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo7(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create2, deps);
        }
        function useImperativeHandle9(ref, create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create2, deps);
        }
        function useDebugValue3(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement(element);
          {
            error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
          }
          setCurrentlyValidatingElement(null);
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement19(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement19(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement19(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var name = getComponentName(type);
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              setCurrentlyValidatingElement(element);
              checkPropTypes(propTypes, element.props, "prop", name, ReactDebugCurrentFrame.getStackAddendum);
              setCurrentlyValidatingElement(null);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            setCurrentlyValidatingElement(fragment);
            var keys2 = Object.keys(fragment.props);
            for (var i = 0; i < keys2.length; i++) {
              var key3 = keys2[i];
              if (key3 !== "children" && key3 !== "key") {
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key3);
                break;
              }
            }
            if (fragment.ref !== null) {
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
            }
            setCurrentlyValidatingElement(null);
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType2(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement146.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement29.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            var testMap = new Map([[frozenObject, null]]);
            var testSet = new Set([frozenObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children18 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray3,
          only: onlyChild2
        };
        exports.Children = Children18;
        exports.Component = Component7;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext8;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef121;
        exports.isValidElement = isValidElement19;
        exports.lazy = lazy;
        exports.memo = memo2;
        exports.useCallback = useCallback22;
        exports.useContext = useContext13;
        exports.useDebugValue = useDebugValue3;
        exports.useEffect = useEffect34;
        exports.useImperativeHandle = useImperativeHandle9;
        exports.useLayoutEffect = useLayoutEffect12;
        exports.useMemo = useMemo7;
        exports.useReducer = useReducer;
        exports.useRef = useRef34;
        exports.useState = useState27;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var shouldYieldToHost;
        var requestPaint;
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          var initialTime = Date.now();
          exports.unstable_now = function() {
            return Date.now() - initialTime;
          };
          requestHostCallback = function(cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb, ms2) {
            _timeoutID = setTimeout(cb, ms2);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          shouldYieldToHost = function() {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var performance2 = window.performance;
          var _Date = window.Date;
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame2 = window.requestAnimationFrame;
            var cancelAnimationFrame2 = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame2 !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
            if (typeof cancelAnimationFrame2 !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          if (typeof performance2 === "object" && typeof performance2.now === "function") {
            exports.unstable_now = function() {
              return performance2.now();
            };
          } else {
            var _initialTime = _Date.now();
            exports.unstable_now = function() {
              return _Date.now() - _initialTime;
            };
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            shouldYieldToHost = function() {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms2) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms2);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index3 = heap.length;
          heap.push(node);
          siftUp(heap, node, index3);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i) {
          var index3 = i;
          while (true) {
            var parentIndex = index3 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index3] = parent;
              index3 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index3 = i;
          var length = heap.length;
          while (index3 < length) {
            var leftIndex = (index3 + 1) * 2 - 1;
            var left2 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right2 = heap[rightIndex];
            if (left2 !== void 0 && compare(left2, node) < 0) {
              if (right2 !== void 0 && compare(right2, left2) < 0) {
                heap[index3] = right2;
                heap[rightIndex] = node;
                index3 = rightIndex;
              } else {
                heap[index3] = left2;
                heap[leftIndex] = node;
                index3 = leftIndex;
              }
            } else if (right2 !== void 0 && compare(right2, node) < 0) {
              heap[index3] = right2;
              heap[rightIndex] = node;
              index3 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent(entries) {
          if (eventLog !== null) {
            var offset2 = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset2);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task, ms2) {
          {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent([TaskStartEvent, ms2 * 1e3, task.id, task.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task, ms2) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms2 * 1e3, task.id]);
            }
          }
        }
        function markTaskCanceled(task, ms2) {
          {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms2 * 1e3, task.id]);
            }
          }
        }
        function markTaskErrored(task, ms2) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms2 * 1e3, task.id]);
            }
          }
        }
        function markTaskRun(task, ms2) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms2 * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task, ms2) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms2 * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms2) {
          {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms2 * 1e3, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms2) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms2 * 1e3, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (callback !== null) {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function timeoutForPriorityLevel(priorityLevel) {
          switch (priorityLevel) {
            case ImmediatePriority:
              return IMMEDIATE_PRIORITY_TIMEOUT;
            case UserBlockingPriority:
              return USER_BLOCKING_PRIORITY;
            case IdlePriority:
              return IDLE_PRIORITY;
            case LowPriority:
              return LOW_PRIORITY_TIMEOUT;
            case NormalPriority:
            default:
              return NORMAL_PRIORITY_TIMEOUT;
          }
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          var timeout;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
            timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
          } else {
            timeout = timeoutForPriorityLevel(priorityLevel);
            startTime = currentTime;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          }
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        function unstable_shouldYield() {
          var currentTime = exports.unstable_now();
          advanceTimers(currentTime);
          var firstTask = peek(taskQueue);
          return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = unstable_shouldYield;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_tracing_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React188 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var checkPropTypes = require_checkPropTypes();
        var tracing = require_tracing();
        var ReactSharedInternals = React188.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
          ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
          };
        }
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
          ReactSharedInternals.ReactCurrentBatchConfig = {
            suspense: null
          };
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        if (!React188) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var invokeGuardedCallbackImpl = function(name, func, context2, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context2, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name, func, context2, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
                func.apply(context2, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner2) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context2, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var getFiberCurrentPropsFromNode = null;
        var getInstanceFromNode = null;
        var getNodeFromInstance = null;
        function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
          getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
          getInstanceFromNode = getInstanceFromNodeImpl;
          getNodeFromInstance = getNodeFromInstanceImpl;
          {
            if (!getNodeFromInstance || !getInstanceFromNode) {
              error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
            }
          }
        }
        var validateEventDispatches;
        {
          validateEventDispatches = function(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
              error("EventPluginUtils: Invalid `event`.");
            }
          };
        }
        function executeDispatch(event, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = getNodeFromInstance(inst);
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment14 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef2 = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var eventPluginOrder = null;
        var namesToPlugins = {};
        function recomputePluginOrdering() {
          if (!eventPluginOrder) {
            return;
          }
          for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            if (!(pluginIndex > -1)) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
              }
            }
            if (plugins3[pluginIndex]) {
              continue;
            }
            if (!pluginModule.extractEvents) {
              {
                throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
              }
            }
            plugins3[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
              if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                {
                  throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                }
              }
            }
          }
        }
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
          if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
            }
          }
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
              if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
              }
            }
            return true;
          } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
          }
          return false;
        }
        function publishRegistrationName(registrationName, pluginModule, eventName) {
          if (!!registrationNameModules[registrationName]) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
            }
          }
          registrationNameModules[registrationName] = pluginModule;
          registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
        }
        var plugins3 = [];
        var eventNameDispatchConfigs = {};
        var registrationNameModules = {};
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function injectEventPluginOrder(injectedEventPluginOrder) {
          if (!!eventPluginOrder) {
            {
              throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
            }
          }
          eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
          recomputePluginOrdering();
        }
        function injectEventPluginsByName(injectedNamesToPlugins) {
          var isOrderingDirty = false;
          for (var pluginName in injectedNamesToPlugins) {
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
              continue;
            }
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
              if (!!namesToPlugins[pluginName]) {
                {
                  throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                }
              }
              namesToPlugins[pluginName] = pluginModule;
              isOrderingDirty = true;
            }
          }
          if (isOrderingDirty) {
            recomputePluginOrdering();
          }
        }
        var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var PLUGIN_EVENT_SYSTEM = 1;
        var IS_REPLAYED = 1 << 5;
        var IS_FIRST_ANCESTOR = 1 << 6;
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var enableProfilerTimer = true;
        var enableDeprecatedFlareAPI = false;
        var enableFundamentalAPI = false;
        var warnAboutStringRefs = false;
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a, b, c, d) {
          return fn(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            return fn(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
            flushDiscreteUpdatesImpl();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix3 = name.toLowerCase().slice(0, 5);
                return prefix3 !== "data-" && prefix3 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties2.hasOwnProperty(name) ? properties2[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
        }
        var properties2 = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref6) {
          var name = _ref6[0], attributeName = _ref6[1];
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize40 = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize40);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize40);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize40);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
        });
        var xlinkHref = "xlinkHref";
        properties2[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
        });
        var ReactDebugCurrentFrame = null;
        {
          ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        }
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function initializeLazyComponentType(lazyComponent) {
          if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function(error2) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error2;
              }
            });
          }
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment14:
            case ContextProvider:
            case ContextConsumer:
              return "";
            default:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name = getComponentName(fiber.type);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName(owner.type);
              }
              return describeComponentFrame(name, source, ownerName);
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        }
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var ReactDebugCurrentFrame$2 = null;
        var ReactControlledValuePropTypes = {
          checkPropTypes: null
        };
        {
          ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          var propTypes = {
            value: function(props, propName, componentName) {
              if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            checked: function(props, propName, componentName) {
              if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          };
          ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
            checkPropTypes(propTypes, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
          };
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || node.ownerDocument.activeElement !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React188.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React188.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;
                if (setDefaultSelected) {
                  options[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            ReactControlledValuePropTypes.checkPropTypes("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html2;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        function unsafeCastStringToDOMTopLevelType(topLevelType) {
          return topLevelType;
        }
        function unsafeCastDOMTopLevelTypeToString(topLevelType) {
          return topLevelType;
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style13 = {};
        if (canUseDOM2) {
          style13 = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style13) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
        var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
        var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
        var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
        var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
        var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
        var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
        var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
        var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
        var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
        var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
        var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
        var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
        var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
        var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
        var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
        var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
        var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
        var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
        var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
        var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
        var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
        var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
        var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
        var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
        var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
        var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
        var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
        var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
        var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
        var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
        var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
        var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
        var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
        var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
        var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
        var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
        var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
        var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
        var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
        var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
        var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
        var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
        var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
        var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
        var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
        var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
        var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
        var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
        var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
        var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
        var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
        var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
        var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
        var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
        var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
        var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
        var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
        var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
        var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
        var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
        var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
        var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
        var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
        var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
        var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
        var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
        var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
        var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
        var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
        var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
        var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
        var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
        var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
        var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
        var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
        var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
        var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
        var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
        var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
        var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
        function getRawEventName(topLevelType) {
          return unsafeCastDOMTopLevelTypeToString(topLevelType);
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        var elementListenerMap = new PossiblyWeakMap();
        function getListenerMapForElement(element) {
          var listenerMap = elementListenerMap.get(element);
          if (listenerMap === void 0) {
            listenerMap = new Map();
            elementListenerMap.set(element, listenerMap);
          }
          return listenerMap;
        }
        function get(key3) {
          return key3._reactInternalFiber;
        }
        function has(key3) {
          return key3._reactInternalFiber !== void 0;
        }
        function set(key3, value) {
          key3._reactInternalFiber = value;
        }
        var NoEffect = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function accumulateInto(current2, next) {
          if (!(next != null)) {
            {
              throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
            }
          }
          if (current2 == null) {
            return next;
          }
          if (Array.isArray(current2)) {
            if (Array.isArray(next)) {
              current2.push.apply(current2, next);
              return current2;
            }
            current2.push(next);
            return current2;
          }
          if (Array.isArray(next)) {
            return [current2].concat(next);
          }
          return [current2, next];
        }
        function forEachAccumulated(arr, cb, scope) {
          if (Array.isArray(arr)) {
            arr.forEach(cb, scope);
          } else if (arr) {
            cb.call(scope, arr);
          }
        }
        var eventQueue = null;
        var executeDispatchesAndRelease = function(event) {
          if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        var executeDispatchesAndReleaseTopLevel = function(e) {
          return executeDispatchesAndRelease(e);
        };
        function runEventsInBatch(events) {
          if (events !== null) {
            eventQueue = accumulateInto(eventQueue, events);
          }
          var processingEventQueue = eventQueue;
          eventQueue = null;
          if (!processingEventQueue) {
            return;
          }
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
          if (!!eventQueue) {
            {
              throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            }
          }
          rethrowCaughtError();
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM2) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        function releaseTopLevelCallbackBookKeeping(instance) {
          instance.topLevelType = null;
          instance.nativeEvent = null;
          instance.targetInst = null;
          instance.ancestors.length = 0;
          if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
          }
        }
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
          if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.eventSystemFlags = eventSystemFlags;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
          }
          return {
            topLevelType,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            ancestors: []
          };
        }
        function findRootContainerNode(inst) {
          if (inst.tag === HostRoot) {
            return inst.stateNode.containerInfo;
          }
          while (inst.return) {
            inst = inst.return;
          }
          if (inst.tag !== HostRoot) {
            return null;
          }
          return inst.stateNode.containerInfo;
        }
        function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = null;
          for (var i = 0; i < plugins3.length; i++) {
            var possiblePlugin = plugins3[i];
            if (possiblePlugin) {
              var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              if (extractedEvents) {
                events = accumulateInto(events, extractedEvents);
              }
            }
          }
          return events;
        }
        function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          runEventsInBatch(events);
        }
        function handleTopLevel(bookKeeping) {
          var targetInst = bookKeeping.targetInst;
          var ancestor = targetInst;
          do {
            if (!ancestor) {
              var ancestors = bookKeeping.ancestors;
              ancestors.push(ancestor);
              break;
            }
            var root2 = findRootContainerNode(ancestor);
            if (!root2) {
              break;
            }
            var tag = ancestor.tag;
            if (tag === HostComponent || tag === HostText) {
              bookKeeping.ancestors.push(ancestor);
            }
            ancestor = getClosestInstanceFromNode(root2);
          } while (ancestor);
          for (var i = 0; i < bookKeeping.ancestors.length; i++) {
            targetInst = bookKeeping.ancestors[i];
            var eventTarget = getEventTarget(bookKeeping.nativeEvent);
            var topLevelType = bookKeeping.topLevelType;
            var nativeEvent = bookKeeping.nativeEvent;
            var eventSystemFlags = bookKeeping.eventSystemFlags;
            if (i === 0) {
              eventSystemFlags |= IS_FIRST_ANCESTOR;
            }
            runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
          }
        }
        function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
          var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
          try {
            batchedEventUpdates(handleTopLevel, bookKeeping);
          } finally {
            releaseTopLevelCallbackBookKeeping(bookKeeping);
          }
        }
        function legacyListenToEvent(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
          }
        }
        function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
          if (!listenerMap.has(topLevelType)) {
            switch (topLevelType) {
              case TOP_SCROLL:
                trapCapturedEvent(TOP_SCROLL, mountAt);
                break;
              case TOP_FOCUS:
              case TOP_BLUR:
                trapCapturedEvent(TOP_FOCUS, mountAt);
                trapCapturedEvent(TOP_BLUR, mountAt);
                listenerMap.set(TOP_BLUR, null);
                listenerMap.set(TOP_FOCUS, null);
                break;
              case TOP_CANCEL:
              case TOP_CLOSE:
                if (isEventSupported(getRawEventName(topLevelType))) {
                  trapCapturedEvent(topLevelType, mountAt);
                }
                break;
              case TOP_INVALID:
              case TOP_SUBMIT:
              case TOP_RESET:
                break;
              default:
                var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                if (!isMediaEvent) {
                  trapBubbledEvent(topLevelType, mountAt);
                }
                break;
            }
            listenerMap.set(topLevelType, null);
          }
        }
        function isListeningToAllDependencies(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!listenerMap.has(dependency)) {
              return false;
            }
          }
          return true;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
        var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
          legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
        }
        function eagerlyTrapReplayableEvents(container, document2) {
          var listenerMapForDoc = getListenerMapForElement(document2);
          discreteReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
          continuousReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
        }
        function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          return {
            blockedOn,
            topLevelType,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            container
          };
        }
        function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS:
            case TOP_BLUR:
              queuedFocus = null;
              break;
            case TOP_DRAG_ENTER:
            case TOP_DRAG_LEAVE:
              queuedDrag = null;
              break;
            case TOP_MOUSE_OVER:
            case TOP_MOUSE_OUT:
              queuedMouse = null;
              break;
            case TOP_POINTER_OVER:
            case TOP_POINTER_OUT: {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE: {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode$1(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS: {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
              return true;
            }
            case TOP_DRAG_ENTER: {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
              return true;
            }
            case TOP_MOUSE_OVER: {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
              return true;
            }
            case TOP_POINTER_OVER: {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
              return true;
            }
            case TOP_GOT_POINTER_CAPTURE: {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key3, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key3);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
            } else {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        function addEventBubbleListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, false);
        }
        function addEventCaptureListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, true);
        }
        var simpleEventPluginEventTypes = {};
        var topLevelEventsToDispatchConfig = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
        var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
        var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
        var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
        function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i += 2) {
            var topEvent = eventTypes2[i];
            var event = eventTypes2[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = "on" + capitalizedEvent;
            var config3 = {
              phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + "Capture"
              },
              dependencies: [topEvent],
              eventPriority: priority
            };
            eventPriorities.set(topEvent, priority);
            topLevelEventsToDispatchConfig.set(topEvent, config3);
            simpleEventPluginEventTypes[event] = config3;
          }
        }
        function processTopEventPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i++) {
            eventPriorities.set(eventTypes2[i], priority);
          }
        }
        processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
        function getEventPriorityForPluginSystem(topLevelType) {
          var priority = eventPriorities.get(topLevelType);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function trapBubbledEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, false);
        }
        function trapCapturedEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, true);
        }
        function trapEventForPluginEventSystem(container, topLevelType, capture) {
          var listener;
          switch (getEventPriorityForPluginSystem(topLevelType)) {
            case DiscreteEvent:
              listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case UserBlockingEvent:
              listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case ContinuousEvent:
            default:
              listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
          }
          var rawEventName = getRawEventName(topLevelType);
          if (capture) {
            addEventCaptureListener(container, rawEventName, listener);
          } else {
            addEventBubbleListener(container, rawEventName, listener);
          }
        }
        function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
          runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
        }
        function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          if (!_enabled) {
            return;
          }
          if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
          if (blockedOn === null) {
            clearIfContinuousEvent(topLevelType, nativeEvent);
            return;
          }
          if (isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(topLevelType, nativeEvent);
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
          }
        }
        function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
          }
          return null;
        }
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix3, key3) {
          return prefix3 + key3.charAt(0).toUpperCase() + key3.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix3) {
            isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty2 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty2) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern2 = /([A-Z])/g;
        var msPattern2 = /^ms-/;
        function hyphenateStyleName2(name) {
          return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize2 = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize2(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles131) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles131) {
              if (!styles131.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles131[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName2(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles131) {
          var style14 = node.style;
          for (var styleName in styles131) {
            if (!styles131.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles131[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles131[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style14.setProperty(styleName, styleValue);
            } else {
              style14[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles131) {
          var expanded = {};
          for (var key3 in styles131) {
            var longhands = shorthandToLonghand[key3] || [key3];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key3;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key3 in expandedUpdates) {
              var originalKey = expandedUpdates[key3];
              var correctOriginalKey = expandedStyles[key3];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        var ReactDebugCurrentFrame$3 = null;
        {
          ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key3 in props) {
              var isValid = validateProperty(type, key3);
              if (!isValid) {
                invalidProps.push(key3);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (canUseEventSystem) {
              if (registrationNameModules.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, canUseEventSystem) {
          {
            var unknownProps = [];
            for (var key3 in props) {
              var isValid = validateProperty$1(type, key3, props[key3], canUseEventSystem);
              if (!isValid) {
                unknownProps.push(key3);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, canUseEventSystem) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, canUseEventSystem);
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            time: true,
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, true);
          };
          canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html2) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html2;
            return testElement.innerHTML;
          };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
          var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
          var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
          legacyListenToEvent(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop3() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop3;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement146(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument13 = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument13.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument13.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument13.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument13.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              props = rawProps;
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset2) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset2 && nodeEnd >= offset2) {
                return {
                  node,
                  offset: offset2 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument13 = outerNode.ownerDocument;
          var win = ownerDocument13 && ownerDocument13.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            activeElementDetached: null,
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection2(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start, end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum = getCurrentFiberStackInDev();
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          setEnabled(false);
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement146(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function shouldDeprioritizeSubtree(type, props) {
          return !!props.hidden;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style14 = instance.style;
          if (typeof style14.setProperty === "function") {
            style14.setProperty("display", "none", "important");
          } else {
            style14.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display2 = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display2);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactInternalInstance$" + randomKey;
        var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
        var internalContainerInstanceKey = "__reactContainere$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode$1(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance$1(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode$1(node) {
          return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalEventHandlersKey] = props;
        }
        function getParent(inst) {
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var depthA = 0;
          for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (instA === instB || instA === instB.alternate) {
              return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
          }
          return null;
        }
        function traverseTwoPhase(inst, fn, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i;
          for (i = path.length; i-- > 0; ) {
            fn(path[i], "captured", arg);
          }
          for (i = 0; i < path.length; i++) {
            fn(path[i], "bubbled", arg);
          }
        }
        function traverseEnterLeave(from, to, fn, argFrom, argTo) {
          var common4 = from && to ? getLowestCommonAncestor(from, to) : null;
          var pathFrom = [];
          while (true) {
            if (!from) {
              break;
            }
            if (from === common4) {
              break;
            }
            var alternate = from.alternate;
            if (alternate !== null && alternate === common4) {
              break;
            }
            pathFrom.push(from);
            from = getParent(from);
          }
          var pathTo = [];
          while (true) {
            if (!to) {
              break;
            }
            if (to === common4) {
              break;
            }
            var _alternate = to.alternate;
            if (_alternate !== null && _alternate === common4) {
              break;
            }
            pathTo.push(to);
            to = getParent(to);
          }
          for (var i = 0; i < pathFrom.length; i++) {
            fn(pathFrom[i], "bubbled", argFrom);
          }
          for (var _i = pathTo.length; _i-- > 0; ) {
            fn(pathTo[_i], "captured", argTo);
          }
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var listener;
          var stateNode = inst.stateNode;
          if (!stateNode) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            return null;
          }
          listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
          return getListener(inst, registrationName);
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            if (!inst) {
              error("Dispatching inst must not be null");
            }
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatches(events) {
          forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from, to) {
          traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
          forEachAccumulated(events, accumulateDirectDispatchesSingle);
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset2() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        var EVENT_POOL_SIZE = 10;
        var EventInterface = {
          type: null,
          target: null,
          currentTarget: function() {
            return null;
          },
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
          {
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
            delete this.isDefaultPrevented;
            delete this.isPropagationStopped;
          }
          this.dispatchConfig = dispatchConfig;
          this._targetInst = targetInst;
          this.nativeEvent = nativeEvent;
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            {
              delete this[propName];
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              if (propName === "target") {
                this.target = nativeEventTarget;
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
            this.isPersistent = functionThatReturnsTrue;
          },
          isPersistent: functionThatReturnsFalse,
          destructor: function() {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              {
                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
              }
            }
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            {
              Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
              Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
              Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
              Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
              }));
              Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
              }));
            }
          }
        });
        SyntheticEvent.Interface = EventInterface;
        SyntheticEvent.extend = function(Interface) {
          var Super = this;
          var E = function() {
          };
          E.prototype = Super.prototype;
          var prototype = new E();
          function Class() {
            return Super.apply(this, arguments);
          }
          _assign(prototype, Class.prototype);
          Class.prototype = prototype;
          Class.prototype.constructor = Class;
          Class.Interface = _assign({}, Super.Interface, Interface);
          Class.extend = Super.extend;
          addEventPoolingTo(Class);
          return Class;
        };
        addEventPoolingTo(SyntheticEvent);
        function getPooledWarningPropertyDefinition(propName, getVal) {
          var isFunction2 = typeof getVal === "function";
          return {
            configurable: true,
            set: set2,
            get: get2
          };
          function set2(val) {
            var action = isFunction2 ? "setting the method" : "setting the property";
            warn2(action, "This is effectively a no-op");
            return val;
          }
          function get2() {
            var action = isFunction2 ? "accessing the method" : "accessing the property";
            var result = isFunction2 ? "This is a no-op function" : "This is set to null";
            warn2(action, result);
            return getVal;
          }
          function warn2(action, result) {
            {
              error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
            }
          }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
          var EventConstructor = this;
          if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
          }
          return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
          var EventConstructor = this;
          if (!(event instanceof EventConstructor)) {
            {
              throw Error("Trying to release an event instance into a pool of a different type.");
            }
          }
          event.destructor();
          if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
          }
        }
        function addEventPoolingTo(EventConstructor) {
          EventConstructor.eventPool = [];
          EventConstructor.getPooled = getPooledEvent;
          EventConstructor.release = releasePooledEvent;
        }
        var SyntheticCompositionEvent = SyntheticEvent.extend({
          data: null
        });
        var SyntheticInputEvent = SyntheticEvent.extend({
          data: null
        });
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM2 && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        var eventTypes = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: "onBeforeInput",
              captured: "onBeforeInputCapture"
            },
            dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: "onCompositionEnd",
              captured: "onCompositionEndCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: "onCompositionStart",
              captured: "onCompositionStartCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: "onCompositionUpdate",
              captured: "onCompositionUpdateCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          }
        };
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(topLevelType) {
          switch (topLevelType) {
            case TOP_COMPOSITION_START:
              return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
              return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
              return eventTypes.compositionUpdate;
          }
        }
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
          return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_KEY_UP:
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
              return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionStart;
            }
          } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === eventTypes.compositionStart) {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === eventTypes.compositionEnd) {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_COMPOSITION_END:
              return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
          if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              var chars = getData();
              reset2();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (topLevelType) {
            case TOP_PASTE:
              return null;
            case TOP_KEY_PRESS:
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case TOP_COMPOSITION_END:
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
          event.data = chars;
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var BeforeInputEventPlugin = {
          eventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) {
              return beforeInput;
            }
            if (beforeInput === null) {
              return composition;
            }
            return [composition, beforeInput];
          }
        };
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        var eventTypes$1 = {
          change: {
            phasedRegistrationNames: {
              bubbled: "onChange",
              captured: "onChangeCapture"
            },
            dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
          }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
          var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
          event.type = "change";
          enqueueStateRestore(target);
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
          runEventsInBatch(event);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance$1(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CHANGE) {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM2) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
          if (topLevelType === TOP_FOCUS) {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (topLevelType === TOP_BLUR) {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
          if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CLICK) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        var ChangeEventPlugin = {
          eventTypes: eventTypes$1,
          _isInputEventSupported: isInputEventSupported,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(topLevelType, targetInst);
              if (inst) {
                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                return event;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(topLevelType, targetNode, targetInst);
            }
            if (topLevelType === TOP_BLUR) {
              handleControlledInputBlur(targetNode);
            }
          }
        };
        var SyntheticUIEvent = SyntheticEvent.extend({
          view: null,
          detail: null
        });
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var previousScreenX = 0;
        var previousScreenY = 0;
        var isMovementXSet = false;
        var isMovementYSet = false;
        var SyntheticMouseEvent = SyntheticUIEvent.extend({
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          pageX: null,
          pageY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: getEventModifierState,
          button: null,
          buttons: null,
          relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
              isMovementXSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenX - screenX : 0;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
              isMovementYSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenY - screenY : 0;
          }
        });
        var SyntheticPointerEvent = SyntheticMouseEvent.extend({
          pointerId: null,
          width: null,
          height: null,
          pressure: null,
          tangentialPressure: null,
          tiltX: null,
          tiltY: null,
          twist: null,
          pointerType: null,
          isPrimary: null
        });
        var eventTypes$2 = {
          mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          pointerEnter: {
            registrationName: "onPointerEnter",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          },
          pointerLeave: {
            registrationName: "onPointerLeave",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          }
        };
        var EnterLeaveEventPlugin = {
          eventTypes: eventTypes$2,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
              return null;
            }
            if (!isOutEvent && !isOverEvent) {
              return null;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              from = targetInst;
              var related = nativeEvent.relatedTarget || nativeEvent.toElement;
              to = related ? getClosestInstanceFromNode(related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return null;
            }
            var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
              eventInterface = SyntheticMouseEvent;
              leaveEventType = eventTypes$2.mouseLeave;
              enterEventType = eventTypes$2.mouseEnter;
              eventTypePrefix = "mouse";
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
              eventInterface = SyntheticPointerEvent;
              leaveEventType = eventTypes$2.pointerLeave;
              enterEventType = eventTypes$2.pointerEnter;
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to == null ? win : getNodeFromInstance$1(to);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + "leave";
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + "enter";
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to);
            if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
              return [leave];
            }
            return [leave, enter];
          }
        };
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs2 = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs2(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs2(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
        var eventTypes$3 = {
          select: {
            phasedRegistrationNames: {
              bubbled: "onSelect",
              captured: "onSelectCapture"
            },
            dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
          }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return null;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = "select";
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
          }
          return null;
        }
        var SelectEventPlugin = {
          eventTypes: eventTypes$3,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
            var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
            if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
              return null;
            }
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch (topLevelType) {
              case TOP_FOCUS:
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case TOP_BLUR:
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case TOP_MOUSE_DOWN:
                mouseDown = true;
                break;
              case TOP_CONTEXT_MENU:
              case TOP_MOUSE_UP:
              case TOP_DRAG_END:
                mouseDown = false;
                return constructSelectEvent(nativeEvent, nativeEventTarget);
              case TOP_SELECTION_CHANGE:
                if (skipSelectionChangeEvent) {
                  break;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
          }
        };
        var SyntheticAnimationEvent = SyntheticEvent.extend({
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticClipboardEvent = SyntheticEvent.extend({
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticFocusEvent = SyntheticUIEvent.extend({
          relatedTarget: null
        });
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key3 = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key3 !== "Unidentified") {
              return key3;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
          key: getEventKey,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticDragEvent = SyntheticMouseEvent.extend({
          dataTransfer: null
        });
        var SyntheticTouchEvent = SyntheticUIEvent.extend({
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: getEventModifierState
        });
        var SyntheticTransitionEvent = SyntheticEvent.extend({
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticWheelEvent = SyntheticMouseEvent.extend({
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: null,
          deltaMode: null
        });
        var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
        var SimpleEventPlugin = {
          eventTypes: simpleEventPluginEventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
              case TOP_KEY_PRESS:
                if (getEventCharCode(nativeEvent) === 0) {
                  return null;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                EventConstructor = SyntheticKeyboardEvent;
                break;
              case TOP_BLUR:
              case TOP_FOCUS:
                EventConstructor = SyntheticFocusEvent;
                break;
              case TOP_CLICK:
                if (nativeEvent.button === 2) {
                  return null;
                }
              case TOP_AUX_CLICK:
              case TOP_DOUBLE_CLICK:
              case TOP_MOUSE_DOWN:
              case TOP_MOUSE_MOVE:
              case TOP_MOUSE_UP:
              case TOP_MOUSE_OUT:
              case TOP_MOUSE_OVER:
              case TOP_CONTEXT_MENU:
                EventConstructor = SyntheticMouseEvent;
                break;
              case TOP_DRAG:
              case TOP_DRAG_END:
              case TOP_DRAG_ENTER:
              case TOP_DRAG_EXIT:
              case TOP_DRAG_LEAVE:
              case TOP_DRAG_OVER:
              case TOP_DRAG_START:
              case TOP_DROP:
                EventConstructor = SyntheticDragEvent;
                break;
              case TOP_TOUCH_CANCEL:
              case TOP_TOUCH_END:
              case TOP_TOUCH_MOVE:
              case TOP_TOUCH_START:
                EventConstructor = SyntheticTouchEvent;
                break;
              case TOP_ANIMATION_END:
              case TOP_ANIMATION_ITERATION:
              case TOP_ANIMATION_START:
                EventConstructor = SyntheticAnimationEvent;
                break;
              case TOP_TRANSITION_END:
                EventConstructor = SyntheticTransitionEvent;
                break;
              case TOP_SCROLL:
                EventConstructor = SyntheticUIEvent;
                break;
              case TOP_WHEEL:
                EventConstructor = SyntheticWheelEvent;
                break;
              case TOP_COPY:
              case TOP_CUT:
              case TOP_PASTE:
                EventConstructor = SyntheticClipboardEvent;
                break;
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE:
              case TOP_POINTER_CANCEL:
              case TOP_POINTER_DOWN:
              case TOP_POINTER_MOVE:
              case TOP_POINTER_OUT:
              case TOP_POINTER_OVER:
              case TOP_POINTER_UP:
                EventConstructor = SyntheticPointerEvent;
                break;
              default:
                {
                  if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                    error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                  }
                }
                EventConstructor = SyntheticEvent;
                break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
        };
        var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
        injectEventPluginOrder(DOMEventPluginOrder);
        setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
        injectEventPluginsByName({
          SimpleEventPlugin,
          EnterLeaveEventPlugin,
          ChangeEventPlugin,
          SelectEventPlugin,
          BeforeInputEventPlugin
        });
        var reactEmoji = "⚛";
        var warningEmoji = "⛔";
        var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
        var currentFiber = null;
        var currentPhase = null;
        var currentPhaseFiber = null;
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var labelsInCurrentCommit = new Set();
        var formatMarkName = function(markName) {
          return reactEmoji + " " + markName;
        };
        var formatLabel = function(label, warning2) {
          var prefix3 = warning2 ? warningEmoji + " " : reactEmoji + " ";
          var suffix = warning2 ? " Warning: " + warning2 : "";
          return "" + prefix3 + label + suffix;
        };
        var beginMark = function(markName) {
          performance.mark(formatMarkName(markName));
        };
        var clearMark = function(markName) {
          performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function(label, markName, warning2) {
          var formattedMarkName = formatMarkName(markName);
          var formattedLabel = formatLabel(label, warning2);
          try {
            performance.measure(formattedLabel, formattedMarkName);
          } catch (err) {
          }
          performance.clearMarks(formattedMarkName);
          performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function(label, debugID) {
          return label + " (#" + debugID + ")";
        };
        var getFiberLabel = function(componentName, isMounted2, phase) {
          if (phase === null) {
            return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
          } else {
            return componentName + "." + phase;
          }
        };
        var beginFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          if (isCommitting && labelsInCurrentCommit.has(label)) {
            return false;
          }
          labelsInCurrentCommit.add(label);
          var markName = getFiberMarkName(label, debugID);
          beginMark(markName);
          return true;
        };
        var clearFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          clearMark(markName);
        };
        var endFiberMark = function(fiber, phase, warning2) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          endMark(label, markName, warning2);
        };
        var shouldIgnoreFiber = function(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment14:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
              return true;
            default:
              return false;
          }
        };
        var clearPendingPhaseMeasurement = function() {
          if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
          }
          currentPhaseFiber = null;
          currentPhase = null;
          hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function() {
          var fiber = currentFiber;
          while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
              endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
          }
        };
        var resumeTimersRecursively = function(fiber) {
          if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
          }
          if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
          }
        };
        var resumeTimers = function() {
          if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
          }
        };
        function recordEffect() {
          {
            effectCountInCurrentCommit++;
          }
        }
        function recordScheduleUpdate() {
          {
            if (isCommitting) {
              hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
              hasScheduledUpdateInCurrentPhase = true;
            }
          }
        }
        function startWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = true;
          }
        }
        function cancelWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
          }
        }
        function stopWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
          }
        }
        function stopFailedWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning2 = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
            endFiberMark(fiber, null, warning2);
          }
        }
        function startPhaseTimer(fiber, phase) {
          {
            if (!supportsUserTiming) {
              return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase)) {
              return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase;
          }
        }
        function stopPhaseTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
              var warning2 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
              endFiberMark(currentPhaseFiber, currentPhase, warning2);
            }
            currentPhase = null;
            currentPhaseFiber = null;
          }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
          {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
              return;
            }
            commitCountInCurrentWorkLoop = 0;
            beginMark("(React Tree Reconciliation)");
            resumeTimers();
          }
        }
        function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (interruptedBy2 !== null) {
              if (interruptedBy2.tag === HostRoot) {
                warning2 = "A top-level update interrupted the previous render";
              } else {
                var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                warning2 = "An update to " + componentName + " interrupted the previous render";
              }
            } else if (commitCountInCurrentWorkLoop > 1) {
              warning2 = "There were cascading updates";
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
            pauseTimers();
            endMark(label, "(React Tree Reconciliation)", warning2);
          }
        }
        function startCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark("(Committing Changes)");
          }
        }
        function stopCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (hasScheduledUpdateInCurrentCommit) {
              warning2 = "Lifecycle hook scheduled a cascading update";
            } else if (commitCountInCurrentWorkLoop > 0) {
              warning2 = "Caused by a cascading update in earlier commit";
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark("(Committing Changes)", "(Committing Changes)", warning2);
          }
        }
        function startCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Snapshot Effects)");
          }
        }
        function stopCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
          }
        }
        function startCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Host Effects)");
          }
        }
        function stopCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
          }
        }
        function startCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Calling Lifecycle Methods)");
          }
        }
        function stopCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index3 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index3 < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index3]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index3];
          valueStack[index3] = null;
          {
            fiberStack[index3] = null;
          }
          index3--;
        }
        function push(cursor, value, fiber) {
          index3++;
          valueStack[index3] = cursor.current;
          {
            fiberStack[index3] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component7, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component7)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context2 = {};
            for (var key3 in contextTypes) {
              context2[key3] = unmaskedContext[key3];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context2, "context", name, getCurrentFiberStackInDev);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return context2;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context2, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context2, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext;
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
            }
            return _assign({}, parentContext, {}, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component7 = node.type;
                  if (isContextProvider(Component7)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs = Scheduler_now();
        var now2 = initialTimeMs < 1e4 ? Scheduler_now : function() {
          return Scheduler_now() - initialTimeMs;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
              return NormalPriority;
            case Scheduler_LowPriority:
              return LowPriority;
            case Scheduler_IdlePriority:
              return IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
              return Scheduler_UserBlockingPriority;
            case NormalPriority:
              return Scheduler_NormalPriority;
            case LowPriority:
              return Scheduler_LowPriority;
            case IdlePriority:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            try {
              var _isSync = true;
              var queue = syncQueue;
              runWithPriority$1(ImmediatePriority, function() {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(_isSync);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error2;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var MAX_SIGNED_31_BIT_INT2 = 1073741823;
        var NoWork = 0;
        var Never = 1;
        var Idle = 2;
        var ContinuousHydration = 3;
        var Sync = MAX_SIGNED_31_BIT_INT2;
        var Batched = Sync - 1;
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = Batched - 1;
        function msToExpirationTime(ms2) {
          return MAGIC_NUMBER_OFFSET - (ms2 / UNIT_SIZE | 0);
        }
        function expirationTimeToMs(expirationTime) {
          return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
          return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
          return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var LOW_PRIORITY_EXPIRATION = 5e3;
        var LOW_PRIORITY_BATCH_SIZE = 250;
        function computeAsyncExpiration(currentTime) {
          return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
        }
        function computeSuspenseExpiration(currentTime, timeoutMs) {
          return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
        }
        var HIGH_PRIORITY_EXPIRATION = 500;
        var HIGH_PRIORITY_BATCH_SIZE = 100;
        function computeInteractiveExpiration(currentTime) {
          return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
        }
        function inferPriorityFromExpirationTime(currentTime, expirationTime) {
          if (expirationTime === Sync) {
            return ImmediatePriority;
          }
          if (expirationTime === Never || expirationTime === Idle) {
            return IdlePriority;
          }
          var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
          if (msUntil <= 0) {
            return ImmediatePriority;
          }
          if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
            return UserBlockingPriority$1;
          }
          if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
            return NormalPriority;
          }
          return IdlePriority;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef2: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update3) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update3.staleFamilies, updatedFamilies = update3.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            syncUpdates(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleWork(fiber, Sync);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        function resolveDefaultProps(Component7, baseProps) {
          if (Component7 && Component7.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps2 = Component7.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function readLazyComponentType(lazyComponent) {
          initializeLazyComponentType(lazyComponent);
          if (lazyComponent._status !== Resolved) {
            throw lazyComponent._result;
          }
          return lazyComponent._result;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context2 = providerFiber.type._context;
          {
            push(valueCursor, context2._currentValue, providerFiber);
            context2._currentValue = nextValue;
            {
              if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context2._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context2 = providerFiber.type._context;
          {
            context2._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context2, newValue, oldValue) {
          if (objectIs2(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT2;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT2) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime2) {
              node.childExpirationTime = renderExpirationTime2;
              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              }
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context2, changedBits, renderExpirationTime2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update3 = createUpdate(renderExpirationTime2, null);
                    update3.tag = ForceUpdate;
                    enqueueUpdate(fiber, update3);
                  }
                  if (fiber.expirationTime < renderExpirationTime2) {
                    fiber.expirationTime = renderExpirationTime2;
                  }
                  var alternate = fiber.alternate;
                  if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                    alternate.expirationTime = renderExpirationTime2;
                  }
                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                  if (list.expirationTime < renderExpirationTime2) {
                    list.expirationTime = renderExpirationTime2;
                  }
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderExpirationTime2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (dependencies.expirationTime >= renderExpirationTime2) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context2, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context2)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT2) {
              lastContextWithAllBitsObserved = context2;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT2;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context: context2,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                expirationTime: NoWork,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context2._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            baseQueue: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              baseQueue: currentQueue.baseQueue,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(expirationTime, suspenseConfig) {
          var update3 = {
            expirationTime,
            suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          update3.next = update3;
          {
            update3.priority = getCurrentPriorityLevel();
          }
          return update3;
        }
        function enqueueUpdate(fiber, update3) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update3.next = update3;
          } else {
            update3.next = pending.next;
            pending.next = update3;
          }
          sharedQueue.pending = update3;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, update3) {
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            cloneUpdateQueue(current2, workInProgress2);
          }
          var queue = workInProgress2.updateQueue;
          var last = queue.baseQueue;
          if (last === null) {
            queue.baseQueue = update3.next = update3;
            update3.next = update3;
          } else {
            update3.next = last.next;
            last.next = update3;
          }
        }
        function getStateFromUpdate(workInProgress2, queue, update3, prevState, nextProps, instance) {
          switch (update3.tag) {
            case ReplaceState: {
              var payload = update3.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    payload.call(instance, prevState, nextProps);
                  }
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update3.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    _payload.call(instance, prevState, nextProps);
                  }
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var baseQueue = queue.baseQueue;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            baseQueue = pendingQueue;
            queue.shared.pending = null;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (currentQueue !== null) {
                currentQueue.baseQueue = pendingQueue;
              }
            }
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = queue.baseState;
            var newExpirationTime = NoWork;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            if (first !== null) {
              var update3 = first;
              do {
                var updateExpirationTime = update3.expirationTime;
                if (updateExpirationTime < renderExpirationTime2) {
                  var clone = {
                    expirationTime: update3.expirationTime,
                    suspenseConfig: update3.suspenseConfig,
                    tag: update3.tag,
                    payload: update3.payload,
                    callback: update3.callback,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  if (updateExpirationTime > newExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update3.suspenseConfig,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update3.suspenseConfig);
                  newState = getStateFromUpdate(workInProgress2, queue, update3, newState, props, instance);
                  var callback = update3.callback;
                  if (callback !== null) {
                    workInProgress2.effectTag |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update3];
                    } else {
                      effects.push(update3);
                    }
                  }
                }
                update3 = update3.next;
                if (update3 === null || update3 === first) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    update3 = baseQueue.next = pendingQueue.next;
                    pendingQueue.next = first;
                    queue.baseQueue = baseQueue = pendingQueue;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
            }
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            queue.baseState = newBaseState;
            queue.baseQueue = newBaseQueueLast;
            markUnprocessedUpdateTime(newExpirationTime);
            workInProgress2.expirationTime = newExpirationTime;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context2) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context2);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        function requestCurrentSuspenseConfig() {
          return ReactCurrentBatchConfig.suspense;
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React188.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key3 = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key3)) {
              didWarnOnInvalidCallback.add(key3);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              getDerivedStateFromProps(nextProps, prevState);
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.expirationTime === NoWork) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update3 = createUpdate(expirationTime, suspenseConfig);
            update3.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update3.callback = callback;
            }
            enqueueUpdate(fiber, update3);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update3 = createUpdate(expirationTime, suspenseConfig);
            update3.tag = ReplaceState;
            update3.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update3.callback = callback;
            }
            enqueueUpdate(fiber, update3);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update3 = createUpdate(expirationTime, suspenseConfig);
            update3.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update3.callback = callback;
            }
            enqueueUpdate(fiber, update3);
            scheduleWork(fiber, expirationTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              }
            }
            startPhaseTimer(workInProgress2, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context2 = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context2 = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              new ctor(props, context2);
            }
          }
          var instance = new ctor(props, context2);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context2);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          startPhaseTimer(workInProgress2, "componentWillMount");
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress2, "componentWillReceiveProps");
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          stopPhaseTimer();
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress2, "componentWillMount");
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var oldProps = workInProgress2.memoizedProps;
          instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress2, "componentWillUpdate");
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            }
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
              }
            }
          }
        }
        function warnOnFunctionType() {
          {
            var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, expirationTime) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, expirationTime) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, expirationTime) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, expirationTime, key3) {
            if (current2 === null || current2.tag !== Fragment14) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key3);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            var key3 = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key3 !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key3) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key3);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key3) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key3 !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child);
                  var key3 = child.key;
                  if (typeof key3 !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key3);
                    break;
                  }
                  if (!knownKeys.has(key3)) {
                    knownKeys.add(key3);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key3);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key3 = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key3) {
                switch (child.tag) {
                  case Fragment14: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key3 = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key3) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionComponent: {
                  var Component7 = returnFiber.type;
                  {
                    {
                      throw Error((Component7.displayName || Component7.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, renderExpirationTime2) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, renderExpirationTime2);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context2 = requiredContext(contextStackCursor$1.current);
          return context2;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context2 = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context2, fiber.type);
          if (context2 === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function createDeprecatedResponderListener(responder, props) {
          var eventResponderListener = {
            responder,
            props
          };
          {
            Object.freeze(eventResponderListener);
          }
          return eventResponderListener;
        }
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderExpirationTime = NoWork;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs2(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component7, props, secondArg, nextRenderExpirationTime) {
          renderExpirationTime = nextRenderExpirationTime;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.expirationTime = NoWork;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component7(props, secondArg);
          if (workInProgress2.expirationTime === renderExpirationTime) {
            var numberOfReRenders = 0;
            do {
              workInProgress2.expirationTime = NoWork;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
              children = Component7(props, secondArg);
            } while (workInProgress2.expirationTime === renderExpirationTime);
          }
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, expirationTime) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.effectTag &= ~(Passive | Update);
          if (current2.expirationTime <= expirationTime) {
            current2.expirationTime = NoWork;
          }
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
          }
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update3 = first;
            do {
              var updateExpirationTime = update3.expirationTime;
              if (updateExpirationTime < renderExpirationTime) {
                var clone = {
                  expirationTime: update3.expirationTime,
                  suspenseConfig: update3.suspenseConfig,
                  action: update3.action,
                  eagerReducer: update3.eagerReducer,
                  eagerState: update3.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                  currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                  markUnprocessedUpdateTime(updateExpirationTime);
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update3.suspenseConfig,
                    action: update3.action,
                    eagerReducer: update3.eagerReducer,
                    eagerState: update3.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                markRenderEventTimeAndConfig(updateExpirationTime, update3.suspenseConfig);
                if (update3.eagerReducer === reducer) {
                  newState = update3.eagerState;
                } else {
                  var action = update3.action;
                  newState = reducer(newState, action);
                }
              }
              update3 = update3.next;
            } while (update3 !== null && update3 !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs2(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update3 = firstRenderPhaseUpdate;
            do {
              var action = update3.action;
              newState = reducer(newState, action);
              update3 = update3.next;
            } while (update3 !== firstRenderPhaseUpdate);
            if (!objectIs2(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create2, destroy2, deps) {
          var effect = {
            tag,
            create: create2,
            destroy: destroy2,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberEffectTag, hookEffectTag, create2, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create2, void 0, nextDeps);
        }
        function updateEffectImpl(fiberEffectTag, hookEffectTag, create2, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy2 = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy2 = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookEffectTag, create2, destroy2, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create2, destroy2, nextDeps);
        }
        function mountEffect(create2, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create2, deps);
        }
        function updateEffect(create2, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create2, deps);
        }
        function mountLayoutEffect(create2, deps) {
          return mountEffectImpl(Update, Layout, create2, deps);
        }
        function updateLayoutEffect(create2, deps) {
          return updateEffectImpl(Update, Layout, create2, deps);
        }
        function imperativeHandleEffect(create2, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create2();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create2();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value, config3) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config3]);
          return prevValue;
        }
        function updateDeferredValue(value, config3) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config3]);
          return prevValue;
        }
        function rerenderDeferredValue(value, config3) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config3]);
          return prevValue;
        }
        function startTransition(setPending, config3, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config3 === void 0 ? null : config3;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }
        function mountTransition(config3) {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = mountCallback(startTransition.bind(null, setPending, config3), [setPending, config3]);
          return [start, isPending];
        }
        function updateTransition(config3) {
          var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config3), [setPending, config3]);
          return [start, isPending];
        }
        function rerenderTransition(config3) {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config3), [setPending, config3]);
          return [start, isPending];
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update3 = {
            expirationTime,
            suspenseConfig,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            update3.priority = getCurrentPriorityLevel();
          }
          var pending = queue.pending;
          if (pending === null) {
            update3.next = update3;
          } else {
            update3.next = pending.next;
            pending.next = update3;
          }
          queue.pending = update3;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdate = true;
            update3.expirationTime = renderExpirationTime;
            currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
          } else {
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher.current;
                  ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update3.eagerReducer = lastRenderedReducer;
                  update3.eagerState = eagerState;
                  if (objectIs2(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleWork(fiber, expirationTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useResponder: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition(config3);
            }
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition(config3);
            }
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition(config3);
            }
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition(config3);
            }
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition(config3);
            }
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition(config3);
            }
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config3) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value, config3);
            },
            useTransition: function(config3) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition(config3);
            }
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.effectTag = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        }
        function updateForwardRef(current2, workInProgress2, Component7, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component7.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component7), getCurrentFiberStackInDev);
              }
            }
          }
          var render2 = Component7.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component7, nextProps, updateExpirationTime, renderExpirationTime2) {
          if (current2 === null) {
            var type = Component7.type;
            if (isSimpleFunctionComponent(type) && Component7.compare === null && Component7.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
              }
            }
            var child = createFiberFromTypeAndProps(Component7.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component7.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
            }
          }
          var currentChild = current2.child;
          if (updateExpirationTime < renderExpirationTime2) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component7.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component7, nextProps, updateExpirationTime, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                outerMemoType = refineResolvedLazyComponent(outerMemoType);
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (updateExpirationTime < renderExpirationTime2) {
                workInProgress2.expirationTime = current2.expirationTime;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component7, nextProps, renderExpirationTime2);
        }
        function updateFragment(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
          {
            workInProgress2.effectTag |= Update;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.effectTag |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component7, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component7.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component7), getCurrentFiberStackInDev);
              }
            }
          }
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component7, true);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component7, nextProps, context2, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, Component7, nextProps, context2, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component7, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component7.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component7), getCurrentFiberStackInDev);
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component7)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            constructClassInstance(workInProgress2, Component7, nextProps);
            mountClassInstance(workInProgress2, Component7, nextProps, renderExpirationTime2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component7, nextProps, renderExpirationTime2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component7, nextProps, renderExpirationTime2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component7, shouldUpdate, hasContext, renderExpirationTime2);
          {
            var inst = workInProgress2.stateNode;
            if (inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component7, shouldUpdate, hasContext, renderExpirationTime2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component7, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component7.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                instance.render();
              }
              setIsRendering(false);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component7, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.effectTag = node.effectTag & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.effectTag |= ContentReset;
          }
          markRef(current2, workInProgress2);
          if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            {
              markSpawnedWork(Never);
            }
            workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
            return null;
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType2, updateExpirationTime, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          cancelWorkTimer(workInProgress2);
          var Component7 = readLazyComponentType(elementType2);
          workInProgress2.type = Component7;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component7);
          startWorkTimer(workInProgress2);
          var resolvedProps = resolveDefaultProps(Component7, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component7);
                workInProgress2.type = Component7 = resolveFunctionForHotReloading(Component7);
              }
              child = updateFunctionComponent(null, workInProgress2, Component7, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component7 = resolveClassForHotReloading(Component7);
              }
              child = updateClassComponent(null, workInProgress2, Component7, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ForwardRef2: {
              {
                workInProgress2.type = Component7 = resolveForwardRefForHotReloading(Component7);
              }
              child = updateForwardRef(null, workInProgress2, Component7, resolvedProps, renderExpirationTime2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component7.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component7), getCurrentFiberStackInDev);
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component7, resolveDefaultProps(Component7.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component7 !== null && typeof Component7 === "object" && Component7.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component7 + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component7, nextProps, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component7)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          constructClassInstance(workInProgress2, Component7, nextProps);
          mountClassInstance(workInProgress2, Component7, nextProps, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component7, true, hasContext, renderExpirationTime2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component7, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component7, false);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var value;
          {
            if (Component7.prototype && typeof Component7.prototype.render === "function") {
              var componentName = getComponentName(Component7) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component7, props, context2, renderExpirationTime2);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName = getComponentName(Component7) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component7)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component7.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component7, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component7, props, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component7, true, hasContext, renderExpirationTime2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  value = renderWithHooks(null, workInProgress2, Component7, props, context2, renderExpirationTime2);
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
            {
              validateFunctionComponentInDev(workInProgress2, Component7);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component7) {
          {
            if (Component7) {
              if (Component7.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component7.displayName || Component7.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component7.getDerivedStateFromProps === "function") {
              var _componentName2 = getComponentName(Component7) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
              }
            }
            if (typeof Component7.contextType === "object" && Component7.contextType !== null) {
              var _componentName3 = getComponentName(Component7) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support contextType.", _componentName3);
                didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryTime: NoWork
        };
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
          var mode = workInProgress2.mode;
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.effectTag |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var nextDidTimeout = false;
          var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            nextDidTimeout = true;
            workInProgress2.effectTag &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            if (nextDidTimeout) {
              var nextFallbackChildren = nextProps.fallback;
              var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
              primaryChildFragment.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var progressedState = workInProgress2.memoizedState;
                var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                primaryChildFragment.child = progressedPrimaryChild;
                var progressedChild = progressedPrimaryChild;
                while (progressedChild !== null) {
                  progressedChild.return = primaryChildFragment;
                  progressedChild = progressedChild.sibling;
                }
              }
              var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
              fallbackChildFragment.return = workInProgress2;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = primaryChildFragment;
              return fallbackChildFragment;
            } else {
              var nextPrimaryChildren = nextProps.children;
              workInProgress2.memoizedState = null;
              return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var currentPrimaryChildFragment = current2.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              if (nextDidTimeout) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                _primaryChildFragment2.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState = workInProgress2.memoizedState;
                  var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                    _primaryChildFragment2.child = _progressedPrimaryChild;
                    var _progressedChild2 = _progressedPrimaryChild;
                    while (_progressedChild2 !== null) {
                      _progressedChild2.return = _primaryChildFragment2;
                      _progressedChild2 = _progressedChild2.sibling;
                    }
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration = 0;
                  var _hiddenChild = _primaryChildFragment2.child;
                  while (_hiddenChild !== null) {
                    _treeBaseDuration += _hiddenChild.treeBaseDuration;
                    _hiddenChild = _hiddenChild.sibling;
                  }
                  _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                }
                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                _fallbackChildFragment2.return = workInProgress2;
                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                _primaryChildFragment2.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment2;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var currentPrimaryChild = currentPrimaryChildFragment.child;
                var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                workInProgress2.memoizedState = null;
                return workInProgress2.child = primaryChild;
              }
            } else {
              var _currentPrimaryChild = current2.child;
              if (nextDidTimeout) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                _primaryChildFragment3.return = workInProgress2;
                _primaryChildFragment3.child = _currentPrimaryChild;
                if (_currentPrimaryChild !== null) {
                  _currentPrimaryChild.return = _primaryChildFragment3;
                }
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState2 = workInProgress2.memoizedState;
                  var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                  _primaryChildFragment3.child = _progressedPrimaryChild2;
                  var _progressedChild3 = _progressedPrimaryChild2;
                  while (_progressedChild3 !== null) {
                    _progressedChild3.return = _primaryChildFragment3;
                    _progressedChild3 = _progressedChild3.sibling;
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration2 = 0;
                  var _hiddenChild2 = _primaryChildFragment3.child;
                  while (_hiddenChild2 !== null) {
                    _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                    _hiddenChild2 = _hiddenChild2.sibling;
                  }
                  _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                }
                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                _fallbackChildFragment3.return = workInProgress2;
                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                _fallbackChildFragment3.effectTag |= Placement;
                _primaryChildFragment3.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment3;
                return _fallbackChildFragment3;
              } else {
                workInProgress2.memoizedState = null;
                var _nextPrimaryChildren2 = nextProps.children;
                return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
              }
            }
          }
        }
        function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
          if (fiber.expirationTime < renderExpirationTime2) {
            fiber.expirationTime = renderExpirationTime2;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
            alternate.expirationTime = renderExpirationTime2;
          }
          scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index4) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index4, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailExpiration: 0,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.effectTag |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          return workInProgress2.child;
        }
        function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
          var providerType = workInProgress2.type;
          var context2 = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context2, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            } else {
              propagateContextChange(workInProgress2, context2, changedBits, renderExpirationTime2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
          var context2 = workInProgress2.type;
          {
            if (context2._context === void 0) {
              if (context2 !== context2.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context2 = context2._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var newValue = readContext(context2, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
          cancelWorkTimer(workInProgress2);
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          var updateExpirationTime = workInProgress2.expirationTime;
          if (updateExpirationTime !== NoWork) {
            markUnprocessedUpdateTime(updateExpirationTime);
          }
          var childExpirationTime = workInProgress2.childExpirationTime;
          if (childExpirationTime < renderExpirationTime2) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.effectTag = Deletion;
            newWorkInProgress.effectTag |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderExpirationTime2) {
          var updateExpirationTime = workInProgress2.expirationTime;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (updateExpirationTime < renderExpirationTime2) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                    {
                      markSpawnedWork(Never);
                    }
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                    return null;
                  }
                  break;
                case ClassComponent: {
                  var Component7 = workInProgress2.type;
                  if (isContextProvider(Component7)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (hasChildWork) {
                      workInProgress2.effectTag |= Update;
                    }
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                      return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                  var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                    }
                    workInProgress2.effectTag |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            } else {
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.expirationTime = NoWork;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
            }
            case LazyComponent: {
              var elementType2 = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType2, updateExpirationTime, renderExpirationTime2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
            case ForwardRef2: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
            }
            case Fragment14:
              return updateFragment(current2, workInProgress2, renderExpirationTime2);
            case Mode:
              return updateMode(current2, workInProgress2, renderExpirationTime2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderExpirationTime2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.effectTag |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.effectTag |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderExpirationTime2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef2:
            case Fragment14:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component7 = workInProgress2.type;
              if (isContextProvider(Component7)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                workInProgress2.expirationTime = renderExpirationTime2;
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current2.child.sibling;
                  if (currentFallbackChild !== null) {
                    var first = workInProgress2.firstEffect;
                    if (first !== null) {
                      workInProgress2.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }
                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.effectTag |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderExpirationTime2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.effectTag |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now2() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime2 - 1;
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now2() + TAIL_EXPIRATION_TIMEOUT_MS;
                }
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now2();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderExpirationTime2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component7 = workInProgress2.type;
              if (isContextProvider(Component7)) {
                popContext(workInProgress2);
              }
              var effectTag = workInProgress2.effectTag;
              if (effectTag & ShouldCapture) {
                workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _effectTag = workInProgress2.effectTag;
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _effectTag2 = workInProgress2.effectTag;
              if (_effectTag2 & ShouldCapture) {
                workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function logCapturedError(capturedError) {
          var error2 = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            if (error2 != null && error2._suppressLogging) {
              if (errorBoundaryFound && willRetry) {
                return;
              }
              console["error"](error2);
            }
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        function logError(boundary, errorInfo) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
          }
          var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : "",
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
          };
          if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
          }
          try {
            logCapturedError(capturedError);
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          startPhaseTimer(current2, "componentWillUnmount");
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy2) {
          {
            invokeGuardedCallback(null, destroy2, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.effectTag & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }
              return;
            }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy2 = effect.destroy;
                effect.destroy = void 0;
                if (destroy2 !== void 0) {
                  destroy2();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create2 = effect.create;
                effect.destroy = create2();
                {
                  var destroy2 = effect.destroy;
                  if (destroy2 !== void 0 && typeof destroy2 !== "function") {
                    var addendum = void 0;
                    if (destroy2 === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy2.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy2;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveHookEffects(finishedWork) {
          if ((finishedWork.effectTag & Passive) !== NoEffect) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
              }
            }
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update) {
                if (current2 === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  stopPhaseTimer();
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority$1(priorityLevel, function() {
                      var effect = firstEffect;
                      do {
                        var _destroy = effect.destroy;
                        if (_destroy !== void 0) {
                          safelyCallDestroy(current2, _destroy);
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node = root2;
          while (true) {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiber(current2) {
          var alternate = current2.alternate;
          current2.return = null;
          current2.child = null;
          current2.memoizedState = null;
          current2.updateQueue = null;
          current2.dependencies = null;
          current2.alternate = null;
          current2.firstEffect = null;
          current2.lastEffect = null;
          current2.pendingProps = null;
          current2.memoizedProps = null;
          current2.stateNode = null;
          if (alternate !== null) {
            detachFiber(alternate);
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.effectTag & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.effectTag & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
          }
          detachFiber(current2);
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          var newDidTimeout;
          var primaryChildParent = finishedWork;
          if (newState === null) {
            newDidTimeout = false;
          } else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
          }
          if (primaryChildParent !== null) {
            hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var thenables = finishedWork.updateQueue;
          if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            thenables.forEach(function(thenable) {
              var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
              if (!retryCache.has(thenable)) {
                {
                  if (thenable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(thenable);
                thenable.then(retry, retry);
              }
            });
          }
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
          var update3 = createUpdate(expirationTime, null);
          update3.tag = CaptureUpdate;
          update3.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update3.callback = function() {
            onUncaughtError(error2);
            logError(fiber, errorInfo);
          };
          return update3;
        }
        function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
          var update3 = createUpdate(expirationTime, null);
          update3.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update3.payload = function() {
              logError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update3.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (fiber.expirationTime !== Sync) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update3.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update3;
        }
        function attachPingListener(root2, renderExpirationTime2, thenable) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(thenable, threadIDs);
            }
          }
          if (!threadIDs.has(renderExpirationTime2)) {
            threadIDs.add(renderExpirationTime2);
            var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime2);
            thenable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime2) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var thenable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.expirationTime = currentSource.expirationTime;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var thenables = _workInProgress.updateQueue;
                if (thenables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  thenables.add(thenable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.effectTag |= DidCapture;
                  sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update3 = createUpdate(Sync, null);
                      update3.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update3);
                    }
                  }
                  sourceFiber.expirationTime = Sync;
                  return;
                }
                attachPingListener(root2, renderExpirationTime2, thenable);
                _workInProgress.effectTag |= ShouldCapture;
                _workInProgress.expirationTime = renderExpirationTime2;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var renderExpirationTime$1 = NoWork;
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootLatestProcessedExpirationTime = Sync;
        var workInProgressRootLatestSuspenseTimeout = Sync;
        var workInProgressRootCanSuspendUsingConfig = null;
        var workInProgressRootNextUnprocessedUpdateTime = NoWork;
        var workInProgressRootHasPendingPing = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority;
        var pendingPassiveEffectsExpirationTime = NoWork;
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var interruptedBy = null;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoWork;
        function requestCurrentTimeForUpdate() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return msToExpirationTime(now2());
          }
          if (currentEventTime !== NoWork) {
            return currentEventTime;
          }
          currentEventTime = msToExpirationTime(now2());
          return currentEventTime;
        }
        function getCurrentTime() {
          return msToExpirationTime(now2());
        }
        function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return Sync;
          }
          var priorityLevel = getCurrentPriorityLevel();
          if ((mode & ConcurrentMode) === NoMode) {
            return priorityLevel === ImmediatePriority ? Sync : Batched;
          }
          if ((executionContext & RenderContext) !== NoContext) {
            return renderExpirationTime$1;
          }
          var expirationTime;
          if (suspenseConfig !== null) {
            expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          } else {
            switch (priorityLevel) {
              case ImmediatePriority:
                expirationTime = Sync;
                break;
              case UserBlockingPriority$1:
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
              case NormalPriority:
              case LowPriority:
                expirationTime = computeAsyncExpiration(currentTime);
                break;
              case IdlePriority:
                expirationTime = Idle;
                break;
              default: {
                {
                  throw Error("Expected a valid priority level");
                }
              }
            }
          }
          if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
            expirationTime -= 1;
          }
          return expirationTime;
        }
        function scheduleUpdateOnFiber(fiber, expirationTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
          }
          checkForInterruption(fiber, expirationTime);
          recordScheduleUpdate();
          var priorityLevel = getCurrentPriorityLevel();
          if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, expirationTime);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, expirationTime);
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          } else {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, expirationTime);
          }
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Map([[root2, expirationTime]]);
            } else {
              var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root2);
              if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                rootsWithPendingDiscreteUpdates.set(root2, expirationTime);
              }
            }
          }
        }
        var scheduleWork = scheduleUpdateOnFiber;
        function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
          if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
          }
          var node = fiber.return;
          var root2 = null;
          if (node === null && fiber.tag === HostRoot) {
            root2 = fiber.stateNode;
          } else {
            while (node !== null) {
              alternate = node.alternate;
              if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
              } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
              if (node.return === null && node.tag === HostRoot) {
                root2 = node.stateNode;
                break;
              }
              node = node.return;
            }
          }
          if (root2 !== null) {
            if (workInProgressRoot === root2) {
              markUnprocessedUpdateTime(expirationTime);
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspendedAtTime(root2, renderExpirationTime$1);
              }
            }
            markRootUpdatedAtTime(root2, expirationTime);
          }
          return root2;
        }
        function getNextRootExpirationTimeToWorkOn(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            return lastExpiredTime;
          }
          var firstPendingTime = root2.firstPendingTime;
          if (!isRootSuspendedAtTime(root2, firstPendingTime)) {
            return firstPendingTime;
          }
          var lastPingedTime = root2.lastPingedTime;
          var nextKnownPendingLevel = root2.nextKnownPendingLevel;
          var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
          if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
            return NoWork;
          }
          return nextLevel;
        }
        function ensureRootIsScheduled(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            root2.callbackExpirationTime = Sync;
            root2.callbackPriority = ImmediatePriority;
            root2.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            return;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          var existingCallbackNode = root2.callbackNode;
          if (expirationTime === NoWork) {
            if (existingCallbackNode !== null) {
              root2.callbackNode = null;
              root2.callbackExpirationTime = NoWork;
              root2.callbackPriority = NoPriority;
            }
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            var existingCallbackExpirationTime = root2.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          root2.callbackExpirationTime = expirationTime;
          root2.callbackPriority = priorityLevel;
          var callbackNode;
          if (expirationTime === Sync) {
            callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root2), {
              timeout: expirationTimeToMs(expirationTime) - now2()
            });
          }
          root2.callbackNode = callbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          currentEventTime = NoWork;
          if (didTimeout) {
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root2, currentTime);
            ensureRootIsScheduled(root2);
            return null;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          if (expirationTime !== NoWork) {
            var originalCallbackNode = root2.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root2, expirationTime);
              startWorkOnPendingInteractions(root2, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root2);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root2, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root2, expirationTime);
                markRootSuspendedAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
                throw fatalError;
              }
              if (workInProgress !== null) {
                stopInterruptedWorkLoopTimer();
              } else {
                stopFinishedWorkLoopTimer();
                var finishedWork = root2.finishedWork = root2.current.alternate;
                root2.finishedExpirationTime = expirationTime;
                finishConcurrentRender(root2, finishedWork, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root2);
              if (root2.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root2);
              }
            }
          }
          return null;
        }
        function finishConcurrentRender(root2, finishedWork, exitStatus, expirationTime) {
          workInProgressRoot = null;
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              markRootExpiredAtTime(root2, expirationTime > Idle ? Idle : expirationTime);
              break;
            }
            case RootSuspended: {
              markRootSuspendedAtTime(root2, expirationTime);
              var lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root2.lastPingedTime;
                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root2.lastPingedTime = expirationTime;
                      prepareFreshStack(root2, expirationTime);
                      break;
                    }
                  }
                  var nextTime = getNextRootExpirationTimeToWorkOn(root2);
                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }
                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root2.lastPingedTime = lastSuspendedTime;
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspendedAtTime(root2, expirationTime);
              var _lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === _lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              if (!IsThisRendererActing.current) {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root2.lastPingedTime;
                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root2.lastPingedTime = expirationTime;
                    prepareFreshStack(root2, expirationTime);
                    break;
                  }
                }
                var _nextTime = getNextRootExpirationTimeToWorkOn(root2);
                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }
                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root2.lastPingedTime = _lastSuspendedTime;
                  break;
                }
                var _msUntilTimeout;
                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now2();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now2();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;
                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }
                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootCompleted: {
              if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root2, expirationTime);
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout2);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function performSyncWorkOnRoot(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
            prepareFreshStack(root2, expirationTime);
            startWorkOnPendingInteractions(root2, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root2);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root2, expirationTime);
              markRootSuspendedAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
              throw fatalError;
            }
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            } else {
              stopFinishedWorkLoopTimer();
              root2.finishedWork = root2.current.alternate;
              root2.finishedExpirationTime = expirationTime;
              finishSyncRender(root2);
            }
            ensureRootIsScheduled(root2);
          }
          return null;
        }
        function finishSyncRender(root2) {
          workInProgressRoot = null;
          commitRoot(root2);
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function syncUpdates(fn, a, b, c) {
          return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root2) {
              markRootExpiredAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
            });
            flushSyncCallbackQueue();
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              {
                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
              }
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
        function prepareFreshStack(root2, expirationTime) {
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          renderExpirationTime$1 = expirationTime;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootLatestProcessedExpirationTime = Sync;
          workInProgressRootLatestSuspenseTimeout = Sync;
          workInProgressRootCanSuspendUsingConfig = null;
          workInProgressRootNextUnprocessedUpdateTime = NoWork;
          workInProgressRootHasPendingPing = false;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              if (workInProgress === null || workInProgress.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return null;
              }
              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
              }
              throwException(root2, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
              workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher(root2) {
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now2();
        }
        function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
          if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
            workInProgressRootLatestProcessedExpirationTime = expirationTime;
          }
          if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
              workInProgressRootLatestSuspenseTimeout = expirationTime;
              workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
          }
        }
        function markUnprocessedUpdateTime(expirationTime) {
          if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
            workInProgressRootNextUnprocessedUpdateTime = expirationTime;
          }
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function inferTimeFromExpirationTime(expirationTime) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
        }
        function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          startWorkTimer(unitOfWork);
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            next = completeUnitOfWork(unitOfWork);
          }
          ReactCurrentOwner$2.current = null;
          return next;
        }
        function completeUnitOfWork(unitOfWork) {
          workInProgress = unitOfWork;
          do {
            var current2 = workInProgress.alternate;
            var returnFiber = workInProgress.return;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              setCurrentFiber(workInProgress);
              var next = void 0;
              if ((workInProgress.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
              } else {
                startProfilerTimer(workInProgress);
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              }
              stopWorkTimer(workInProgress);
              resetCurrentFiber();
              resetChildExpirationTime(workInProgress);
              if (next !== null) {
                return next;
              }
              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
            } else {
              var _next = unwindWork(workInProgress);
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                var actualDuration = workInProgress.actualDuration;
                var child = workInProgress.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                workInProgress.actualDuration = actualDuration;
              }
              if (_next !== null) {
                stopFailedWorkTimer(workInProgress);
                _next.effectTag &= HostEffectMask;
                return _next;
              }
              stopWorkTimer(workInProgress);
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) {
              return siblingFiber;
            }
            workInProgress = returnFiber;
          } while (workInProgress !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
          return null;
        }
        function getRemainingExpirationTime(fiber) {
          var updateExpirationTime = fiber.expirationTime;
          var childExpirationTime = fiber.childExpirationTime;
          return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
        }
        function resetChildExpirationTime(completedWork) {
          if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
            return;
          }
          var newChildExpirationTime = NoWork;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              var childUpdateExpirationTime = child.expirationTime;
              var childChildExpirationTime = child.childExpirationTime;
              if (childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childUpdateExpirationTime;
              }
              if (childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childChildExpirationTime;
              }
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              var _childUpdateExpirationTime = _child.expirationTime;
              var _childChildExpirationTime = _child.childExpirationTime;
              if (_childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childUpdateExpirationTime;
              }
              if (_childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childChildExpirationTime;
              }
              _child = _child.sibling;
            }
          }
          completedWork.childExpirationTime = newChildExpirationTime;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var expirationTime = root2.finishedExpirationTime;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          root2.callbackExpirationTime = NoWork;
          root2.callbackPriority = NoPriority;
          root2.nextKnownPendingLevel = NoWork;
          startCommitTimer();
          var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
          markRootFinishedAtTime(root2, expirationTime, remainingExpirationTimeBeforeCommit);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime$1 = NoWork;
          }
          var firstEffect;
          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root2.containerInfo);
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitHostEffectsTimer();
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, expirationTime);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitLifeCyclesTimer();
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
          }
          stopCommitTimer();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = nextNextEffect;
            }
          }
          var remainingExpirationTime = root2.firstPendingTime;
          if (remainingExpirationTime !== NoWork) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingExpirationTime);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, expirationTime);
            }
          }
          if (remainingExpirationTime === Sync) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, expirationTime);
          ensureRootIsScheduled(root2);
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
              setCurrentFiber(nextEffect);
              recordEffect();
              var current2 = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch (primaryEffectTag) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root2, nextEffect, renderPriorityLevel);
                break;
              }
            }
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedExpirationTime) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var expirationTime = pendingPassiveEffectsExpirationTime;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsExpirationTime = NoWork;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          {
            var _effect2 = root2.current.firstEffect;
            while (_effect2 !== null) {
              {
                setCurrentFiber(_effect2);
                invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                if (hasCaughtError()) {
                  if (!(_effect2 !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error5 = clearCaughtError();
                  captureCommitPhaseError(_effect2, _error5);
                }
                resetCurrentFiber();
              }
              var nextNextEffect = _effect2.nextEffect;
              _effect2.nextEffect = null;
              _effect2 = nextNextEffect;
            }
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, expirationTime);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update3 = createRootErrorUpdate(rootFiber, errorInfo, Sync);
          enqueueUpdate(rootFiber, update3);
          var root2 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, Sync);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update3 = createClassErrorUpdate(fiber, errorInfo, Sync);
                enqueueUpdate(fiber, update3);
                var root2 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                if (root2 !== null) {
                  ensureRootIsScheduled(root2);
                  schedulePendingInteractions(root2, Sync);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, thenable, suspendedTime) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(thenable);
          }
          if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, renderExpirationTime$1);
            } else {
              workInProgressRootHasPendingPing = true;
            }
            return;
          }
          if (!isRootSuspendedAtTime(root2, suspendedTime)) {
            return;
          }
          var lastPingedTime = root2.lastPingedTime;
          if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
            return;
          }
          root2.lastPingedTime = suspendedTime;
          ensureRootIsScheduled(root2);
          schedulePendingInteractions(root2, suspendedTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryTime) {
          if (retryTime === NoWork) {
            var suspenseConfig = null;
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
          }
          var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, retryTime);
          }
        }
        function resolveRetryThenable(boundaryFiber, thenable) {
          var retryTime = NoWork;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(thenable);
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
          var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
          if (busyMinDurationMs <= 0) {
            return 0;
          }
          var busyDelayMs = suspenseConfig.busyDelayMs | 0;
          var currentTimeMs = now2();
          var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
          var timeElapsed = currentTimeMs - eventTimeMs;
          if (timeElapsed <= busyDelayMs) {
            return 0;
          }
          var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
          return msUntilTimeout;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function stopFinishedWorkLoopTimer() {
          var didCompleteRoot = true;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function stopInterruptedWorkLoopTimer() {
          var didCompleteRoot = false;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
          if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
            interruptedBy = fiberThatReceivedUpdate;
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, expirationTime) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, expirationTime);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, expirationTime) {
          return expirationTime * 1e3 + root2.interactionThreadID;
        }
        function markSpawnedWork(expirationTime) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [expirationTime];
          } else {
            spawnedWorkDuringRender.push(expirationTime);
          }
        }
        function scheduleInteractions(root2, expirationTime, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, expirationTime) {
          scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, expirationTime) {
          var interactions = new Set();
          root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedExpirationTime) {
          var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedExpirationTime);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                pendingInteractionMap.delete(scheduledExpirationTime);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        var onScheduleFiberRoot = null;
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            if (true) {
              if (typeof hook.onScheduleFiberRoot === "function") {
                onScheduleFiberRoot = function(root2, children) {
                  try {
                    hook.onScheduleFiberRoot(rendererID, root2, children);
                  } catch (err) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                };
              }
            }
            onCommitFiberRoot = function(root2, expirationTime) {
              try {
                var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var currentTime = getCurrentTime();
                  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                  hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  hook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
            onCommitFiberUnmount = function(fiber) {
              try {
                hook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          if (typeof onScheduleFiberRoot === "function") {
            onScheduleFiberRoot(root2, children);
          }
        }
        function onCommitRoot(root2, expirationTime) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root2, expirationTime);
          }
        }
        function onCommitUnmount(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = new Map([[nonExtensibleObject, null]]);
            var testSet = new Set([nonExtensibleObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key3, mode) {
          this.tag = tag;
          this.key = key3;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.effectTag = NoEffect;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.expirationTime = NoWork;
          this.childExpirationTime = NoWork;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugIsCurrentlyTiming = false;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key3, mode) {
          return new FiberNode(tag, pendingProps, key3, mode);
        };
        function shouldConstruct(Component7) {
          var prototype = Component7.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component7) {
          if (typeof Component7 === "function") {
            return shouldConstruct(Component7) ? ClassComponent : FunctionComponent;
          } else if (Component7 !== void 0 && Component7 !== null) {
            var $$typeof = Component7.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef2;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              {
                workInProgress2._debugID = current2._debugID;
              }
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.effectTag = NoEffect;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef2:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
          workInProgress2.effectTag &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childExpirationTime = NoWork;
            workInProgress2.expirationTime = renderExpirationTime2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key3, pendingProps, owner, mode, expirationTime) {
          var fiber;
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, expirationTime, key3);
                case REACT_CONCURRENT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= ConcurrentMode | BlockingMode | StrictMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, expirationTime, key3);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, expirationTime, key3);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key3);
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef2;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          fiber = createFiber(fiberTag, pendingProps, key3, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromElement(element, mode, expirationTime) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key3 = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key3, pendingProps, owner, mode, expirationTime);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, expirationTime, key3) {
          var fiber = createFiber(Fragment14, elements, key3, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, expirationTime, key3) {
          {
            if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
              error('Profiler must specify an "id" string and "onRender" function as props');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key3, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, expirationTime, key3) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key3, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key3) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key3, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromText(content, mode, expirationTime) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, expirationTime) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.expirationTime = expirationTime;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.effectTag = source.effectTag;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.expirationTime = source.expirationTime;
          target.childExpirationTime = source.childExpirationTime;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          {
            target._debugID = source._debugID;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.current = null;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.pingCache = null;
          this.finishedExpirationTime = NoWork;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoPriority;
          this.firstPendingTime = NoWork;
          this.firstSuspendedTime = NoWork;
          this.lastSuspendedTime = NoWork;
          this.nextKnownPendingLevel = NoWork;
          this.lastPingedTime = NoWork;
          this.lastExpiredTime = NoWork;
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function isRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
        }
        function markRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          if (firstSuspendedTime < expirationTime) {
            root2.firstSuspendedTime = expirationTime;
          }
          if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
            root2.lastSuspendedTime = expirationTime;
          }
          if (expirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (expirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootUpdatedAtTime(root2, expirationTime) {
          var firstPendingTime = root2.firstPendingTime;
          if (expirationTime > firstPendingTime) {
            root2.firstPendingTime = expirationTime;
          }
          var firstSuspendedTime = root2.firstSuspendedTime;
          if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) {
              root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            } else if (expirationTime >= root2.lastSuspendedTime) {
              root2.lastSuspendedTime = expirationTime + 1;
            }
            if (expirationTime > root2.nextKnownPendingLevel) {
              root2.nextKnownPendingLevel = expirationTime;
            }
          }
        }
        function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
          root2.firstPendingTime = remainingExpirationTime;
          if (finishedExpirationTime <= root2.lastSuspendedTime) {
            root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
          } else if (finishedExpirationTime <= root2.firstSuspendedTime) {
            root2.firstSuspendedTime = finishedExpirationTime - 1;
          }
          if (finishedExpirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (finishedExpirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootExpiredAtTime(root2, expirationTime) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
            root2.lastExpiredTime = expirationTime;
          }
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component7 = fiber.type;
            if (isContextProvider(Component7)) {
              return processChildContext(fiber, Component7, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var currentTime = requestCurrentTimeForUpdate();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
          var context2 = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context2;
          } else {
            container.pendingContext = context2;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update3 = createUpdate(expirationTime, suspenseConfig);
          update3.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update3.callback = callback;
          }
          enqueueUpdate(current$1, update3);
          scheduleWork(current$1, expirationTime);
          return expirationTime;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryTimeImpl(fiber, retryTime) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) {
              suspenseState.retryTime = retryTime;
            }
          }
        }
        function markRetryTimeIfNotHydrated(fiber, retryTime) {
          markRetryTimeImpl(fiber, retryTime);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryTimeImpl(alternate, retryTime);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          scheduleWork(fiber, ContinuousHydration);
          markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var expTime = computeExpirationForFiber(currentTime, fiber, null);
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideProps = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithSetImpl = function(obj, path, idx, value) {
            if (idx >= path.length) {
              return value;
            }
            var key3 = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key3] = copyWithSetImpl(obj[key3], path, idx + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          overrideHookState = function(fiber, id, path, value) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            if (currentHook2 !== null) {
              var newState = copyWithSet(currentHook2.memoizedState, path, value);
              currentHook2.memoizedState = newState;
              currentHook2.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleWork(fiber, Sync);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
          };
          scheduleUpdate = function(fiber) {
            scheduleWork(fiber, Sync);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals(_assign({}, devToolsConfig, {
            overrideHookState,
            overrideProps,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber: function(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: function() {
              return current;
            }
          }));
        }
        var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
        function ReactDOMRoot(container, options) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
        }
        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options) {
          var hydrate2 = options != null && options.hydrate === true;
          var hydrationCallbacks = options != null && options.hydrationOptions || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          if (hydrate2 && tag !== LegacyRoot) {
            var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
            eagerlyTrapReplayableEvents(container, doc);
          }
          return root2;
        }
        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode15(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        function createPortal2(children, containerInfo, implementation) {
          var key3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key3 == null ? null : "" + key3,
            children,
            containerInfo,
            implementation
          };
        }
        var ReactVersion = "16.13.1";
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal2(children, container, null, key3);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key3);
        }
        var Internals = {
          Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM2 && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode15;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment14 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal5 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment14;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal5;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var checkPropTypes = require_checkPropTypes();
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement19, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement19(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key3, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key3 in propValue) {
            if (has(propValue, key3)) {
              var error = typeChecker(propValue, key3, componentName, location, propFullName + "." + key3, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key3 in shapeTypes) {
            var checker = shapeTypes[key3];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key3, componentName, location, propFullName + "." + key3, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key3 in allKeys) {
            var checker = shapeTypes[key3];
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key3 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key3, componentName, location, propFullName + "." + key3, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement19(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS((exports, module) => {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty19 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf2 = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics5(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf2(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics5(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key3 = keys2[i];
          if (!KNOWN_STATICS[key3] && !(blacklist && blacklist[key3]) && !(sourceStatics && sourceStatics[key3]) && !(targetStatics && targetStatics[key3])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key3);
            try {
              defineProperty19(targetComponent, key3, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics5;
  });

  // node_modules/@material-ui/core/esm/SvgIcon/index.js
  var require_SvgIcon = __commonJS((exports) => {
    __export(exports, {
      default: () => SvgIcon_default
    });
  });

  // node_modules/@material-ui/core/esm/index.js
  var require_esm = __commonJS((exports) => {
    __export(exports, {
      Accordion: () => Accordion_default,
      AccordionActions: () => AccordionActions_default,
      AccordionDetails: () => AccordionDetails_default,
      AccordionSummary: () => AccordionSummary_default,
      AppBar: () => AppBar_default,
      Avatar: () => Avatar_default,
      Backdrop: () => Backdrop_default,
      Badge: () => Badge_default,
      BottomNavigation: () => BottomNavigation_default,
      BottomNavigationAction: () => BottomNavigationAction_default,
      Box: () => Box_default,
      Breadcrumbs: () => Breadcrumbs_default,
      Button: () => Button_default,
      ButtonBase: () => ButtonBase_default,
      ButtonGroup: () => ButtonGroup_default,
      Card: () => Card_default,
      CardActionArea: () => CardActionArea_default,
      CardActions: () => CardActions_default,
      CardContent: () => CardContent_default,
      CardHeader: () => CardHeader_default,
      CardMedia: () => CardMedia_default,
      Checkbox: () => Checkbox_default,
      Chip: () => Chip_default,
      CircularProgress: () => CircularProgress_default,
      ClickAwayListener: () => ClickAwayListener_default,
      Collapse: () => Collapse_default,
      Container: () => Container_default,
      CssBaseline: () => CssBaseline_default,
      Dialog: () => Dialog_default,
      DialogActions: () => DialogActions_default,
      DialogContent: () => DialogContent_default,
      DialogContentText: () => DialogContentText_default,
      DialogTitle: () => DialogTitle_default,
      Divider: () => Divider_default,
      Drawer: () => Drawer_default,
      ExpansionPanel: () => ExpansionPanel_default,
      ExpansionPanelActions: () => ExpansionPanelActions_default,
      ExpansionPanelDetails: () => ExpansionPanelDetails_default,
      ExpansionPanelSummary: () => ExpansionPanelSummary_default,
      Fab: () => Fab_default,
      Fade: () => Fade_default,
      FilledInput: () => FilledInput_default,
      FormControl: () => FormControl_default,
      FormControlLabel: () => FormControlLabel_default,
      FormGroup: () => FormGroup_default,
      FormHelperText: () => FormHelperText_default,
      FormLabel: () => FormLabel_default,
      Grid: () => Grid_default,
      GridList: () => GridList_default,
      GridListTile: () => GridListTile_default,
      GridListTileBar: () => GridListTileBar_default,
      Grow: () => Grow_default,
      Hidden: () => Hidden_default,
      Icon: () => Icon_default,
      IconButton: () => IconButton_default,
      Input: () => Input_default,
      InputAdornment: () => InputAdornment_default,
      InputBase: () => InputBase_default,
      InputLabel: () => InputLabel_default,
      LinearProgress: () => LinearProgress_default,
      Link: () => Link_default,
      List: () => List_default,
      ListItem: () => ListItem_default,
      ListItemAvatar: () => ListItemAvatar_default,
      ListItemIcon: () => ListItemIcon_default,
      ListItemSecondaryAction: () => ListItemSecondaryAction_default,
      ListItemText: () => ListItemText_default,
      ListSubheader: () => ListSubheader_default,
      Menu: () => Menu_default,
      MenuItem: () => MenuItem_default,
      MenuList: () => MenuList_default,
      MobileStepper: () => MobileStepper_default,
      Modal: () => Modal_default,
      ModalManager: () => ModalManager2,
      MuiThemeProvider: () => ThemeProvider_default,
      NativeSelect: () => NativeSelect_default,
      NoSsr: () => NoSsr_default,
      OutlinedInput: () => OutlinedInput_default,
      Paper: () => Paper_default,
      Popover: () => Popover_default,
      Popper: () => Popper_default,
      Portal: () => Portal_default,
      Radio: () => Radio_default,
      RadioGroup: () => RadioGroup_default,
      RootRef: () => RootRef_default,
      Select: () => Select_default,
      ServerStyleSheets: () => ServerStyleSheets,
      Slide: () => Slide_default,
      Slider: () => Slider_default,
      Snackbar: () => Snackbar_default,
      SnackbarContent: () => SnackbarContent_default,
      Step: () => Step_default,
      StepButton: () => StepButton_default,
      StepConnector: () => StepConnector_default,
      StepContent: () => StepContent_default,
      StepIcon: () => StepIcon_default,
      StepLabel: () => StepLabel_default,
      Stepper: () => Stepper_default,
      StylesProvider: () => StylesProvider,
      SvgIcon: () => SvgIcon6.default,
      SwipeableDrawer: () => SwipeableDrawer_default,
      Switch: () => Switch_default,
      Tab: () => Tab_default,
      TabScrollButton: () => TabScrollButton_default,
      Table: () => Table_default,
      TableBody: () => TableBody_default,
      TableCell: () => TableCell_default,
      TableContainer: () => TableContainer_default,
      TableFooter: () => TableFooter_default,
      TableHead: () => TableHead_default,
      TablePagination: () => TablePagination_default,
      TableRow: () => TableRow_default,
      TableSortLabel: () => TableSortLabel_default,
      Tabs: () => Tabs_default,
      TextField: () => TextField_default,
      TextareaAutosize: () => TextareaAutosize_default,
      ThemeProvider: () => ThemeProvider_default,
      Toolbar: () => Toolbar_default,
      Tooltip: () => Tooltip_default,
      Typography: () => Typography_default,
      Unstable_TrapFocus: () => Unstable_TrapFocus_default,
      Zoom: () => Zoom_default,
      capitalize: () => capitalize2,
      colors: () => colors_exports,
      createChainedFunction: () => createChainedFunction2,
      createGenerateClassName: () => createGenerateClassName,
      createMuiTheme: () => createMuiTheme_default,
      createStyles: () => createStyles2,
      createSvgIcon: () => createSvgIcon2,
      darken: () => darken,
      debounce: () => debounce2,
      decomposeColor: () => decomposeColor,
      deprecatedPropType: () => deprecatedPropType,
      duration: () => duration,
      easing: () => easing,
      emphasize: () => emphasize,
      fade: () => fade,
      getContrastRatio: () => getContrastRatio,
      getLuminance: () => getLuminance,
      hexToRgb: () => hexToRgb,
      hslToRgb: () => hslToRgb,
      isMuiElement: () => isMuiElement2,
      isWidthDown: () => isWidthDown,
      isWidthUp: () => isWidthUp,
      jssPreset: () => jssPreset,
      lighten: () => lighten,
      makeStyles: () => makeStyles_default,
      ownerDocument: () => ownerDocument2,
      ownerWindow: () => ownerWindow2,
      recomposeColor: () => recomposeColor,
      requirePropFactory: () => requirePropFactory2,
      responsiveFontSizes: () => responsiveFontSizes2,
      rgbToHex: () => rgbToHex,
      setRef: () => setRef2,
      styleFunction: () => styleFunction,
      styled: () => styled_default,
      unstable_createMuiStrictModeTheme: () => createMuiStrictModeTheme,
      unstable_useId: () => useId,
      unsupportedProp: () => unsupportedProp2,
      useControlled: () => useControlled2,
      useEventCallback: () => useEventCallback2,
      useForkRef: () => useForkRef2,
      useFormControl: () => useFormControl3,
      useIsFocusVisible: () => useIsFocusVisible2,
      useMediaQuery: () => useMediaQuery2,
      useRadioGroup: () => useRadioGroup2,
      useScrollTrigger: () => useScrollTrigger2,
      useTheme: () => useTheme2,
      withMobileDialog: () => withMobileDialog_default,
      withStyles: () => withStyles_default,
      withTheme: () => withTheme_default,
      withWidth: () => withWidth_default
    });
    const SvgIcon6 = __toModule(require_SvgIcon());
    __exportStar(exports, __toModule(require_SvgIcon()));
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS((exports, module) => {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    module.exports = _interopRequireDefault;
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS((exports, module) => {
    function _extends3() {
      module.exports = _extends3 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key3 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key3)) {
              target[key3] = source[key3];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    module.exports = _extends3;
  });

  // node_modules/@material-ui/icons/utils/createSvgIcon.js
  var require_createSvgIcon = __commonJS((exports) => {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createSvgIcon17;
    var _extends22 = _interopRequireDefault(require_extends());
    var _react = _interopRequireDefault(require_react());
    var _SvgIcon = _interopRequireDefault(require_SvgIcon());
    function createSvgIcon17(path, displayName) {
      var Component7 = _react.default.memo(_react.default.forwardRef(function(props, ref) {
        return _react.default.createElement(_SvgIcon.default, (0, _extends22.default)({
          ref
        }, props), path);
      }));
      if (true) {
        Component7.displayName = "".concat(displayName, "Icon");
      }
      Component7.muiName = _SvgIcon.default.muiName;
      return Component7;
    }
  });

  // node_modules/@material-ui/icons/LockOutlined.js
  var require_LockOutlined = __commonJS((exports) => {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(_react.default.createElement("path", {
      d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"
    }), "LockOutlined");
    exports.default = _default;
  });

  // node_modules/isarray/index.js
  var require_isarray = __commonJS((exports, module) => {
    module.exports = Array.isArray || function(arr) {
      return Object.prototype.toString.call(arr) == "[object Array]";
    };
  });

  // node_modules/path-to-regexp/index.js
  var require_path_to_regexp = __commonJS((exports, module) => {
    var isarray = require_isarray();
    module.exports = pathToRegexp2;
    module.exports.parse = parse;
    module.exports.compile = compile;
    module.exports.tokensToFunction = tokensToFunction;
    module.exports.tokensToRegExp = tokensToRegExp;
    var PATH_REGEXP = new RegExp([
      "(\\\\.)",
      "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
    ].join("|"), "g");
    function parse(str, options) {
      var tokens = [];
      var key3 = 0;
      var index3 = 0;
      var path = "";
      var defaultDelimiter = options && options.delimiter || "/";
      var res;
      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset2 = res.index;
        path += str.slice(index3, offset2);
        index3 = offset2 + m.length;
        if (escaped) {
          path += escaped[1];
          continue;
        }
        var next = str[index3];
        var prefix3 = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        if (path) {
          tokens.push(path);
          path = "";
        }
        var partial = prefix3 != null && next != null && next !== prefix3;
        var repeat = modifier === "+" || modifier === "*";
        var optional = modifier === "?" || modifier === "*";
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
          name: name || key3++,
          prefix: prefix3 || "",
          delimiter,
          optional,
          repeat,
          partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter) + "]+?"
        });
      }
      if (index3 < str.length) {
        path += str.substr(index3);
      }
      if (path) {
        tokens.push(path);
      }
      return tokens;
    }
    function compile(str, options) {
      return tokensToFunction(parse(str, options), options);
    }
    function encodeURIComponentPretty(str) {
      return encodeURI(str).replace(/[\/?#]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeAsterisk(str) {
      return encodeURI(str).replace(/[?#]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function tokensToFunction(tokens, options) {
      var matches = new Array(tokens.length);
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === "object") {
          matches[i] = new RegExp("^(?:" + tokens[i].pattern + ")$", flags(options));
        }
      }
      return function(obj, opts) {
        var path = "";
        var data = obj || {};
        var options2 = opts || {};
        var encode = options2.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for (var i2 = 0; i2 < tokens.length; i2++) {
          var token = tokens[i2];
          if (typeof token === "string") {
            path += token;
            continue;
          }
          var value = data[token.name];
          var segment;
          if (value == null) {
            if (token.optional) {
              if (token.partial) {
                path += token.prefix;
              }
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined');
            }
          }
          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + "`");
            }
            if (value.length === 0) {
              if (token.optional) {
                continue;
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty');
              }
            }
            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j]);
              if (!matches[i2].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + "`");
              }
              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }
            continue;
          }
          segment = token.asterisk ? encodeAsterisk(value) : encode(value);
          if (!matches[i2].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
          }
          path += token.prefix + segment;
        }
        return path;
      };
    }
    function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
    }
    function escapeGroup(group) {
      return group.replace(/([=!:$\/()])/g, "\\$1");
    }
    function attachKeys(re, keys2) {
      re.keys = keys2;
      return re;
    }
    function flags(options) {
      return options && options.sensitive ? "" : "i";
    }
    function regexpToRegexp(path, keys2) {
      var groups = path.source.match(/\((?!\?)/g);
      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys2.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null
          });
        }
      }
      return attachKeys(path, keys2);
    }
    function arrayToRegexp(path, keys2, options) {
      var parts = [];
      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp2(path[i], keys2, options).source);
      }
      var regexp = new RegExp("(?:" + parts.join("|") + ")", flags(options));
      return attachKeys(regexp, keys2);
    }
    function stringToRegexp(path, keys2, options) {
      return tokensToRegExp(parse(path, options), keys2, options);
    }
    function tokensToRegExp(tokens, keys2, options) {
      if (!isarray(keys2)) {
        options = keys2 || options;
        keys2 = [];
      }
      options = options || {};
      var strict = options.strict;
      var end = options.end !== false;
      var route = "";
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (typeof token === "string") {
          route += escapeString(token);
        } else {
          var prefix3 = escapeString(token.prefix);
          var capture = "(?:" + token.pattern + ")";
          keys2.push(token);
          if (token.repeat) {
            capture += "(?:" + prefix3 + capture + ")*";
          }
          if (token.optional) {
            if (!token.partial) {
              capture = "(?:" + prefix3 + "(" + capture + "))?";
            } else {
              capture = prefix3 + "(" + capture + ")?";
            }
          } else {
            capture = prefix3 + "(" + capture + ")";
          }
          route += capture;
        }
      }
      var delimiter = escapeString(options.delimiter || "/");
      var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
      if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + "(?:" + delimiter + "(?=$))?";
      }
      if (end) {
        route += "$";
      } else {
        route += strict && endsWithDelimiter ? "" : "(?=" + delimiter + "|$)";
      }
      return attachKeys(new RegExp("^" + route, flags(options)), keys2);
    }
    function pathToRegexp2(path, keys2, options) {
      if (!isarray(keys2)) {
        options = keys2 || options;
        keys2 = [];
      }
      options = options || {};
      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys2);
      }
      if (isarray(path)) {
        return arrayToRegexp(path, keys2, options);
      }
      return stringToRegexp(path, keys2, options);
    }
  });

  // src/App.js
  var require_App = __commonJS((exports) => {
    __export(exports, {
      default: () => App_default
    });
    const React188 = __toModule(require_react());
    const ReactDOM17 = __toModule(require_react_dom());
    function App() {
      return React188.createElement(BrowserRouter, null, React188.createElement("div", {
        className: "App"
      }, React188.createElement(NavBar_default, null), React188.createElement("h1", null, "Welcome To Andromeda"), React188.createElement(Route, {
        path: "/sign_in_employee",
        components: sign_in_employee_default
      })));
    }
    ReactDOM17.render(App, document.getElementById("root"));
    const App_default = App;
  });

  // node_modules/@material-ui/core/esm/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  const common_default = common;

  // node_modules/@material-ui/core/esm/colors/red.js
  var red2 = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  const red_default = red2;

  // node_modules/@material-ui/core/esm/colors/pink.js
  var pink2 = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
  };
  const pink_default = pink2;

  // node_modules/@material-ui/core/esm/colors/purple.js
  var purple2 = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  const purple_default = purple2;

  // node_modules/@material-ui/core/esm/colors/deepPurple.js
  var deepPurple = {
    50: "#ede7f6",
    100: "#d1c4e9",
    200: "#b39ddb",
    300: "#9575cd",
    400: "#7e57c2",
    500: "#673ab7",
    600: "#5e35b1",
    700: "#512da8",
    800: "#4527a0",
    900: "#311b92",
    A100: "#b388ff",
    A200: "#7c4dff",
    A400: "#651fff",
    A700: "#6200ea"
  };
  const deepPurple_default = deepPurple;

  // node_modules/@material-ui/core/esm/colors/indigo.js
  var indigo2 = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
  };
  const indigo_default = indigo2;

  // node_modules/@material-ui/core/esm/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  const blue_default = blue;

  // node_modules/@material-ui/core/esm/colors/lightBlue.js
  var lightBlue2 = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  const lightBlue_default = lightBlue2;

  // node_modules/@material-ui/core/esm/colors/cyan.js
  var cyan = {
    50: "#e0f7fa",
    100: "#b2ebf2",
    200: "#80deea",
    300: "#4dd0e1",
    400: "#26c6da",
    500: "#00bcd4",
    600: "#00acc1",
    700: "#0097a7",
    800: "#00838f",
    900: "#006064",
    A100: "#84ffff",
    A200: "#18ffff",
    A400: "#00e5ff",
    A700: "#00b8d4"
  };
  const cyan_default = cyan;

  // node_modules/@material-ui/core/esm/colors/teal.js
  var teal2 = {
    50: "#e0f2f1",
    100: "#b2dfdb",
    200: "#80cbc4",
    300: "#4db6ac",
    400: "#26a69a",
    500: "#009688",
    600: "#00897b",
    700: "#00796b",
    800: "#00695c",
    900: "#004d40",
    A100: "#a7ffeb",
    A200: "#64ffda",
    A400: "#1de9b6",
    A700: "#00bfa5"
  };
  const teal_default = teal2;

  // node_modules/@material-ui/core/esm/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  const green_default = green;

  // node_modules/@material-ui/core/esm/colors/lightGreen.js
  var lightGreen2 = {
    50: "#f1f8e9",
    100: "#dcedc8",
    200: "#c5e1a5",
    300: "#aed581",
    400: "#9ccc65",
    500: "#8bc34a",
    600: "#7cb342",
    700: "#689f38",
    800: "#558b2f",
    900: "#33691e",
    A100: "#ccff90",
    A200: "#b2ff59",
    A400: "#76ff03",
    A700: "#64dd17"
  };
  const lightGreen_default = lightGreen2;

  // node_modules/@material-ui/core/esm/colors/lime.js
  var lime2 = {
    50: "#f9fbe7",
    100: "#f0f4c3",
    200: "#e6ee9c",
    300: "#dce775",
    400: "#d4e157",
    500: "#cddc39",
    600: "#c0ca33",
    700: "#afb42b",
    800: "#9e9d24",
    900: "#827717",
    A100: "#f4ff81",
    A200: "#eeff41",
    A400: "#c6ff00",
    A700: "#aeea00"
  };
  const lime_default = lime2;

  // node_modules/@material-ui/core/esm/colors/yellow.js
  var yellow2 = {
    50: "#fffde7",
    100: "#fff9c4",
    200: "#fff59d",
    300: "#fff176",
    400: "#ffee58",
    500: "#ffeb3b",
    600: "#fdd835",
    700: "#fbc02d",
    800: "#f9a825",
    900: "#f57f17",
    A100: "#ffff8d",
    A200: "#ffff00",
    A400: "#ffea00",
    A700: "#ffd600"
  };
  const yellow_default = yellow2;

  // node_modules/@material-ui/core/esm/colors/amber.js
  var amber = {
    50: "#fff8e1",
    100: "#ffecb3",
    200: "#ffe082",
    300: "#ffd54f",
    400: "#ffca28",
    500: "#ffc107",
    600: "#ffb300",
    700: "#ffa000",
    800: "#ff8f00",
    900: "#ff6f00",
    A100: "#ffe57f",
    A200: "#ffd740",
    A400: "#ffc400",
    A700: "#ffab00"
  };
  const amber_default = amber;

  // node_modules/@material-ui/core/esm/colors/orange.js
  var orange2 = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  const orange_default = orange2;

  // node_modules/@material-ui/core/esm/colors/deepOrange.js
  var deepOrange = {
    50: "#fbe9e7",
    100: "#ffccbc",
    200: "#ffab91",
    300: "#ff8a65",
    400: "#ff7043",
    500: "#ff5722",
    600: "#f4511e",
    700: "#e64a19",
    800: "#d84315",
    900: "#bf360c",
    A100: "#ff9e80",
    A200: "#ff6e40",
    A400: "#ff3d00",
    A700: "#dd2c00"
  };
  const deepOrange_default = deepOrange;

  // node_modules/@material-ui/core/esm/colors/brown.js
  var brown = {
    50: "#efebe9",
    100: "#d7ccc8",
    200: "#bcaaa4",
    300: "#a1887f",
    400: "#8d6e63",
    500: "#795548",
    600: "#6d4c41",
    700: "#5d4037",
    800: "#4e342e",
    900: "#3e2723",
    A100: "#d7ccc8",
    A200: "#bcaaa4",
    A400: "#8d6e63",
    A700: "#5d4037"
  };
  const brown_default = brown;

  // node_modules/@material-ui/core/esm/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#d5d5d5",
    A200: "#aaaaaa",
    A400: "#303030",
    A700: "#616161"
  };
  const grey_default = grey;

  // node_modules/@material-ui/core/esm/colors/blueGrey.js
  var blueGrey = {
    50: "#eceff1",
    100: "#cfd8dc",
    200: "#b0bec5",
    300: "#90a4ae",
    400: "#78909c",
    500: "#607d8b",
    600: "#546e7a",
    700: "#455a64",
    800: "#37474f",
    900: "#263238",
    A100: "#cfd8dc",
    A200: "#b0bec5",
    A400: "#78909c",
    A700: "#455a64"
  };
  const blueGrey_default = blueGrey;

  // node_modules/@material-ui/core/esm/colors/index.js
  const colors_exports = {};
  __export(colors_exports, {
    amber: () => amber_default,
    blue: () => blue_default,
    blueGrey: () => blueGrey_default,
    brown: () => brown_default,
    common: () => common_default,
    cyan: () => cyan_default,
    deepOrange: () => deepOrange_default,
    deepPurple: () => deepPurple_default,
    green: () => green_default,
    grey: () => grey_default,
    indigo: () => indigo_default,
    lightBlue: () => lightBlue_default,
    lightGreen: () => lightGreen_default,
    lime: () => lime_default,
    orange: () => orange_default,
    pink: () => pink_default,
    purple: () => purple_default,
    red: () => red_default,
    teal: () => teal_default,
    yellow: () => yellow_default
  });

  // node_modules/@material-ui/utils/esm/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return function() {
        return null;
      };
    }
    return function validate() {
      return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
    };
  }

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key3 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key3)) {
            target[key3] = source[key3];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }

  // node_modules/@material-ui/utils/esm/deepmerge.js
  function isPlainObject(item) {
    return item && _typeof(item) === "object" && item.constructor === Object;
  }
  function deepmerge(target, source) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      clone: true
    };
    var output = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach(function(key3) {
        if (key3 === "__proto__") {
          return;
        }
        if (isPlainObject(source[key3]) && key3 in target) {
          output[key3] = deepmerge(target[key3], source[key3], options);
        } else {
          output[key3] = source[key3];
        }
      });
    }
    return output;
  }

  // node_modules/@material-ui/utils/esm/elementAcceptingRef.js
  const prop_types142 = __toModule(require_prop_types());
  function isClassComponent(elementType2) {
    var _elementType$prototyp = elementType2.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    var element = props[propName];
    var safePropName = propFullName || propName;
    if (element == null) {
      return null;
    }
    var warningHint;
    var elementType2 = element.type;
    if (typeof elementType2 === "function" && !isClassComponent(elementType2)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + "For more information see https://material-ui.com/r/caveat-with-refs-guide");
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(prop_types142.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(prop_types142.default.element.isRequired, acceptingRef);
  const elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@material-ui/utils/esm/elementTypeAcceptingRef.js
  const PropTypes143 = __toModule(require_prop_types());
  function isClassComponent2(elementType2) {
    var _elementType$prototyp = elementType2.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    var warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + "For more information see https://material-ui.com/r/caveat-with-refs-guide");
    }
    return null;
  }
  const elementTypeAcceptingRef_default = chainPropTypes(PropTypes143.elementType, elementTypeAcceptingRef);

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key3, value) {
    if (key3 in obj) {
      Object.defineProperty(obj, key3, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key3] = value;
    }
    return obj;
  }

  // node_modules/@material-ui/utils/esm/exactProp.js
  var specialProperty = "exact-prop: ​";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, _defineProperty({}, specialProperty, function(props) {
      var unsupportedProps = Object.keys(props).filter(function(prop) {
        return !propTypes.hasOwnProperty(prop);
      });
      if (unsupportedProps.length > 0) {
        return new Error("The following props are not supported: ".concat(unsupportedProps.map(function(prop) {
          return "`".concat(prop, "`");
        }).join(", "), ". Please remove them."));
      }
      return null;
    }));
  }

  // node_modules/@material-ui/utils/esm/formatMuiErrorMessage.js
  function formatMuiErrorMessage(code) {
    var url = "https://material-ui.com/production-error/?code=" + code;
    for (var i = 1; i < arguments.length; i += 1) {
      url += "&args[]=" + encodeURIComponent(arguments[i]);
    }
    return "Minified Material-UI error #" + code + "; visit " + url + " for the full message.";
  }

  // node_modules/@material-ui/utils/esm/getDisplayName.js
  const react_is12 = __toModule(require_react_is());
  var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    var match = "".concat(fn).match(fnNameMatchRegex);
    var name = match && match[1];
    return name || "";
  }
  function getFunctionComponentName(Component7) {
    var fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return Component7.displayName || Component7.name || getFunctionName(Component7) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    var functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
  }
  function getDisplayName(Component7) {
    if (Component7 == null) {
      return void 0;
    }
    if (typeof Component7 === "string") {
      return Component7;
    }
    if (typeof Component7 === "function") {
      return getFunctionComponentName(Component7, "Component");
    }
    if (_typeof(Component7) === "object") {
      switch (Component7.$$typeof) {
        case react_is12.ForwardRef:
          return getWrappedName(Component7, Component7.render, "ForwardRef");
        case react_is12.Memo:
          return getWrappedName(Component7, Component7.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }

  // node_modules/@material-ui/utils/esm/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    var propValue = props[propName];
    var safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
    }
    return null;
  }

  // node_modules/@material-ui/utils/esm/refType.js
  const prop_types143 = __toModule(require_prop_types());
  var refType2 = prop_types143.default.oneOfType([prop_types143.default.func, prop_types143.default.object]);
  const refType_default = refType2;

  // node_modules/@material-ui/core/esm/styles/colorManipulator.js
  function clamp2(value) {
    var min = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    if (true) {
      if (value < min || value > max) {
        console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
      }
    }
    return Math.min(Math.max(min, value), max);
  }
  function hexToRgb(color2) {
    color2 = color2.substr(1);
    var re = new RegExp(".{1,".concat(color2.length >= 6 ? 2 : 1, "}"), "g");
    var colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map(function(n) {
        return n + n;
      });
    }
    return colors ? "rgb".concat(colors.length === 4 ? "a" : "", "(").concat(colors.map(function(n, index3) {
      return index3 < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", "), ")") : "";
  }
  function intToHex(int) {
    var hex = int.toString(16);
    return hex.length === 1 ? "0".concat(hex) : hex;
  }
  function rgbToHex(color2) {
    if (color2.indexOf("#") === 0) {
      return color2;
    }
    var _decomposeColor = decomposeColor(color2), values3 = _decomposeColor.values;
    return "#".concat(values3.map(function(n) {
      return intToHex(n);
    }).join(""));
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    var _color = color2, values3 = _color.values;
    var h = values3[0];
    var s = values3[1] / 100;
    var l = values3[2] / 100;
    var a = s * Math.min(l, 1 - l);
    var f = function f2(n) {
      var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + h / 30) % 12;
      return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    };
    var type = "rgb";
    var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values3[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    var marker = color2.indexOf("(");
    var type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla"].indexOf(type) === -1) {
      throw new Error("Material-UI: Unsupported `".concat(color2, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."));
    }
    var values3 = color2.substring(marker + 1, color2.length - 1).split(",");
    values3 = values3.map(function(value) {
      return parseFloat(value);
    });
    return {
      type,
      values: values3
    };
  }
  function recomposeColor(color2) {
    var type = color2.type;
    var values3 = color2.values;
    if (type.indexOf("rgb") !== -1) {
      values3 = values3.map(function(n, i) {
        return i < 3 ? parseInt(n, 10) : n;
      });
    } else if (type.indexOf("hsl") !== -1) {
      values3[1] = "".concat(values3[1], "%");
      values3[2] = "".concat(values3[2], "%");
    }
    return "".concat(type, "(").concat(values3.join(", "), ")");
  }
  function getContrastRatio(foreground, background) {
    var lumA = getLuminance(foreground);
    var lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    var rgb = color2.type === "hsl" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map(function(val) {
      val /= 255;
      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function emphasize(color2) {
    var coefficient = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.15;
    return getLuminance(color2) > 0.5 ? darken(color2, coefficient) : lighten(color2, coefficient);
  }
  function fade(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp2(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    color2.values[3] = value;
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp2(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp2(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key3, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key3 = sourceKeys[i];
      if (excluded.indexOf(key3) >= 0)
        continue;
      target[key3] = source[key3];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key3, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key3 = sourceSymbolKeys[i];
        if (excluded.indexOf(key3) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key3))
          continue;
        target[key3] = source[key3];
      }
    }
    return target;
  }

  // node_modules/@material-ui/core/esm/styles/createBreakpoints.js
  var keys = ["xs", "sm", "md", "lg", "xl"];
  function createBreakpoints(breakpoints5) {
    var _breakpoints$values = breakpoints5.values, values3 = _breakpoints$values === void 0 ? {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920
    } : _breakpoints$values, _breakpoints$unit = breakpoints5.unit, unit = _breakpoints$unit === void 0 ? "px" : _breakpoints$unit, _breakpoints$step = breakpoints5.step, step = _breakpoints$step === void 0 ? 5 : _breakpoints$step, other = _objectWithoutProperties(breakpoints5, ["values", "unit", "step"]);
    function up(key3) {
      var value = typeof values3[key3] === "number" ? values3[key3] : key3;
      return "@media (min-width:".concat(value).concat(unit, ")");
    }
    function down(key3) {
      var endIndex = keys.indexOf(key3) + 1;
      var upperbound = values3[keys[endIndex]];
      if (endIndex === keys.length) {
        return up("xs");
      }
      var value = typeof upperbound === "number" && endIndex > 0 ? upperbound : key3;
      return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
    }
    function between(start, end) {
      var endIndex = keys.indexOf(end);
      if (endIndex === keys.length - 1) {
        return up(start);
      }
      return "@media (min-width:".concat(typeof values3[start] === "number" ? values3[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values3[keys[endIndex + 1]] === "number" ? values3[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
    }
    function only(key3) {
      return between(key3, key3);
    }
    function width2(key3) {
      return values3[key3];
    }
    return _extends({
      keys,
      values: values3,
      up,
      down,
      between,
      only,
      width: width2
    }, other);
  }

  // node_modules/@material-ui/core/esm/styles/createMixins.js
  function createMixins(breakpoints5, spacing3, mixins) {
    var _toolbar;
    return _extends({
      gutters: function gutters() {
        var styles131 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return _extends({
          paddingLeft: spacing3(2),
          paddingRight: spacing3(2)
        }, styles131, _defineProperty({}, breakpoints5.up("sm"), _extends({
          paddingLeft: spacing3(3),
          paddingRight: spacing3(3)
        }, styles131[breakpoints5.up("sm")])));
      },
      toolbar: (_toolbar = {
        minHeight: 56
      }, _defineProperty(_toolbar, "".concat(breakpoints5.up("xs"), " and (orientation: landscape)"), {
        minHeight: 48
      }), _defineProperty(_toolbar, breakpoints5.up("sm"), {
        minHeight: 64
      }), _toolbar)
    }, mixins);
  }

  // node_modules/@material-ui/core/esm/styles/createPalette.js
  var light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.54)",
      disabled: "rgba(0, 0, 0, 0.38)",
      hint: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: grey_default[50]
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      hint: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: grey_default[800],
      default: "#303030"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    var tonalOffsetLight = tonalOffset.light || tonalOffset;
    var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function createPalette2(palette3) {
    var _palette$primary = palette3.primary, primary = _palette$primary === void 0 ? {
      light: indigo_default[300],
      main: indigo_default[500],
      dark: indigo_default[700]
    } : _palette$primary, _palette$secondary = palette3.secondary, secondary = _palette$secondary === void 0 ? {
      light: pink_default.A200,
      main: pink_default.A400,
      dark: pink_default.A700
    } : _palette$secondary, _palette$error = palette3.error, error = _palette$error === void 0 ? {
      light: red_default[300],
      main: red_default[500],
      dark: red_default[700]
    } : _palette$error, _palette$warning = palette3.warning, warning2 = _palette$warning === void 0 ? {
      light: orange_default[300],
      main: orange_default[500],
      dark: orange_default[700]
    } : _palette$warning, _palette$info = palette3.info, info = _palette$info === void 0 ? {
      light: blue_default[300],
      main: blue_default[500],
      dark: blue_default[700]
    } : _palette$info, _palette$success = palette3.success, success = _palette$success === void 0 ? {
      light: green_default[300],
      main: green_default[500],
      dark: green_default[700]
    } : _palette$success, _palette$type = palette3.type, type = _palette$type === void 0 ? "light" : _palette$type, _palette$contrastThre = palette3.contrastThreshold, contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre, _palette$tonalOffset = palette3.tonalOffset, tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset, other = _objectWithoutProperties(palette3, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]);
    function getContrastText(background) {
      var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        var contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    var augmentColor = function augmentColor2(color2) {
      var mainShade = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;
      var lightShade = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
      var darkShade = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 700;
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.main) {
        throw new Error("Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property."));
      }
      if (typeof color2.main !== "string") {
        throw new Error("Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color2.main), '` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from "@material-ui/core/colors";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });'));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    var types = {
      dark,
      light
    };
    if (true) {
      if (!types[type]) {
        console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
      }
    }
    var paletteOutput = deepmerge(_extends({
      common: common_default,
      type,
      primary: augmentColor(primary),
      secondary: augmentColor(secondary, "A400", "A200", "A700"),
      error: augmentColor(error),
      warning: augmentColor(warning2),
      info: augmentColor(info),
      success: augmentColor(success),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, types[type]), other);
    return paletteOutput;
  }

  // node_modules/@material-ui/core/esm/styles/createTypography.js
  function round2(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography2(palette3, typography3) {
    var _ref6 = typeof typography3 === "function" ? typography3(palette3) : typography3, _ref$fontFamily = _ref6.fontFamily, fontFamily2 = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily, _ref$fontSize = _ref6.fontSize, fontSize2 = _ref$fontSize === void 0 ? 14 : _ref$fontSize, _ref$fontWeightLight = _ref6.fontWeightLight, fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight, _ref$fontWeightRegula = _ref6.fontWeightRegular, fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula, _ref$fontWeightMedium = _ref6.fontWeightMedium, fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium, _ref$fontWeightBold = _ref6.fontWeightBold, fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold, _ref$htmlFontSize = _ref6.htmlFontSize, htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize, allVariants = _ref6.allVariants, pxToRem2 = _ref6.pxToRem, other = _objectWithoutProperties(_ref6, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);
    if (true) {
      if (typeof fontSize2 !== "number") {
        console.error("Material-UI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("Material-UI: `htmlFontSize` is required to be a number.");
      }
    }
    var coef = fontSize2 / 14;
    var pxToRem = pxToRem2 || function(size) {
      return "".concat(size / htmlFontSize * coef, "rem");
    };
    var buildVariant = function buildVariant2(fontWeight2, size, lineHeight2, letterSpacing2, casing) {
      return _extends({
        fontFamily: fontFamily2,
        fontWeight: fontWeight2,
        fontSize: pxToRem(size),
        lineHeight: lineHeight2
      }, fontFamily2 === defaultFontFamily ? {
        letterSpacing: "".concat(round2(letterSpacing2 / size), "em")
      } : {}, casing, allVariants);
    };
    var variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      round: round2,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@material-ui/core/esm/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow() {
    return ["".concat(arguments.length <= 0 ? void 0 : arguments[0], "px ").concat(arguments.length <= 1 ? void 0 : arguments[1], "px ").concat(arguments.length <= 2 ? void 0 : arguments[2], "px ").concat(arguments.length <= 3 ? void 0 : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? void 0 : arguments[4], "px ").concat(arguments.length <= 5 ? void 0 : arguments[5], "px ").concat(arguments.length <= 6 ? void 0 : arguments[6], "px ").concat(arguments.length <= 7 ? void 0 : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? void 0 : arguments[8], "px ").concat(arguments.length <= 9 ? void 0 : arguments[9], "px ").concat(arguments.length <= 10 ? void 0 : arguments[10], "px ").concat(arguments.length <= 11 ? void 0 : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(",");
  }
  var shadows2 = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  const shadows_default2 = shadows2;

  // node_modules/@material-ui/core/esm/styles/shape.js
  var shape2 = {
    borderRadius: 4
  };
  const shape_default = shape2;

  // node_modules/@material-ui/system/esm/responsivePropType.js
  const prop_types141 = __toModule(require_prop_types());
  var responsivePropType = prop_types141.default.oneOfType([prop_types141.default.number, prop_types141.default.string, prop_types141.default.object, prop_types141.default.array]);
  const responsivePropType_default = responsivePropType;

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/@material-ui/system/esm/merge.js
  function merge4(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
    });
  }
  const merge_default = merge4;

  // node_modules/@material-ui/system/esm/breakpoints.js
  const prop_types139 = __toModule(require_prop_types());
  var values = {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920
  };
  var defaultBreakpoints = {
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: function up(key3) {
      return "@media (min-width:".concat(values[key3], "px)");
    }
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    if (true) {
      if (!props.theme) {
        console.error("Material-UI: You are calling a style function without a theme value.");
      }
    }
    if (Array.isArray(propValue)) {
      var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
      return propValue.reduce(function(acc, item, index3) {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index3])] = styleFromPropValue(propValue[index3]);
        return acc;
      }, {});
    }
    if (_typeof(propValue) === "object") {
      var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce(function(acc, breakpoint) {
        acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
        return acc;
      }, {});
    }
    var output = styleFromPropValue(propValue);
    return output;
  }

  // node_modules/@material-ui/system/esm/style.js
  function getPath(obj, path) {
    if (!path || typeof path !== "string") {
      return null;
    }
    return path.split(".").reduce(function(acc, item) {
      return acc && acc[item] ? acc[item] : null;
    }, obj);
  }
  function style10(options) {
    var prop = options.prop, _options$cssProperty = options.cssProperty, cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty, themeKey = options.themeKey, transform3 = options.transform;
    var fn = function fn2(props) {
      if (props[prop] == null) {
        return null;
      }
      var propValue = props[prop];
      var theme = props.theme;
      var themeMapping = getPath(theme, themeKey) || {};
      var styleFromPropValue = function styleFromPropValue2(propValueFinal) {
        var value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || propValueFinal;
        } else {
          value = getPath(themeMapping, propValueFinal) || propValueFinal;
          if (transform3) {
            value = transform3(value);
          }
        }
        if (cssProperty === false) {
          return value;
        }
        return _defineProperty({}, cssProperty, value);
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = _defineProperty({}, prop, responsivePropType_default);
    fn.filterProps = [prop];
    return fn;
  }
  const style_default = style10;

  // node_modules/@material-ui/system/esm/compose.js
  function compose2() {
    for (var _len = arguments.length, styles131 = new Array(_len), _key = 0; _key < _len; _key++) {
      styles131[_key] = arguments[_key];
    }
    var fn = function fn2(props) {
      return styles131.reduce(function(acc, style13) {
        var output = style13(props);
        if (output) {
          return merge_default(acc, output);
        }
        return acc;
      }, {});
    };
    fn.propTypes = styles131.reduce(function(acc, style13) {
      return _extends(acc, style13.propTypes);
    }, {});
    fn.filterProps = styles131.reduce(function(acc, style13) {
      return acc.concat(style13.filterProps);
    }, []);
    return fn;
  }
  const compose_default = compose2;

  // node_modules/@material-ui/system/esm/borders.js
  function getBorder(value) {
    if (typeof value !== "number") {
      return value;
    }
    return "".concat(value, "px solid");
  }
  var border = style_default({
    prop: "border",
    themeKey: "borders",
    transform: getBorder
  });
  var borderTop = style_default({
    prop: "borderTop",
    themeKey: "borders",
    transform: getBorder
  });
  var borderRight = style_default({
    prop: "borderRight",
    themeKey: "borders",
    transform: getBorder
  });
  var borderBottom = style_default({
    prop: "borderBottom",
    themeKey: "borders",
    transform: getBorder
  });
  var borderLeft = style_default({
    prop: "borderLeft",
    themeKey: "borders",
    transform: getBorder
  });
  var borderColor = style_default({
    prop: "borderColor",
    themeKey: "palette"
  });
  var borderRadius = style_default({
    prop: "borderRadius",
    themeKey: "shape"
  });
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);
  const borders_default = borders;

  // node_modules/@material-ui/system/esm/css.js
  const prop_types140 = __toModule(require_prop_types());
  function omit2(input, fields) {
    var output = {};
    Object.keys(input).forEach(function(prop) {
      if (fields.indexOf(prop) === -1) {
        output[prop] = input[prop];
      }
    });
    return output;
  }
  function css(styleFunction2) {
    var newStyleFunction = function newStyleFunction2(props) {
      var output = styleFunction2(props);
      if (props.css) {
        return _extends(_extends({}, merge_default(output, styleFunction2(_extends({
          theme: props.theme
        }, props.css)))), omit2(props.css, [styleFunction2.filterProps]));
      }
      return output;
    };
    newStyleFunction.propTypes = _extends(_extends({}, styleFunction2.propTypes), {}, {
      css: prop_types140.default.object
    });
    newStyleFunction.filterProps = ["css"].concat(_toConsumableArray(styleFunction2.filterProps));
    return newStyleFunction;
  }
  const css_default = css;

  // node_modules/@material-ui/system/esm/display.js
  var displayPrint = style_default({
    prop: "displayPrint",
    cssProperty: false,
    transform: function transform3(value) {
      return {
        "@media print": {
          display: value
        }
      };
    }
  });
  var displayRaw = style_default({
    prop: "display"
  });
  var overflow = style_default({
    prop: "overflow"
  });
  var textOverflow = style_default({
    prop: "textOverflow"
  });
  var visibility = style_default({
    prop: "visibility"
  });
  var whiteSpace = style_default({
    prop: "whiteSpace"
  });
  const display_default = compose_default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

  // node_modules/@material-ui/system/esm/flexbox.js
  var flexBasis = style_default({
    prop: "flexBasis"
  });
  var flexDirection = style_default({
    prop: "flexDirection"
  });
  var flexWrap = style_default({
    prop: "flexWrap"
  });
  var justifyContent = style_default({
    prop: "justifyContent"
  });
  var alignItems = style_default({
    prop: "alignItems"
  });
  var alignContent = style_default({
    prop: "alignContent"
  });
  var order = style_default({
    prop: "order"
  });
  var flex = style_default({
    prop: "flex"
  });
  var flexGrow = style_default({
    prop: "flexGrow"
  });
  var flexShrink = style_default({
    prop: "flexShrink"
  });
  var alignSelf = style_default({
    prop: "alignSelf"
  });
  var justifyItems = style_default({
    prop: "justifyItems"
  });
  var justifySelf = style_default({
    prop: "justifySelf"
  });
  var flexbox = compose_default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  const flexbox_default = flexbox;

  // node_modules/@material-ui/system/esm/grid.js
  var gridGap = style_default({
    prop: "gridGap"
  });
  var gridColumnGap = style_default({
    prop: "gridColumnGap"
  });
  var gridRowGap = style_default({
    prop: "gridRowGap"
  });
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  const grid_default = grid;

  // node_modules/@material-ui/system/esm/palette.js
  var color = style_default({
    prop: "color",
    themeKey: "palette"
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette"
  });
  var palette2 = compose_default(color, bgcolor);
  const palette_default = palette2;

  // node_modules/@material-ui/system/esm/positions.js
  var position = style_default({
    prop: "position"
  });
  var zIndex4 = style_default({
    prop: "zIndex",
    themeKey: "zIndex"
  });
  var top = style_default({
    prop: "top"
  });
  var right = style_default({
    prop: "right"
  });
  var bottom = style_default({
    prop: "bottom"
  });
  var left = style_default({
    prop: "left"
  });
  const positions_default = compose_default(position, zIndex4, top, right, bottom, left);

  // node_modules/@material-ui/system/esm/shadows.js
  var boxShadow = style_default({
    prop: "boxShadow",
    themeKey: "shadows"
  });
  const shadows_default = boxShadow;

  // node_modules/@material-ui/system/esm/sizing.js
  function transform(value) {
    return value <= 1 ? "".concat(value * 100, "%") : value;
  }
  var width = style_default({
    prop: "width",
    transform
  });
  var maxWidth = style_default({
    prop: "maxWidth",
    transform
  });
  var minWidth = style_default({
    prop: "minWidth",
    transform
  });
  var height = style_default({
    prop: "height",
    transform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing2 = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  const sizing_default = sizing2;

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  // node_modules/@material-ui/system/esm/memoize.js
  function memoize(fn) {
    var cache4 = {};
    return function(arg) {
      if (cache4[arg] === void 0) {
        cache4[arg] = fn(arg);
      }
      return cache4[arg];
    };
  }

  // node_modules/@material-ui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize(function(prop) {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    var _prop$split = prop.split(""), _prop$split2 = _slicedToArray(_prop$split, 2), a = _prop$split2[0], b = _prop$split2[1];
    var property = properties[a];
    var direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map(function(dir) {
      return property + dir;
    }) : [property + direction];
  });
  var spacingKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "p", "pt", "pr", "pb", "pl", "px", "py", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY"];
  function createUnarySpacing(theme) {
    var themeSpacing = theme.spacing || 8;
    if (typeof themeSpacing === "number") {
      return function(abs) {
        if (true) {
          if (typeof abs !== "number") {
            console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
          }
        }
        return themeSpacing * abs;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return function(abs) {
        if (true) {
          if (abs > themeSpacing.length - 1) {
            console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join("\n"));
          }
        }
        return themeSpacing[abs];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), "It should be a number, an array or a function."].join("\n"));
    }
    return function() {
      return void 0;
    };
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string") {
      return propValue;
    }
    var abs = Math.abs(propValue);
    var transformed = transformer(abs);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return "-".concat(transformed);
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return function(propValue) {
      return cssProperties.reduce(function(acc, cssProperty) {
        acc[cssProperty] = getValue(transformer, propValue);
        return acc;
      }, {});
    };
  }
  function spacing2(props) {
    var theme = props.theme;
    var transformer = createUnarySpacing(theme);
    return Object.keys(props).map(function(prop) {
      if (spacingKeys.indexOf(prop) === -1) {
        return null;
      }
      var cssProperties = getCssProperties(prop);
      var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      var propValue = props[prop];
      return handleBreakpoints(props, propValue, styleFromPropValue);
    }).reduce(merge_default, {});
  }
  spacing2.propTypes = spacingKeys.reduce(function(obj, key3) {
    obj[key3] = responsivePropType_default;
    return obj;
  }, {});
  spacing2.filterProps = spacingKeys;
  const spacing_default = spacing2;

  // node_modules/@material-ui/system/esm/typography.js
  var fontFamily = style_default({
    prop: "fontFamily",
    themeKey: "typography"
  });
  var fontSize = style_default({
    prop: "fontSize",
    themeKey: "typography"
  });
  var fontStyle = style_default({
    prop: "fontStyle",
    themeKey: "typography"
  });
  var fontWeight = style_default({
    prop: "fontWeight",
    themeKey: "typography"
  });
  var letterSpacing = style_default({
    prop: "letterSpacing"
  });
  var lineHeight = style_default({
    prop: "lineHeight"
  });
  var textAlign = style_default({
    prop: "textAlign"
  });
  var typography2 = compose_default(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
  const typography_default = typography2;

  // node_modules/@material-ui/core/esm/styles/createSpacing.js
  var warnOnce;
  function createSpacing2() {
    var spacingInput = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
    if (spacingInput.mui) {
      return spacingInput;
    }
    var transform3 = createUnarySpacing({
      spacing: spacingInput
    });
    var spacing3 = function spacing4() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (true) {
        if (!(args.length <= 4)) {
          console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
        }
      }
      if (args.length === 0) {
        return transform3(1);
      }
      if (args.length === 1) {
        return transform3(args[0]);
      }
      return args.map(function(argument) {
        if (typeof argument === "string") {
          return argument;
        }
        var output = transform3(argument);
        return typeof output === "number" ? "".concat(output, "px") : output;
      }).join(" ");
    };
    Object.defineProperty(spacing3, "unit", {
      get: function get() {
        if (true) {
          if (!warnOnce || false) {
            console.error(["Material-UI: theme.spacing.unit usage has been deprecated.", "It will be removed in v5.", "You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.", "", "You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother."].join("\n"));
          }
          warnOnce = true;
        }
        return spacingInput;
      }
    });
    spacing3.mui = true;
    return spacing3;
  }

  // node_modules/@material-ui/core/esm/styles/transitions.js
  var easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return "".concat(Math.round(milliseconds), "ms");
  }
  const transitions_default = {
    easing,
    duration,
    create: function create2() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["all"];
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _options$duration = options.duration, durationOption = _options$duration === void 0 ? duration.standard : _options$duration, _options$easing = options.easing, easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing, _options$delay = options.delay, delay = _options$delay === void 0 ? 0 : _options$delay, other = _objectWithoutProperties(options, ["duration", "easing", "delay"]);
      if (true) {
        var isString = function isString2(value) {
          return typeof value === "string";
        };
        var isNumber = function isNumber2(value) {
          return !isNaN(parseFloat(value));
        };
        if (!isString(props) && !Array.isArray(props)) {
          console.error('Material-UI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error('Material-UI: Argument "duration" must be a number or a string but found '.concat(durationOption, "."));
        }
        if (!isString(easingOption)) {
          console.error('Material-UI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString(delay)) {
          console.error('Material-UI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(","), "]."));
        }
      }
      return (Array.isArray(props) ? props : [props]).map(function(animatedProp) {
        return "".concat(animatedProp, " ").concat(typeof durationOption === "string" ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === "string" ? delay : formatMs(delay));
      }).join(",");
    },
    getAutoHeightDuration: function getAutoHeightDuration(height2) {
      if (!height2) {
        return 0;
      }
      var constant = height2 / 36;
      return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
    }
  };

  // node_modules/@material-ui/core/esm/styles/zIndex.js
  var zIndex3 = {
    mobileStepper: 1e3,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  const zIndex_default = zIndex3;

  // node_modules/@material-ui/core/esm/styles/createMuiTheme.js
  function createMuiTheme2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _options$breakpoints = options.breakpoints, breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints, _options$mixins = options.mixins, mixinsInput = _options$mixins === void 0 ? {} : _options$mixins, _options$palette = options.palette, paletteInput = _options$palette === void 0 ? {} : _options$palette, spacingInput = options.spacing, _options$typography = options.typography, typographyInput = _options$typography === void 0 ? {} : _options$typography, other = _objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);
    var palette3 = createPalette2(paletteInput);
    var breakpoints5 = createBreakpoints(breakpointsInput);
    var spacing3 = createSpacing2(spacingInput);
    var muiTheme = deepmerge({
      breakpoints: breakpoints5,
      direction: "ltr",
      mixins: createMixins(breakpoints5, spacing3, mixinsInput),
      overrides: {},
      palette: palette3,
      props: {},
      shadows: shadows_default2,
      typography: createTypography2(palette3, typographyInput),
      spacing: spacing3,
      shape: shape_default,
      transitions: transitions_default,
      zIndex: zIndex_default
    }, other);
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    muiTheme = args.reduce(function(acc, argument) {
      return deepmerge(acc, argument);
    }, muiTheme);
    if (true) {
      var pseudoClasses2 = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
      var traverse = function traverse2(node, parentKey) {
        var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        var key3;
        for (key3 in node) {
          var child = node[key3];
          if (depth === 1) {
            if (key3.indexOf("Mui") === 0 && child) {
              traverse2(child, key3, depth + 1);
            }
          } else if (pseudoClasses2.indexOf(key3) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key3, "` internal state."), "You can not override it like this: ", JSON.stringify(node, null, 2), "", "Instead, you need to use the $ruleName syntax:", JSON.stringify({
                root: _defineProperty({}, "&$".concat(key3), child)
              }, null, 2), "", "https://material-ui.com/r/pseudo-classes-guide"].join("\n"));
            }
            node[key3] = {};
          }
        }
      };
      traverse(muiTheme.overrides);
    }
    return muiTheme;
  }
  const createMuiTheme_default = createMuiTheme2;

  // node_modules/@material-ui/core/esm/styles/createMuiStrictModeTheme.js
  function createMuiStrictModeTheme(options) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return createMuiTheme_default.apply(void 0, [deepmerge({
      unstable_strictMode: true
    }, options)].concat(args));
  }

  // node_modules/@material-ui/styles/esm/ThemeProvider/nested.js
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  const nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

  // node_modules/@material-ui/styles/esm/createGenerateClassName/createGenerateClassName.js
  var pseudoClasses = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
  function createGenerateClassName() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _options$disableGloba = options.disableGlobal, disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba, _options$productionPr = options.productionPrefix, productionPrefix = _options$productionPr === void 0 ? "jss" : _options$productionPr, _options$seed = options.seed, seed = _options$seed === void 0 ? "" : _options$seed;
    var seedPrefix = seed === "" ? "" : "".concat(seed, "-");
    var ruleCounter = 0;
    var getNextCounterId = function getNextCounterId2() {
      ruleCounter += 1;
      if (true) {
        if (ruleCounter >= 1e10) {
          console.warn(["Material-UI: You might have a memory leak.", "The ruleCounter is not supposed to grow that much."].join(""));
        }
      }
      return ruleCounter;
    };
    return function(rule, styleSheet) {
      var name = styleSheet.options.name;
      if (name && name.indexOf("Mui") === 0 && !styleSheet.options.link && !disableGlobal) {
        if (pseudoClasses.indexOf(rule.key) !== -1) {
          return "Mui-".concat(rule.key);
        }
        var prefix3 = "".concat(seedPrefix).concat(name, "-").concat(rule.key);
        if (!styleSheet.options.theme[nested_default] || seed !== "") {
          return prefix3;
        }
        return "".concat(prefix3, "-").concat(getNextCounterId());
      }
      if (false) {
        return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
      }
      var suffix = "".concat(rule.key, "-").concat(getNextCounterId());
      if (styleSheet.options.classNamePrefix) {
        return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
      }
      return "".concat(seedPrefix).concat(suffix);
    };
  }

  // node_modules/@material-ui/styles/esm/createStyles/createStyles.js
  function createStyles(styles131) {
    return styles131;
  }

  // node_modules/@material-ui/styles/esm/getThemeProps/getThemeProps.js
  function getThemeProps(params) {
    var theme = params.theme, name = params.name, props = params.props;
    if (!theme || !theme.props || !theme.props[name]) {
      return props;
    }
    var defaultProps2 = theme.props[name];
    var propName;
    for (propName in defaultProps2) {
      if (props[propName] === void 0) {
        props[propName] = defaultProps2[propName];
      }
    }
    return props;
  }

  // node_modules/tiny-warning/dist/tiny-warning.esm.js
  var isProduction2 = false;
  function warning(condition, message) {
    if (!isProduction2) {
      if (condition) {
        return;
      }
      var text = "Warning: " + message;
      if (typeof console !== "undefined") {
        console.warn(text);
      }
      try {
        throw Error(text);
      } catch (x) {
      }
    }
  }
  const tiny_warning_esm_default = warning;

  // node_modules/is-in-browser/dist/module.js
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof2(document)) === "object" && document.nodeType === 9;
  const module_default = isBrowser;

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/jss/dist/jss.esm.js
  var plainObjectConstrurctor = {}.constructor;
  function cloneStyle(style13) {
    if (style13 == null || typeof style13 !== "object")
      return style13;
    if (Array.isArray(style13))
      return style13.map(cloneStyle);
    if (style13.constructor !== plainObjectConstrurctor)
      return style13;
    var newStyle = {};
    for (var name in style13) {
      newStyle[name] = cloneStyle(style13[name]);
    }
    return newStyle;
  }
  function createRule(name, decl, options) {
    if (name === void 0) {
      name = "unnamed";
    }
    var jss9 = options.jss;
    var declCopy = cloneStyle(decl);
    var rule = jss9.plugins.onCreateRule(name, declCopy, options);
    if (rule)
      return rule;
    if (name[0] === "@") {
      tiny_warning_esm_default(false, "[JSS] Unknown rule " + name);
    }
    return null;
  }
  var join = function join2(value, by) {
    var result = "";
    for (var i = 0; i < value.length; i++) {
      if (value[i] === "!important")
        break;
      if (result)
        result += by;
      result += value[i];
    }
    return result;
  };
  function toCssValue(value, ignoreImportant) {
    if (ignoreImportant === void 0) {
      ignoreImportant = false;
    }
    if (!Array.isArray(value))
      return value;
    var cssValue = "";
    if (Array.isArray(value[0])) {
      for (var i = 0; i < value.length; i++) {
        if (value[i] === "!important")
          break;
        if (cssValue)
          cssValue += ", ";
        cssValue += join(value[i], " ");
      }
    } else
      cssValue = join(value, ", ");
    if (!ignoreImportant && value[value.length - 1] === "!important") {
      cssValue += " !important";
    }
    return cssValue;
  }
  function indentStr(str, indent) {
    var result = "";
    for (var index3 = 0; index3 < indent; index3++) {
      result += "  ";
    }
    return result + str;
  }
  function toCss(selector, style13, options) {
    if (options === void 0) {
      options = {};
    }
    var result = "";
    if (!style13)
      return result;
    var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;
    var fallbacks = style13.fallbacks;
    if (selector)
      indent++;
    if (fallbacks) {
      if (Array.isArray(fallbacks)) {
        for (var index3 = 0; index3 < fallbacks.length; index3++) {
          var fallback = fallbacks[index3];
          for (var prop in fallback) {
            var value = fallback[prop];
            if (value != null) {
              if (result)
                result += "\n";
              result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
            }
          }
        }
      } else {
        for (var _prop in fallbacks) {
          var _value = fallbacks[_prop];
          if (_value != null) {
            if (result)
              result += "\n";
            result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
          }
        }
      }
    }
    for (var _prop2 in style13) {
      var _value2 = style13[_prop2];
      if (_value2 != null && _prop2 !== "fallbacks") {
        if (result)
          result += "\n";
        result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
      }
    }
    if (!result && !options.allowEmpty)
      return result;
    if (!selector)
      return result;
    indent--;
    if (result)
      result = "\n" + result + "\n";
    return indentStr(selector + " {" + result, indent) + indentStr("}", indent);
  }
  var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
  var nativeEscape = typeof CSS !== "undefined" && CSS.escape;
  var escape = function(str) {
    return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, "\\$1");
  };
  var BaseStyleRule = function() {
    function BaseStyleRule2(key3, style13, options) {
      this.type = "style";
      this.key = void 0;
      this.isProcessed = false;
      this.style = void 0;
      this.renderer = void 0;
      this.renderable = void 0;
      this.options = void 0;
      var sheet = options.sheet, Renderer = options.Renderer;
      this.key = key3;
      this.options = options;
      this.style = style13;
      if (sheet)
        this.renderer = sheet.renderer;
      else if (Renderer)
        this.renderer = new Renderer();
    }
    var _proto = BaseStyleRule2.prototype;
    _proto.prop = function prop(name, value, options) {
      if (value === void 0)
        return this.style[name];
      var force = options ? options.force : false;
      if (!force && this.style[name] === value)
        return this;
      var newValue = value;
      if (!options || options.process !== false) {
        newValue = this.options.jss.plugins.onChangeValue(value, name, this);
      }
      var isEmpty2 = newValue == null || newValue === false;
      var isDefined = name in this.style;
      if (isEmpty2 && !isDefined && !force)
        return this;
      var remove = isEmpty2 && isDefined;
      if (remove)
        delete this.style[name];
      else
        this.style[name] = newValue;
      if (this.renderable && this.renderer) {
        if (remove)
          this.renderer.removeProperty(this.renderable, name);
        else
          this.renderer.setProperty(this.renderable, name, newValue);
        return this;
      }
      var sheet = this.options.sheet;
      if (sheet && sheet.attached) {
        tiny_warning_esm_default(false, '[JSS] Rule is not linked. Missing sheet option "link: true".');
      }
      return this;
    };
    return BaseStyleRule2;
  }();
  var StyleRule = function(_BaseStyleRule) {
    _inheritsLoose(StyleRule2, _BaseStyleRule);
    function StyleRule2(key3, style13, options) {
      var _this;
      _this = _BaseStyleRule.call(this, key3, style13, options) || this;
      _this.selectorText = void 0;
      _this.id = void 0;
      _this.renderable = void 0;
      var selector = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
      if (selector) {
        _this.selectorText = selector;
      } else if (scoped !== false) {
        _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
        _this.selectorText = "." + escape(_this.id);
      }
      return _this;
    }
    var _proto2 = StyleRule2.prototype;
    _proto2.applyTo = function applyTo(renderable) {
      var renderer = this.renderer;
      if (renderer) {
        var json = this.toJSON();
        for (var prop in json) {
          renderer.setProperty(renderable, prop, json[prop]);
        }
      }
      return this;
    };
    _proto2.toJSON = function toJSON() {
      var json = {};
      for (var prop in this.style) {
        var value = this.style[prop];
        if (typeof value !== "object")
          json[prop] = value;
        else if (Array.isArray(value))
          json[prop] = toCssValue(value);
      }
      return json;
    };
    _proto2.toString = function toString(options) {
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, {
        allowEmpty: true
      }) : options;
      return toCss(this.selectorText, this.style, opts);
    };
    _createClass(StyleRule2, [{
      key: "selector",
      set: function set(selector) {
        if (selector === this.selectorText)
          return;
        this.selectorText = selector;
        var renderer = this.renderer, renderable = this.renderable;
        if (!renderable || !renderer)
          return;
        var hasChanged = renderer.setSelector(renderable, selector);
        if (!hasChanged) {
          renderer.replaceRule(renderable, this);
        }
      },
      get: function get() {
        return this.selectorText;
      }
    }]);
    return StyleRule2;
  }(BaseStyleRule);
  var pluginStyleRule = {
    onCreateRule: function onCreateRule(name, style13, options) {
      if (name[0] === "@" || options.parent && options.parent.type === "keyframes") {
        return null;
      }
      return new StyleRule(name, style13, options);
    }
  };
  var defaultToStringOptions = {
    indent: 1,
    children: true
  };
  var atRegExp = /@([\w-]+)/;
  var ConditionalRule = function() {
    function ConditionalRule2(key3, styles131, options) {
      this.type = "conditional";
      this.at = void 0;
      this.key = void 0;
      this.query = void 0;
      this.rules = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key3;
      this.query = options.name;
      var atMatch = key3.match(atRegExp);
      this.at = atMatch ? atMatch[1] : "unknown";
      this.options = options;
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var name in styles131) {
        this.rules.add(name, styles131[name]);
      }
      this.rules.process();
    }
    var _proto = ConditionalRule2.prototype;
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.addRule = function addRule(name, style13, options) {
      var rule = this.rules.add(name, style13, options);
      if (!rule)
        return null;
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.toString = function toString(options) {
      if (options === void 0) {
        options = defaultToStringOptions;
      }
      if (options.indent == null)
        options.indent = defaultToStringOptions.indent;
      if (options.children == null)
        options.children = defaultToStringOptions.children;
      if (options.children === false) {
        return this.query + " {}";
      }
      var children = this.rules.toString(options);
      return children ? this.query + " {\n" + children + "\n}" : "";
    };
    return ConditionalRule2;
  }();
  var keyRegExp = /@media|@supports\s+/;
  var pluginConditionalRule = {
    onCreateRule: function onCreateRule(key3, styles131, options) {
      return keyRegExp.test(key3) ? new ConditionalRule(key3, styles131, options) : null;
    }
  };
  var defaultToStringOptions$1 = {
    indent: 1,
    children: true
  };
  var nameRegExp = /@keyframes\s+([\w-]+)/;
  var KeyframesRule = function() {
    function KeyframesRule2(key3, frames, options) {
      this.type = "keyframes";
      this.at = "@keyframes";
      this.key = void 0;
      this.name = void 0;
      this.id = void 0;
      this.rules = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      var nameMatch = key3.match(nameRegExp);
      if (nameMatch && nameMatch[1]) {
        this.name = nameMatch[1];
      } else {
        this.name = "noname";
        tiny_warning_esm_default(false, "[JSS] Bad keyframes name " + key3);
      }
      this.key = this.type + "-" + this.name;
      this.options = options;
      var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
      this.id = scoped === false ? this.name : escape(generateId(this, sheet));
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var name in frames) {
        this.rules.add(name, frames[name], _extends({}, options, {
          parent: this
        }));
      }
      this.rules.process();
    }
    var _proto = KeyframesRule2.prototype;
    _proto.toString = function toString(options) {
      if (options === void 0) {
        options = defaultToStringOptions$1;
      }
      if (options.indent == null)
        options.indent = defaultToStringOptions$1.indent;
      if (options.children == null)
        options.children = defaultToStringOptions$1.children;
      if (options.children === false) {
        return this.at + " " + this.id + " {}";
      }
      var children = this.rules.toString(options);
      if (children)
        children = "\n" + children + "\n";
      return this.at + " " + this.id + " {" + children + "}";
    };
    return KeyframesRule2;
  }();
  var keyRegExp$1 = /@keyframes\s+/;
  var refRegExp2 = /\$([\w-]+)/g;
  var findReferencedKeyframe = function findReferencedKeyframe2(val, keyframes) {
    if (typeof val === "string") {
      return val.replace(refRegExp2, function(match, name) {
        if (name in keyframes) {
          return keyframes[name];
        }
        tiny_warning_esm_default(false, '[JSS] Referenced keyframes rule "' + name + '" is not defined.');
        return match;
      });
    }
    return val;
  };
  var replaceRef = function replaceRef2(style13, prop, keyframes) {
    var value = style13[prop];
    var refKeyframe = findReferencedKeyframe(value, keyframes);
    if (refKeyframe !== value) {
      style13[prop] = refKeyframe;
    }
  };
  var plugin = {
    onCreateRule: function onCreateRule(key3, frames, options) {
      return typeof key3 === "string" && keyRegExp$1.test(key3) ? new KeyframesRule(key3, frames, options) : null;
    },
    onProcessStyle: function onProcessStyle(style13, rule, sheet) {
      if (rule.type !== "style" || !sheet)
        return style13;
      if ("animation-name" in style13)
        replaceRef(style13, "animation-name", sheet.keyframes);
      if ("animation" in style13)
        replaceRef(style13, "animation", sheet.keyframes);
      return style13;
    },
    onChangeValue: function onChangeValue(val, prop, rule) {
      var sheet = rule.options.sheet;
      if (!sheet) {
        return val;
      }
      switch (prop) {
        case "animation":
          return findReferencedKeyframe(val, sheet.keyframes);
        case "animation-name":
          return findReferencedKeyframe(val, sheet.keyframes);
        default:
          return val;
      }
    }
  };
  var KeyframeRule = function(_BaseStyleRule) {
    _inheritsLoose(KeyframeRule2, _BaseStyleRule);
    function KeyframeRule2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
      _this.renderable = void 0;
      return _this;
    }
    var _proto = KeyframeRule2.prototype;
    _proto.toString = function toString(options) {
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, {
        allowEmpty: true
      }) : options;
      return toCss(this.key, this.style, opts);
    };
    return KeyframeRule2;
  }(BaseStyleRule);
  var pluginKeyframeRule = {
    onCreateRule: function onCreateRule(key3, style13, options) {
      if (options.parent && options.parent.type === "keyframes") {
        return new KeyframeRule(key3, style13, options);
      }
      return null;
    }
  };
  var FontFaceRule = function() {
    function FontFaceRule2(key3, style13, options) {
      this.type = "font-face";
      this.at = "@font-face";
      this.key = void 0;
      this.style = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key3;
      this.style = style13;
      this.options = options;
    }
    var _proto = FontFaceRule2.prototype;
    _proto.toString = function toString(options) {
      if (Array.isArray(this.style)) {
        var str = "";
        for (var index3 = 0; index3 < this.style.length; index3++) {
          str += toCss(this.at, this.style[index3]);
          if (this.style[index3 + 1])
            str += "\n";
        }
        return str;
      }
      return toCss(this.at, this.style, options);
    };
    return FontFaceRule2;
  }();
  var keyRegExp$2 = /@font-face/;
  var pluginFontFaceRule = {
    onCreateRule: function onCreateRule(key3, style13, options) {
      return keyRegExp$2.test(key3) ? new FontFaceRule(key3, style13, options) : null;
    }
  };
  var ViewportRule = function() {
    function ViewportRule2(key3, style13, options) {
      this.type = "viewport";
      this.at = "@viewport";
      this.key = void 0;
      this.style = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key3;
      this.style = style13;
      this.options = options;
    }
    var _proto = ViewportRule2.prototype;
    _proto.toString = function toString(options) {
      return toCss(this.key, this.style, options);
    };
    return ViewportRule2;
  }();
  var pluginViewportRule = {
    onCreateRule: function onCreateRule(key3, style13, options) {
      return key3 === "@viewport" || key3 === "@-ms-viewport" ? new ViewportRule(key3, style13, options) : null;
    }
  };
  var SimpleRule = function() {
    function SimpleRule2(key3, value, options) {
      this.type = "simple";
      this.key = void 0;
      this.value = void 0;
      this.options = void 0;
      this.isProcessed = false;
      this.renderable = void 0;
      this.key = key3;
      this.value = value;
      this.options = options;
    }
    var _proto = SimpleRule2.prototype;
    _proto.toString = function toString(options) {
      if (Array.isArray(this.value)) {
        var str = "";
        for (var index3 = 0; index3 < this.value.length; index3++) {
          str += this.key + " " + this.value[index3] + ";";
          if (this.value[index3 + 1])
            str += "\n";
        }
        return str;
      }
      return this.key + " " + this.value + ";";
    };
    return SimpleRule2;
  }();
  var keysMap = {
    "@charset": true,
    "@import": true,
    "@namespace": true
  };
  var pluginSimpleRule = {
    onCreateRule: function onCreateRule(key3, value, options) {
      return key3 in keysMap ? new SimpleRule(key3, value, options) : null;
    }
  };
  var plugins2 = [pluginStyleRule, pluginConditionalRule, plugin, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];
  var defaultUpdateOptions = {
    process: true
  };
  var forceUpdateOptions = {
    force: true,
    process: true
  };
  var RuleList = function() {
    function RuleList2(options) {
      this.map = {};
      this.raw = {};
      this.index = [];
      this.counter = 0;
      this.options = void 0;
      this.classes = void 0;
      this.keyframes = void 0;
      this.options = options;
      this.classes = options.classes;
      this.keyframes = options.keyframes;
    }
    var _proto = RuleList2.prototype;
    _proto.add = function add(name, decl, ruleOptions) {
      var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss9 = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;
      var options = _extends({
        classes: this.classes,
        parent,
        sheet,
        jss: jss9,
        Renderer,
        generateId,
        scoped,
        name,
        keyframes: this.keyframes,
        selector: void 0
      }, ruleOptions);
      var key3 = name;
      if (name in this.raw) {
        key3 = name + "-d" + this.counter++;
      }
      this.raw[key3] = decl;
      if (key3 in this.classes) {
        options.selector = "." + escape(this.classes[key3]);
      }
      var rule = createRule(key3, decl, options);
      if (!rule)
        return null;
      this.register(rule);
      var index3 = options.index === void 0 ? this.index.length : options.index;
      this.index.splice(index3, 0, rule);
      return rule;
    };
    _proto.get = function get(name) {
      return this.map[name];
    };
    _proto.remove = function remove(rule) {
      this.unregister(rule);
      delete this.raw[rule.key];
      this.index.splice(this.index.indexOf(rule), 1);
    };
    _proto.indexOf = function indexOf(rule) {
      return this.index.indexOf(rule);
    };
    _proto.process = function process2() {
      var plugins3 = this.options.jss.plugins;
      this.index.slice(0).forEach(plugins3.onProcessRule, plugins3);
    };
    _proto.register = function register(rule) {
      this.map[rule.key] = rule;
      if (rule instanceof StyleRule) {
        this.map[rule.selector] = rule;
        if (rule.id)
          this.classes[rule.key] = rule.id;
      } else if (rule instanceof KeyframesRule && this.keyframes) {
        this.keyframes[rule.name] = rule.id;
      }
    };
    _proto.unregister = function unregister(rule) {
      delete this.map[rule.key];
      if (rule instanceof StyleRule) {
        delete this.map[rule.selector];
        delete this.classes[rule.key];
      } else if (rule instanceof KeyframesRule) {
        delete this.keyframes[rule.name];
      }
    };
    _proto.update = function update3() {
      var name;
      var data;
      var options;
      if (typeof (arguments.length <= 0 ? void 0 : arguments[0]) === "string") {
        name = arguments.length <= 0 ? void 0 : arguments[0];
        data = arguments.length <= 1 ? void 0 : arguments[1];
        options = arguments.length <= 2 ? void 0 : arguments[2];
      } else {
        data = arguments.length <= 0 ? void 0 : arguments[0];
        options = arguments.length <= 1 ? void 0 : arguments[1];
        name = null;
      }
      if (name) {
        this.updateOne(this.map[name], data, options);
      } else {
        for (var index3 = 0; index3 < this.index.length; index3++) {
          this.updateOne(this.index[index3], data, options);
        }
      }
    };
    _proto.updateOne = function updateOne(rule, data, options) {
      if (options === void 0) {
        options = defaultUpdateOptions;
      }
      var _this$options2 = this.options, plugins3 = _this$options2.jss.plugins, sheet = _this$options2.sheet;
      if (rule.rules instanceof RuleList2) {
        rule.rules.update(data, options);
        return;
      }
      var styleRule = rule;
      var style13 = styleRule.style;
      plugins3.onUpdate(data, rule, sheet, options);
      if (options.process && style13 && style13 !== styleRule.style) {
        plugins3.onProcessStyle(styleRule.style, styleRule, sheet);
        for (var prop in styleRule.style) {
          var nextValue = styleRule.style[prop];
          var prevValue = style13[prop];
          if (nextValue !== prevValue) {
            styleRule.prop(prop, nextValue, forceUpdateOptions);
          }
        }
        for (var _prop in style13) {
          var _nextValue = styleRule.style[_prop];
          var _prevValue = style13[_prop];
          if (_nextValue == null && _nextValue !== _prevValue) {
            styleRule.prop(_prop, null, forceUpdateOptions);
          }
        }
      }
    };
    _proto.toString = function toString(options) {
      var str = "";
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      for (var index3 = 0; index3 < this.index.length; index3++) {
        var rule = this.index[index3];
        var css4 = rule.toString(options);
        if (!css4 && !link)
          continue;
        if (str)
          str += "\n";
        str += css4;
      }
      return str;
    };
    return RuleList2;
  }();
  var StyleSheet = function() {
    function StyleSheet2(styles131, options) {
      this.options = void 0;
      this.deployed = void 0;
      this.attached = void 0;
      this.rules = void 0;
      this.renderer = void 0;
      this.classes = void 0;
      this.keyframes = void 0;
      this.queue = void 0;
      this.attached = false;
      this.deployed = false;
      this.classes = {};
      this.keyframes = {};
      this.options = _extends({}, options, {
        sheet: this,
        parent: this,
        classes: this.classes,
        keyframes: this.keyframes
      });
      if (options.Renderer) {
        this.renderer = new options.Renderer(this);
      }
      this.rules = new RuleList(this.options);
      for (var name in styles131) {
        this.rules.add(name, styles131[name]);
      }
      this.rules.process();
    }
    var _proto = StyleSheet2.prototype;
    _proto.attach = function attach2() {
      if (this.attached)
        return this;
      if (this.renderer)
        this.renderer.attach();
      this.attached = true;
      if (!this.deployed)
        this.deploy();
      return this;
    };
    _proto.detach = function detach2() {
      if (!this.attached)
        return this;
      if (this.renderer)
        this.renderer.detach();
      this.attached = false;
      return this;
    };
    _proto.addRule = function addRule(name, decl, options) {
      var queue = this.queue;
      if (this.attached && !queue)
        this.queue = [];
      var rule = this.rules.add(name, decl, options);
      if (!rule)
        return null;
      this.options.jss.plugins.onProcessRule(rule);
      if (this.attached) {
        if (!this.deployed)
          return rule;
        if (queue)
          queue.push(rule);
        else {
          this.insertRule(rule);
          if (this.queue) {
            this.queue.forEach(this.insertRule, this);
            this.queue = void 0;
          }
        }
        return rule;
      }
      this.deployed = false;
      return rule;
    };
    _proto.insertRule = function insertRule(rule) {
      if (this.renderer) {
        this.renderer.insertRule(rule);
      }
    };
    _proto.addRules = function addRules(styles131, options) {
      var added = [];
      for (var name in styles131) {
        var rule = this.addRule(name, styles131[name], options);
        if (rule)
          added.push(rule);
      }
      return added;
    };
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.deleteRule = function deleteRule(name) {
      var rule = typeof name === "object" ? name : this.rules.get(name);
      if (!rule)
        return false;
      this.rules.remove(rule);
      if (this.attached && rule.renderable && this.renderer) {
        return this.renderer.deleteRule(rule.renderable);
      }
      return true;
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.deploy = function deploy() {
      if (this.renderer)
        this.renderer.deploy();
      this.deployed = true;
      return this;
    };
    _proto.update = function update3() {
      var _this$rules;
      (_this$rules = this.rules).update.apply(_this$rules, arguments);
      return this;
    };
    _proto.updateOne = function updateOne(rule, data, options) {
      this.rules.updateOne(rule, data, options);
      return this;
    };
    _proto.toString = function toString(options) {
      return this.rules.toString(options);
    };
    return StyleSheet2;
  }();
  var PluginsRegistry = function() {
    function PluginsRegistry2() {
      this.plugins = {
        internal: [],
        external: []
      };
      this.registry = void 0;
    }
    var _proto = PluginsRegistry2.prototype;
    _proto.onCreateRule = function onCreateRule(name, decl, options) {
      for (var i = 0; i < this.registry.onCreateRule.length; i++) {
        var rule = this.registry.onCreateRule[i](name, decl, options);
        if (rule)
          return rule;
      }
      return null;
    };
    _proto.onProcessRule = function onProcessRule(rule) {
      if (rule.isProcessed)
        return;
      var sheet = rule.options.sheet;
      for (var i = 0; i < this.registry.onProcessRule.length; i++) {
        this.registry.onProcessRule[i](rule, sheet);
      }
      if (rule.style)
        this.onProcessStyle(rule.style, rule, sheet);
      rule.isProcessed = true;
    };
    _proto.onProcessStyle = function onProcessStyle(style13, rule, sheet) {
      for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
        rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
      }
    };
    _proto.onProcessSheet = function onProcessSheet(sheet) {
      for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
        this.registry.onProcessSheet[i](sheet);
      }
    };
    _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
      for (var i = 0; i < this.registry.onUpdate.length; i++) {
        this.registry.onUpdate[i](data, rule, sheet, options);
      }
    };
    _proto.onChangeValue = function onChangeValue(value, prop, rule) {
      var processedValue = value;
      for (var i = 0; i < this.registry.onChangeValue.length; i++) {
        processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
      }
      return processedValue;
    };
    _proto.use = function use(newPlugin, options) {
      if (options === void 0) {
        options = {
          queue: "external"
        };
      }
      var plugins3 = this.plugins[options.queue];
      if (plugins3.indexOf(newPlugin) !== -1) {
        return;
      }
      plugins3.push(newPlugin);
      this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry, plugin2) {
        for (var name in plugin2) {
          if (name in registry) {
            registry[name].push(plugin2[name]);
          } else {
            tiny_warning_esm_default(false, '[JSS] Unknown hook "' + name + '".');
          }
        }
        return registry;
      }, {
        onCreateRule: [],
        onProcessRule: [],
        onProcessStyle: [],
        onProcessSheet: [],
        onChangeValue: [],
        onUpdate: []
      });
    };
    return PluginsRegistry2;
  }();
  var SheetsRegistry = function() {
    function SheetsRegistry2() {
      this.registry = [];
    }
    var _proto = SheetsRegistry2.prototype;
    _proto.add = function add(sheet) {
      var registry = this.registry;
      var index3 = sheet.options.index;
      if (registry.indexOf(sheet) !== -1)
        return;
      if (registry.length === 0 || index3 >= this.index) {
        registry.push(sheet);
        return;
      }
      for (var i = 0; i < registry.length; i++) {
        if (registry[i].options.index > index3) {
          registry.splice(i, 0, sheet);
          return;
        }
      }
    };
    _proto.reset = function reset2() {
      this.registry = [];
    };
    _proto.remove = function remove(sheet) {
      var index3 = this.registry.indexOf(sheet);
      this.registry.splice(index3, 1);
    };
    _proto.toString = function toString(_temp) {
      var _ref6 = _temp === void 0 ? {} : _temp, attached = _ref6.attached, options = _objectWithoutPropertiesLoose(_ref6, ["attached"]);
      var css4 = "";
      for (var i = 0; i < this.registry.length; i++) {
        var sheet = this.registry[i];
        if (attached != null && sheet.attached !== attached) {
          continue;
        }
        if (css4)
          css4 += "\n";
        css4 += sheet.toString(options);
      }
      return css4;
    };
    _createClass(SheetsRegistry2, [{
      key: "index",
      get: function get() {
        return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
      }
    }]);
    return SheetsRegistry2;
  }();
  var sheets = new SheetsRegistry();
  var globalThis2 = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
  var ns = "2f1acc6c3a606b082e5eef5e54414ffb";
  if (globalThis2[ns] == null)
    globalThis2[ns] = 0;
  var moduleId = globalThis2[ns]++;
  var maxRules = 1e10;
  var createGenerateId = function createGenerateId2(options) {
    if (options === void 0) {
      options = {};
    }
    var ruleCounter = 0;
    return function(rule, sheet) {
      ruleCounter += 1;
      if (ruleCounter > maxRules) {
        tiny_warning_esm_default(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".");
      }
      var jssId = "";
      var prefix3 = "";
      if (sheet) {
        if (sheet.options.classNamePrefix) {
          prefix3 = sheet.options.classNamePrefix;
        }
        if (sheet.options.jss.id != null) {
          jssId = String(sheet.options.jss.id);
        }
      }
      if (options.minify) {
        return "" + (prefix3 || "c") + moduleId + jssId + ruleCounter;
      }
      return prefix3 + rule.key + "-" + moduleId + (jssId ? "-" + jssId : "") + "-" + ruleCounter;
    };
  };
  var memoize3 = function memoize4(fn) {
    var value;
    return function() {
      if (!value)
        value = fn();
      return value;
    };
  };
  function getPropertyValue(cssRule, prop) {
    try {
      if (cssRule.attributeStyleMap) {
        return cssRule.attributeStyleMap.get(prop);
      }
      return cssRule.style.getPropertyValue(prop);
    } catch (err) {
      return "";
    }
  }
  function setProperty(cssRule, prop, value) {
    try {
      var cssValue = value;
      if (Array.isArray(value)) {
        cssValue = toCssValue(value, true);
        if (value[value.length - 1] === "!important") {
          cssRule.style.setProperty(prop, cssValue, "important");
          return true;
        }
      }
      if (cssRule.attributeStyleMap) {
        cssRule.attributeStyleMap.set(prop, cssValue);
      } else {
        cssRule.style.setProperty(prop, cssValue);
      }
    } catch (err) {
      return false;
    }
    return true;
  }
  function removeProperty(cssRule, prop) {
    try {
      if (cssRule.attributeStyleMap) {
        cssRule.attributeStyleMap.delete(prop);
      } else {
        cssRule.style.removeProperty(prop);
      }
    } catch (err) {
      tiny_warning_esm_default(false, '[JSS] DOMException "' + err.message + '" was thrown. Tried to remove property "' + prop + '".');
    }
  }
  function setSelector(cssRule, selectorText) {
    cssRule.selectorText = selectorText;
    return cssRule.selectorText === selectorText;
  }
  var getHead = memoize3(function() {
    return document.querySelector("head");
  });
  function findHigherSheet(registry, options) {
    for (var i = 0; i < registry.length; i++) {
      var sheet = registry[i];
      if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findHighestSheet(registry, options) {
    for (var i = registry.length - 1; i >= 0; i--) {
      var sheet = registry[i];
      if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findCommentNode(text) {
    var head = getHead();
    for (var i = 0; i < head.childNodes.length; i++) {
      var node = head.childNodes[i];
      if (node.nodeType === 8 && node.nodeValue.trim() === text) {
        return node;
      }
    }
    return null;
  }
  function findPrevNode(options) {
    var registry = sheets.registry;
    if (registry.length > 0) {
      var sheet = findHigherSheet(registry, options);
      if (sheet && sheet.renderer) {
        return {
          parent: sheet.renderer.element.parentNode,
          node: sheet.renderer.element
        };
      }
      sheet = findHighestSheet(registry, options);
      if (sheet && sheet.renderer) {
        return {
          parent: sheet.renderer.element.parentNode,
          node: sheet.renderer.element.nextSibling
        };
      }
    }
    var insertionPoint = options.insertionPoint;
    if (insertionPoint && typeof insertionPoint === "string") {
      var comment = findCommentNode(insertionPoint);
      if (comment) {
        return {
          parent: comment.parentNode,
          node: comment.nextSibling
        };
      }
      tiny_warning_esm_default(false, '[JSS] Insertion point "' + insertionPoint + '" not found.');
    }
    return false;
  }
  function insertStyle(style13, options) {
    var insertionPoint = options.insertionPoint;
    var nextNode = findPrevNode(options);
    if (nextNode !== false && nextNode.parent) {
      nextNode.parent.insertBefore(style13, nextNode.node);
      return;
    }
    if (insertionPoint && typeof insertionPoint.nodeType === "number") {
      var insertionPointElement = insertionPoint;
      var parentNode = insertionPointElement.parentNode;
      if (parentNode)
        parentNode.insertBefore(style13, insertionPointElement.nextSibling);
      else
        tiny_warning_esm_default(false, "[JSS] Insertion point is not in the DOM.");
      return;
    }
    getHead().appendChild(style13);
  }
  var getNonce = memoize3(function() {
    var node = document.querySelector('meta[property="csp-nonce"]');
    return node ? node.getAttribute("content") : null;
  });
  var _insertRule = function insertRule(container, rule, index3) {
    var maxIndex = container.cssRules.length;
    if (index3 === void 0 || index3 > maxIndex) {
      index3 = maxIndex;
    }
    try {
      if ("insertRule" in container) {
        var c = container;
        c.insertRule(rule, index3);
      } else if ("appendRule" in container) {
        var _c = container;
        _c.appendRule(rule);
      }
    } catch (err) {
      tiny_warning_esm_default(false, "[JSS] " + err.message);
      return false;
    }
    return container.cssRules[index3];
  };
  var createStyle = function createStyle2() {
    var el2 = document.createElement("style");
    el2.textContent = "\n";
    return el2;
  };
  var DomRenderer = function() {
    function DomRenderer2(sheet) {
      this.getPropertyValue = getPropertyValue;
      this.setProperty = setProperty;
      this.removeProperty = removeProperty;
      this.setSelector = setSelector;
      this.element = void 0;
      this.sheet = void 0;
      this.hasInsertedRules = false;
      if (sheet)
        sheets.add(sheet);
      this.sheet = sheet;
      var _ref6 = this.sheet ? this.sheet.options : {}, media = _ref6.media, meta = _ref6.meta, element = _ref6.element;
      this.element = element || createStyle();
      this.element.setAttribute("data-jss", "");
      if (media)
        this.element.setAttribute("media", media);
      if (meta)
        this.element.setAttribute("data-meta", meta);
      var nonce = getNonce();
      if (nonce)
        this.element.setAttribute("nonce", nonce);
    }
    var _proto = DomRenderer2.prototype;
    _proto.attach = function attach2() {
      if (this.element.parentNode || !this.sheet)
        return;
      insertStyle(this.element, this.sheet.options);
      var deployed = Boolean(this.sheet && this.sheet.deployed);
      if (this.hasInsertedRules && deployed) {
        this.hasInsertedRules = false;
        this.deploy();
      }
    };
    _proto.detach = function detach2() {
      var parentNode = this.element.parentNode;
      if (parentNode)
        parentNode.removeChild(this.element);
    };
    _proto.deploy = function deploy() {
      var sheet = this.sheet;
      if (!sheet)
        return;
      if (sheet.options.link) {
        this.insertRules(sheet.rules);
        return;
      }
      this.element.textContent = "\n" + sheet.toString() + "\n";
    };
    _proto.insertRules = function insertRules(rules, nativeParent) {
      for (var i = 0; i < rules.index.length; i++) {
        this.insertRule(rules.index[i], i, nativeParent);
      }
    };
    _proto.insertRule = function insertRule(rule, index3, nativeParent) {
      if (nativeParent === void 0) {
        nativeParent = this.element.sheet;
      }
      if (rule.rules) {
        var parent = rule;
        var latestNativeParent = nativeParent;
        if (rule.type === "conditional" || rule.type === "keyframes") {
          latestNativeParent = _insertRule(nativeParent, parent.toString({
            children: false
          }), index3);
          if (latestNativeParent === false) {
            return false;
          }
        }
        this.insertRules(parent.rules, latestNativeParent);
        return latestNativeParent;
      }
      if (rule.renderable && rule.renderable.parentStyleSheet === this.element.sheet) {
        return rule.renderable;
      }
      var ruleStr = rule.toString();
      if (!ruleStr)
        return false;
      var nativeRule = _insertRule(nativeParent, ruleStr, index3);
      if (nativeRule === false) {
        return false;
      }
      this.hasInsertedRules = true;
      rule.renderable = nativeRule;
      return nativeRule;
    };
    _proto.deleteRule = function deleteRule(cssRule) {
      var sheet = this.element.sheet;
      var index3 = this.indexOf(cssRule);
      if (index3 === -1)
        return false;
      sheet.deleteRule(index3);
      return true;
    };
    _proto.indexOf = function indexOf(cssRule) {
      var cssRules = this.element.sheet.cssRules;
      for (var index3 = 0; index3 < cssRules.length; index3++) {
        if (cssRule === cssRules[index3])
          return index3;
      }
      return -1;
    };
    _proto.replaceRule = function replaceRule(cssRule, rule) {
      var index3 = this.indexOf(cssRule);
      if (index3 === -1)
        return false;
      this.element.sheet.deleteRule(index3);
      return this.insertRule(rule, index3);
    };
    _proto.getRules = function getRules() {
      return this.element.sheet.cssRules;
    };
    return DomRenderer2;
  }();
  var instanceCounter = 0;
  var Jss = function() {
    function Jss2(options) {
      this.id = instanceCounter++;
      this.version = "10.4.0";
      this.plugins = new PluginsRegistry();
      this.options = {
        id: {
          minify: false
        },
        createGenerateId,
        Renderer: module_default ? DomRenderer : null,
        plugins: []
      };
      this.generateId = createGenerateId({
        minify: false
      });
      for (var i = 0; i < plugins2.length; i++) {
        this.plugins.use(plugins2[i], {
          queue: "internal"
        });
      }
      this.setup(options);
    }
    var _proto = Jss2.prototype;
    _proto.setup = function setup(options) {
      if (options === void 0) {
        options = {};
      }
      if (options.createGenerateId) {
        this.options.createGenerateId = options.createGenerateId;
      }
      if (options.id) {
        this.options.id = _extends({}, this.options.id, options.id);
      }
      if (options.createGenerateId || options.id) {
        this.generateId = this.options.createGenerateId(this.options.id);
      }
      if (options.insertionPoint != null)
        this.options.insertionPoint = options.insertionPoint;
      if ("Renderer" in options) {
        this.options.Renderer = options.Renderer;
      }
      if (options.plugins)
        this.use.apply(this, options.plugins);
      return this;
    };
    _proto.createStyleSheet = function createStyleSheet(styles131, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, index3 = _options.index;
      if (typeof index3 !== "number") {
        index3 = sheets.index === 0 ? 0 : sheets.index + 1;
      }
      var sheet = new StyleSheet(styles131, _extends({}, options, {
        jss: this,
        generateId: options.generateId || this.generateId,
        insertionPoint: this.options.insertionPoint,
        Renderer: this.options.Renderer,
        index: index3
      }));
      this.plugins.onProcessSheet(sheet);
      return sheet;
    };
    _proto.removeStyleSheet = function removeStyleSheet(sheet) {
      sheet.detach();
      sheets.remove(sheet);
      return this;
    };
    _proto.createRule = function createRule$1(name, style13, options) {
      if (style13 === void 0) {
        style13 = {};
      }
      if (options === void 0) {
        options = {};
      }
      if (typeof name === "object") {
        return this.createRule(void 0, name, style13);
      }
      var ruleOptions = _extends({}, options, {
        name,
        jss: this,
        Renderer: this.options.Renderer
      });
      if (!ruleOptions.generateId)
        ruleOptions.generateId = this.generateId;
      if (!ruleOptions.classes)
        ruleOptions.classes = {};
      if (!ruleOptions.keyframes)
        ruleOptions.keyframes = {};
      var rule = createRule(name, style13, ruleOptions);
      if (rule)
        this.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.use = function use() {
      var _this = this;
      for (var _len = arguments.length, plugins3 = new Array(_len), _key = 0; _key < _len; _key++) {
        plugins3[_key] = arguments[_key];
      }
      plugins3.forEach(function(plugin2) {
        _this.plugins.use(plugin2);
      });
      return this;
    };
    return Jss2;
  }();
  function getDynamicStyles(styles131) {
    var to = null;
    for (var key3 in styles131) {
      var value = styles131[key3];
      var type = typeof value;
      if (type === "function") {
        if (!to)
          to = {};
        to[key3] = value;
      } else if (type === "object" && value !== null && !Array.isArray(value)) {
        var extracted = getDynamicStyles(value);
        if (extracted) {
          if (!to)
            to = {};
          to[key3] = extracted;
        }
      }
    }
    return to;
  }
  var SheetsManager = function() {
    function SheetsManager2() {
      this.length = 0;
      this.sheets = new WeakMap();
    }
    var _proto = SheetsManager2.prototype;
    _proto.get = function get(key3) {
      var entry = this.sheets.get(key3);
      return entry && entry.sheet;
    };
    _proto.add = function add(key3, sheet) {
      if (this.sheets.has(key3))
        return;
      this.length++;
      this.sheets.set(key3, {
        sheet,
        refs: 0
      });
    };
    _proto.manage = function manage(key3) {
      var entry = this.sheets.get(key3);
      if (entry) {
        if (entry.refs === 0) {
          entry.sheet.attach();
        }
        entry.refs++;
        return entry.sheet;
      }
      tiny_warning_esm_default(false, "[JSS] SheetsManager: can't find sheet to manage");
      return void 0;
    };
    _proto.unmanage = function unmanage(key3) {
      var entry = this.sheets.get(key3);
      if (entry) {
        if (entry.refs > 0) {
          entry.refs--;
          if (entry.refs === 0)
            entry.sheet.detach();
        }
      } else {
        tiny_warning_esm_default(false, "SheetsManager: can't find sheet to unmanage");
      }
    };
    _createClass(SheetsManager2, [{
      key: "size",
      get: function get() {
        return this.length;
      }
    }]);
    return SheetsManager2;
  }();
  var hasCSSTOMSupport = typeof CSS !== "undefined" && CSS && "number" in CSS;
  var create = function create2(options) {
    return new Jss(options);
  };
  var index = create();

  // node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js
  var now = Date.now();
  var fnValuesNs = "fnValues" + now;
  var fnRuleNs = "fnStyle" + ++now;
  function functionPlugin() {
    return {
      onCreateRule: function onCreateRule(name, decl, options) {
        if (typeof decl !== "function")
          return null;
        var rule = createRule(name, {}, options);
        rule[fnRuleNs] = decl;
        return rule;
      },
      onProcessStyle: function onProcessStyle(style13, rule) {
        if (fnValuesNs in rule || fnRuleNs in rule)
          return style13;
        var fnValues = {};
        for (var prop in style13) {
          var value = style13[prop];
          if (typeof value !== "function")
            continue;
          delete style13[prop];
          fnValues[prop] = value;
        }
        rule[fnValuesNs] = fnValues;
        return style13;
      },
      onUpdate: function onUpdate(data, rule, sheet, options) {
        var styleRule = rule;
        var fnRule = styleRule[fnRuleNs];
        if (fnRule) {
          styleRule.style = fnRule(data) || {};
          if (true) {
            for (var prop in styleRule.style) {
              if (typeof styleRule.style[prop] === "function") {
                tiny_warning_esm_default(false, "[JSS] Function values inside function rules are not supported.");
                break;
              }
            }
          }
        }
        var fnValues = styleRule[fnValuesNs];
        if (fnValues) {
          for (var _prop in fnValues) {
            styleRule.prop(_prop, fnValues[_prop](data), options);
          }
        }
      }
    };
  }
  const jss_plugin_rule_value_function_esm_default = functionPlugin;

  // node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js
  var at = "@global";
  var atPrefix = "@global ";
  var GlobalContainerRule = function() {
    function GlobalContainerRule2(key3, styles131, options) {
      this.type = "global";
      this.at = at;
      this.rules = void 0;
      this.options = void 0;
      this.key = void 0;
      this.isProcessed = false;
      this.key = key3;
      this.options = options;
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var selector in styles131) {
        this.rules.add(selector, styles131[selector]);
      }
      this.rules.process();
    }
    var _proto = GlobalContainerRule2.prototype;
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.addRule = function addRule(name, style13, options) {
      var rule = this.rules.add(name, style13, options);
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.toString = function toString() {
      return this.rules.toString();
    };
    return GlobalContainerRule2;
  }();
  var GlobalPrefixedRule = function() {
    function GlobalPrefixedRule2(key3, style13, options) {
      this.type = "global";
      this.at = at;
      this.options = void 0;
      this.rule = void 0;
      this.isProcessed = false;
      this.key = void 0;
      this.key = key3;
      this.options = options;
      var selector = key3.substr(atPrefix.length);
      this.rule = options.jss.createRule(selector, style13, _extends({}, options, {
        parent: this
      }));
    }
    var _proto2 = GlobalPrefixedRule2.prototype;
    _proto2.toString = function toString(options) {
      return this.rule ? this.rule.toString(options) : "";
    };
    return GlobalPrefixedRule2;
  }();
  var separatorRegExp = /\s*,\s*/g;
  function addScope(selector, scope) {
    var parts = selector.split(separatorRegExp);
    var scoped = "";
    for (var i = 0; i < parts.length; i++) {
      scoped += scope + " " + parts[i].trim();
      if (parts[i + 1])
        scoped += ", ";
    }
    return scoped;
  }
  function handleNestedGlobalContainerRule(rule) {
    var options = rule.options, style13 = rule.style;
    var rules = style13 ? style13[at] : null;
    if (!rules)
      return;
    for (var name in rules) {
      options.sheet.addRule(name, rules[name], _extends({}, options, {
        selector: addScope(name, rule.selector)
      }));
    }
    delete style13[at];
  }
  function handlePrefixedGlobalRule(rule) {
    var options = rule.options, style13 = rule.style;
    for (var prop in style13) {
      if (prop[0] !== "@" || prop.substr(0, at.length) !== at)
        continue;
      var selector = addScope(prop.substr(at.length), rule.selector);
      options.sheet.addRule(selector, style13[prop], _extends({}, options, {
        selector
      }));
      delete style13[prop];
    }
  }
  function jssGlobal() {
    function onCreateRule(name, styles131, options) {
      if (!name)
        return null;
      if (name === at) {
        return new GlobalContainerRule(name, styles131, options);
      }
      if (name[0] === "@" && name.substr(0, atPrefix.length) === atPrefix) {
        return new GlobalPrefixedRule(name, styles131, options);
      }
      var parent = options.parent;
      if (parent) {
        if (parent.type === "global" || parent.options.parent && parent.options.parent.type === "global") {
          options.scoped = false;
        }
      }
      if (options.scoped === false) {
        options.selector = name;
      }
      return null;
    }
    function onProcessRule(rule) {
      if (rule.type !== "style")
        return;
      handleNestedGlobalContainerRule(rule);
      handlePrefixedGlobalRule(rule);
    }
    return {
      onCreateRule,
      onProcessRule
    };
  }
  const jss_plugin_global_esm_default = jssGlobal;

  // node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js
  var separatorRegExp2 = /\s*,\s*/g;
  var parentRegExp = /&/g;
  var refRegExp = /\$([\w-]+)/g;
  function jssNested() {
    function getReplaceRef(container, sheet) {
      return function(match, key3) {
        var rule = container.getRule(key3) || sheet && sheet.getRule(key3);
        if (rule) {
          rule = rule;
          return rule.selector;
        }
        tiny_warning_esm_default(false, '[JSS] Could not find the referenced rule "' + key3 + '" in "' + (container.options.meta || container.toString()) + '".');
        return key3;
      };
    }
    function replaceParentRefs(nestedProp, parentProp) {
      var parentSelectors = parentProp.split(separatorRegExp2);
      var nestedSelectors = nestedProp.split(separatorRegExp2);
      var result = "";
      for (var i = 0; i < parentSelectors.length; i++) {
        var parent = parentSelectors[i];
        for (var j = 0; j < nestedSelectors.length; j++) {
          var nested3 = nestedSelectors[j];
          if (result)
            result += ", ";
          result += nested3.indexOf("&") !== -1 ? nested3.replace(parentRegExp, parent) : parent + " " + nested3;
        }
      }
      return result;
    }
    function getOptions(rule, container, prevOptions) {
      if (prevOptions)
        return _extends({}, prevOptions, {
          index: prevOptions.index + 1
        });
      var nestingLevel = rule.options.nestingLevel;
      nestingLevel = nestingLevel === void 0 ? 1 : nestingLevel + 1;
      var options = _extends({}, rule.options, {
        nestingLevel,
        index: container.indexOf(rule) + 1
      });
      delete options.name;
      return options;
    }
    function onProcessStyle(style13, rule, sheet) {
      if (rule.type !== "style")
        return style13;
      var styleRule = rule;
      var container = styleRule.options.parent;
      var options;
      var replaceRef2;
      for (var prop in style13) {
        var isNested = prop.indexOf("&") !== -1;
        var isNestedConditional = prop[0] === "@";
        if (!isNested && !isNestedConditional)
          continue;
        options = getOptions(styleRule, container, options);
        if (isNested) {
          var selector = replaceParentRefs(prop, styleRule.selector);
          if (!replaceRef2)
            replaceRef2 = getReplaceRef(container, sheet);
          selector = selector.replace(refRegExp, replaceRef2);
          container.addRule(selector, style13[prop], _extends({}, options, {
            selector
          }));
        } else if (isNestedConditional) {
          container.addRule(prop, {}, options).addRule(styleRule.key, style13[prop], {
            selector: styleRule.selector
          });
        }
        delete style13[prop];
      }
      return style13;
    }
    return {
      onProcessStyle
    };
  }
  const jss_plugin_nested_esm_default = jssNested;

  // node_modules/hyphenate-style-name/index.js
  var uppercasePattern = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache2 = {};
  function toHyphenLower(match) {
    return "-" + match.toLowerCase();
  }
  function hyphenateStyleName(name) {
    if (cache2.hasOwnProperty(name)) {
      return cache2[name];
    }
    var hName = name.replace(uppercasePattern, toHyphenLower);
    return cache2[name] = msPattern.test(hName) ? "-" + hName : hName;
  }
  const hyphenate_style_name_default = hyphenateStyleName;

  // node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js
  function convertCase(style13) {
    var converted = {};
    for (var prop in style13) {
      var key3 = prop.indexOf("--") === 0 ? prop : hyphenate_style_name_default(prop);
      converted[key3] = style13[prop];
    }
    if (style13.fallbacks) {
      if (Array.isArray(style13.fallbacks))
        converted.fallbacks = style13.fallbacks.map(convertCase);
      else
        converted.fallbacks = convertCase(style13.fallbacks);
    }
    return converted;
  }
  function camelCase() {
    function onProcessStyle(style13) {
      if (Array.isArray(style13)) {
        for (var index3 = 0; index3 < style13.length; index3++) {
          style13[index3] = convertCase(style13[index3]);
        }
        return style13;
      }
      return convertCase(style13);
    }
    function onChangeValue(value, prop, rule) {
      if (prop.indexOf("--") === 0) {
        return value;
      }
      var hyphenatedProp = hyphenate_style_name_default(prop);
      if (prop === hyphenatedProp)
        return value;
      rule.prop(hyphenatedProp, value);
      return null;
    }
    return {
      onProcessStyle,
      onChangeValue
    };
  }
  const jss_plugin_camel_case_esm_default = camelCase;

  // node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js
  var px = hasCSSTOMSupport && CSS ? CSS.px : "px";
  var ms = hasCSSTOMSupport && CSS ? CSS.ms : "ms";
  var percent = hasCSSTOMSupport && CSS ? CSS.percent : "%";
  var defaultUnits = {
    "animation-delay": ms,
    "animation-duration": ms,
    "background-position": px,
    "background-position-x": px,
    "background-position-y": px,
    "background-size": px,
    border: px,
    "border-bottom": px,
    "border-bottom-left-radius": px,
    "border-bottom-right-radius": px,
    "border-bottom-width": px,
    "border-left": px,
    "border-left-width": px,
    "border-radius": px,
    "border-right": px,
    "border-right-width": px,
    "border-top": px,
    "border-top-left-radius": px,
    "border-top-right-radius": px,
    "border-top-width": px,
    "border-width": px,
    margin: px,
    "margin-bottom": px,
    "margin-left": px,
    "margin-right": px,
    "margin-top": px,
    padding: px,
    "padding-bottom": px,
    "padding-left": px,
    "padding-right": px,
    "padding-top": px,
    "mask-position-x": px,
    "mask-position-y": px,
    "mask-size": px,
    height: px,
    width: px,
    "min-height": px,
    "max-height": px,
    "min-width": px,
    "max-width": px,
    bottom: px,
    left: px,
    top: px,
    right: px,
    "box-shadow": px,
    "text-shadow": px,
    "column-gap": px,
    "column-rule": px,
    "column-rule-width": px,
    "column-width": px,
    "font-size": px,
    "font-size-delta": px,
    "letter-spacing": px,
    "text-indent": px,
    "text-stroke": px,
    "text-stroke-width": px,
    "word-spacing": px,
    motion: px,
    "motion-offset": px,
    outline: px,
    "outline-offset": px,
    "outline-width": px,
    perspective: px,
    "perspective-origin-x": percent,
    "perspective-origin-y": percent,
    "transform-origin": percent,
    "transform-origin-x": percent,
    "transform-origin-y": percent,
    "transform-origin-z": percent,
    "transition-delay": ms,
    "transition-duration": ms,
    "vertical-align": px,
    "flex-basis": px,
    "shape-margin": px,
    size: px,
    grid: px,
    "grid-gap": px,
    "grid-row-gap": px,
    "grid-column-gap": px,
    "grid-template-rows": px,
    "grid-template-columns": px,
    "grid-auto-rows": px,
    "grid-auto-columns": px,
    "box-shadow-x": px,
    "box-shadow-y": px,
    "box-shadow-blur": px,
    "box-shadow-spread": px,
    "font-line-height": px,
    "text-shadow-x": px,
    "text-shadow-y": px,
    "text-shadow-blur": px
  };
  function addCamelCasedVersion(obj) {
    var regExp2 = /(-[a-z])/g;
    var replace = function replace2(str) {
      return str[1].toUpperCase();
    };
    var newObj = {};
    for (var _key in obj) {
      newObj[_key] = obj[_key];
      newObj[_key.replace(regExp2, replace)] = obj[_key];
    }
    return newObj;
  }
  var units = addCamelCasedVersion(defaultUnits);
  function iterate(prop, value, options) {
    if (!value)
      return value;
    if (Array.isArray(value)) {
      for (var i = 0; i < value.length; i++) {
        value[i] = iterate(prop, value[i], options);
      }
    } else if (typeof value === "object") {
      if (prop === "fallbacks") {
        for (var innerProp in value) {
          value[innerProp] = iterate(innerProp, value[innerProp], options);
        }
      } else {
        for (var _innerProp in value) {
          value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
        }
      }
    } else if (typeof value === "number") {
      var unit = options[prop] || units[prop];
      if (unit) {
        return typeof unit === "function" ? unit(value).toString() : "" + value + unit;
      }
      return value.toString();
    }
    return value;
  }
  function defaultUnit(options) {
    if (options === void 0) {
      options = {};
    }
    var camelCasedOptions = addCamelCasedVersion(options);
    function onProcessStyle(style13, rule) {
      if (rule.type !== "style")
        return style13;
      for (var prop in style13) {
        style13[prop] = iterate(prop, style13[prop], camelCasedOptions);
      }
      return style13;
    }
    function onChangeValue(value, prop) {
      return iterate(prop, value, camelCasedOptions);
    }
    return {
      onProcessStyle,
      onChangeValue
    };
  }
  const jss_plugin_default_unit_esm_default = defaultUnit;

  // node_modules/css-vendor/dist/css-vendor.esm.js
  var js = "";
  var css3 = "";
  var vendor = "";
  var browser = "";
  var isTouch = module_default && "ontouchstart" in document.documentElement;
  if (module_default) {
    var jsCssMap = {
      Moz: "-moz-",
      ms: "-ms-",
      O: "-o-",
      Webkit: "-webkit-"
    };
    var _document$createEleme = document.createElement("p"), style12 = _document$createEleme.style;
    var testProp = "Transform";
    for (var key in jsCssMap) {
      if (key + testProp in style12) {
        js = key;
        css3 = jsCssMap[key];
        break;
      }
    }
    if (js === "Webkit" && "msHyphens" in style12) {
      js = "ms";
      css3 = jsCssMap.ms;
      browser = "edge";
    }
    if (js === "Webkit" && "-apple-trailing-word" in style12) {
      vendor = "apple";
    }
  }
  var prefix = {
    js,
    css: css3,
    vendor,
    browser,
    isTouch
  };
  function supportedKeyframes(key3) {
    if (key3[1] === "-")
      return key3;
    if (prefix.js === "ms")
      return key3;
    return "@" + prefix.css + "keyframes" + key3.substr(10);
  }
  var appearence = {
    noPrefill: ["appearance"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "appearance")
        return false;
      if (prefix.js === "ms")
        return "-webkit-" + prop;
      return prefix.css + prop;
    }
  };
  var colorAdjust = {
    noPrefill: ["color-adjust"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "color-adjust")
        return false;
      if (prefix.js === "Webkit")
        return prefix.css + "print-" + prop;
      return prop;
    }
  };
  var regExp = /[-\s]+(.)?/g;
  function toUpper(match, c) {
    return c ? c.toUpperCase() : "";
  }
  function camelize(str) {
    return str.replace(regExp, toUpper);
  }
  function pascalize(str) {
    return camelize("-" + str);
  }
  var mask = {
    noPrefill: ["mask"],
    supportedProperty: function supportedProperty2(prop, style13) {
      if (!/^mask/.test(prop))
        return false;
      if (prefix.js === "Webkit") {
        var longhand = "mask-image";
        if (camelize(longhand) in style13) {
          return prop;
        }
        if (prefix.js + pascalize(longhand) in style13) {
          return prefix.css + prop;
        }
      }
      return prop;
    }
  };
  var textOrientation = {
    noPrefill: ["text-orientation"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "text-orientation")
        return false;
      if (prefix.vendor === "apple" && !prefix.isTouch) {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var transform2 = {
    noPrefill: ["transform"],
    supportedProperty: function supportedProperty2(prop, style13, options) {
      if (prop !== "transform")
        return false;
      if (options.transform) {
        return prop;
      }
      return prefix.css + prop;
    }
  };
  var transition = {
    noPrefill: ["transition"],
    supportedProperty: function supportedProperty2(prop, style13, options) {
      if (prop !== "transition")
        return false;
      if (options.transition) {
        return prop;
      }
      return prefix.css + prop;
    }
  };
  var writingMode = {
    noPrefill: ["writing-mode"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "writing-mode")
        return false;
      if (prefix.js === "Webkit" || prefix.js === "ms" && prefix.browser !== "edge") {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var userSelect = {
    noPrefill: ["user-select"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "user-select")
        return false;
      if (prefix.js === "Moz" || prefix.js === "ms" || prefix.vendor === "apple") {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var breakPropsOld = {
    supportedProperty: function supportedProperty2(prop, style13) {
      if (!/^break-/.test(prop))
        return false;
      if (prefix.js === "Webkit") {
        var jsProp = "WebkitColumn" + pascalize(prop);
        return jsProp in style13 ? prefix.css + "column-" + prop : false;
      }
      if (prefix.js === "Moz") {
        var _jsProp = "page" + pascalize(prop);
        return _jsProp in style13 ? "page-" + prop : false;
      }
      return false;
    }
  };
  var inlineLogicalOld = {
    supportedProperty: function supportedProperty2(prop, style13) {
      if (!/^(border|margin|padding)-inline/.test(prop))
        return false;
      if (prefix.js === "Moz")
        return prop;
      var newProp = prop.replace("-inline", "");
      return prefix.js + pascalize(newProp) in style13 ? prefix.css + newProp : false;
    }
  };
  var unprefixed = {
    supportedProperty: function supportedProperty2(prop, style13) {
      return camelize(prop) in style13 ? prop : false;
    }
  };
  var prefixed = {
    supportedProperty: function supportedProperty2(prop, style13) {
      var pascalized = pascalize(prop);
      if (prop[0] === "-")
        return prop;
      if (prop[0] === "-" && prop[1] === "-")
        return prop;
      if (prefix.js + pascalized in style13)
        return prefix.css + prop;
      if (prefix.js !== "Webkit" && "Webkit" + pascalized in style13)
        return "-webkit-" + prop;
      return false;
    }
  };
  var scrollSnap = {
    supportedProperty: function supportedProperty2(prop) {
      if (prop.substring(0, 11) !== "scroll-snap")
        return false;
      if (prefix.js === "ms") {
        return "" + prefix.css + prop;
      }
      return prop;
    }
  };
  var overscrollBehavior = {
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "overscroll-behavior")
        return false;
      if (prefix.js === "ms") {
        return prefix.css + "scroll-chaining";
      }
      return prop;
    }
  };
  var propMap = {
    "flex-grow": "flex-positive",
    "flex-shrink": "flex-negative",
    "flex-basis": "flex-preferred-size",
    "justify-content": "flex-pack",
    order: "flex-order",
    "align-items": "flex-align",
    "align-content": "flex-line-pack"
  };
  var flex2012 = {
    supportedProperty: function supportedProperty2(prop, style13) {
      var newProp = propMap[prop];
      if (!newProp)
        return false;
      return prefix.js + pascalize(newProp) in style13 ? prefix.css + newProp : false;
    }
  };
  var propMap$1 = {
    flex: "box-flex",
    "flex-grow": "box-flex",
    "flex-direction": ["box-orient", "box-direction"],
    order: "box-ordinal-group",
    "align-items": "box-align",
    "flex-flow": ["box-orient", "box-direction"],
    "justify-content": "box-pack"
  };
  var propKeys = Object.keys(propMap$1);
  var prefixCss = function prefixCss2(p) {
    return prefix.css + p;
  };
  var flex2009 = {
    supportedProperty: function supportedProperty2(prop, style13, _ref6) {
      var multiple = _ref6.multiple;
      if (propKeys.indexOf(prop) > -1) {
        var newProp = propMap$1[prop];
        if (!Array.isArray(newProp)) {
          return prefix.js + pascalize(newProp) in style13 ? prefix.css + newProp : false;
        }
        if (!multiple)
          return false;
        for (var i = 0; i < newProp.length; i++) {
          if (!(prefix.js + pascalize(newProp[0]) in style13)) {
            return false;
          }
        }
        return newProp.map(prefixCss);
      }
      return false;
    }
  };
  var plugins = [appearence, colorAdjust, mask, textOrientation, transform2, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
  var propertyDetectors = plugins.filter(function(p) {
    return p.supportedProperty;
  }).map(function(p) {
    return p.supportedProperty;
  });
  var noPrefill = plugins.filter(function(p) {
    return p.noPrefill;
  }).reduce(function(a, p) {
    a.push.apply(a, _toConsumableArray(p.noPrefill));
    return a;
  }, []);
  var el;
  var cache = {};
  if (module_default) {
    el = document.createElement("p");
    var computed = window.getComputedStyle(document.documentElement, "");
    for (var key$1 in computed) {
      if (!isNaN(key$1))
        cache[computed[key$1]] = computed[key$1];
    }
    noPrefill.forEach(function(x) {
      return delete cache[x];
    });
  }
  function supportedProperty(prop, options) {
    if (options === void 0) {
      options = {};
    }
    if (!el)
      return prop;
    if (cache[prop] != null) {
      return cache[prop];
    }
    if (prop === "transition" || prop === "transform") {
      options[prop] = prop in el.style;
    }
    for (var i = 0; i < propertyDetectors.length; i++) {
      cache[prop] = propertyDetectors[i](prop, el.style, options);
      if (cache[prop])
        break;
    }
    try {
      el.style[prop] = "";
    } catch (err) {
      return false;
    }
    return cache[prop];
  }
  var cache$1 = {};
  var transitionProperties = {
    transition: 1,
    "transition-property": 1,
    "-webkit-transition": 1,
    "-webkit-transition-property": 1
  };
  var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
  var el$1;
  function prefixTransitionCallback(match, p1, p2) {
    if (p1 === "var")
      return "var";
    if (p1 === "all")
      return "all";
    if (p2 === "all")
      return ", all";
    var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
    if (!prefixedValue)
      return p1 || p2;
    return prefixedValue;
  }
  if (module_default)
    el$1 = document.createElement("p");
  function supportedValue(property, value) {
    var prefixedValue = value;
    if (!el$1 || property === "content")
      return value;
    if (typeof prefixedValue !== "string" || !isNaN(parseInt(prefixedValue, 10))) {
      return prefixedValue;
    }
    var cacheKey = property + prefixedValue;
    if (cache$1[cacheKey] != null) {
      return cache$1[cacheKey];
    }
    try {
      el$1.style[property] = prefixedValue;
    } catch (err) {
      cache$1[cacheKey] = false;
      return false;
    }
    if (transitionProperties[property]) {
      prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
    } else if (el$1.style[property] === "") {
      prefixedValue = prefix.css + prefixedValue;
      if (prefixedValue === "-ms-flex")
        el$1.style[property] = "-ms-flexbox";
      el$1.style[property] = prefixedValue;
      if (el$1.style[property] === "") {
        cache$1[cacheKey] = false;
        return false;
      }
    }
    el$1.style[property] = "";
    cache$1[cacheKey] = prefixedValue;
    return cache$1[cacheKey];
  }

  // node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js
  function jssVendorPrefixer() {
    function onProcessRule(rule) {
      if (rule.type === "keyframes") {
        var atRule = rule;
        atRule.at = supportedKeyframes(atRule.at);
      }
    }
    function prefixStyle(style13) {
      for (var prop in style13) {
        var value = style13[prop];
        if (prop === "fallbacks" && Array.isArray(value)) {
          style13[prop] = value.map(prefixStyle);
          continue;
        }
        var changeProp = false;
        var supportedProp = supportedProperty(prop);
        if (supportedProp && supportedProp !== prop)
          changeProp = true;
        var changeValue = false;
        var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
        if (supportedValue$1 && supportedValue$1 !== value)
          changeValue = true;
        if (changeProp || changeValue) {
          if (changeProp)
            delete style13[prop];
          style13[supportedProp || prop] = supportedValue$1 || value;
        }
      }
      return style13;
    }
    function onProcessStyle(style13, rule) {
      if (rule.type !== "style")
        return style13;
      return prefixStyle(style13);
    }
    function onChangeValue(value, prop) {
      return supportedValue(prop, toCssValue(value)) || value;
    }
    return {
      onProcessRule,
      onProcessStyle,
      onChangeValue
    };
  }
  const jss_plugin_vendor_prefixer_esm_default = jssVendorPrefixer;

  // node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js
  function jssPropsSort() {
    var sort = function sort2(prop0, prop1) {
      if (prop0.length === prop1.length) {
        return prop0 > prop1 ? 1 : -1;
      }
      return prop0.length - prop1.length;
    };
    return {
      onProcessStyle: function onProcessStyle(style13, rule) {
        if (rule.type !== "style")
          return style13;
        var newStyle = {};
        var props = Object.keys(style13).sort(sort);
        for (var i = 0; i < props.length; i++) {
          newStyle[props[i]] = style13[props[i]];
        }
        return newStyle;
      }
    };
  }
  const jss_plugin_props_sort_esm_default = jssPropsSort;

  // node_modules/@material-ui/styles/esm/jssPreset/jssPreset.js
  function jssPreset() {
    return {
      plugins: [
        jss_plugin_rule_value_function_esm_default(),
        jss_plugin_global_esm_default(),
        jss_plugin_nested_esm_default(),
        jss_plugin_camel_case_esm_default(),
        jss_plugin_default_unit_esm_default(),
        typeof window === "undefined" ? null : jss_plugin_vendor_prefixer_esm_default(),
        jss_plugin_props_sort_esm_default()
      ]
    };
  }

  // node_modules/@material-ui/styles/esm/mergeClasses/mergeClasses.js
  function mergeClasses() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var baseClasses = options.baseClasses, newClasses = options.newClasses, Component7 = options.Component;
    if (!newClasses) {
      return baseClasses;
    }
    var nextClasses = _extends({}, baseClasses);
    if (true) {
      if (typeof newClasses === "string") {
        console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat(getDisplayName(Component7), " is incorrect."), "You might want to use the className prop instead."].join("\n"));
        return baseClasses;
      }
    }
    Object.keys(newClasses).forEach(function(key3) {
      if (true) {
        if (!baseClasses[key3] && newClasses[key3]) {
          console.error(["Material-UI: The key `".concat(key3, "` ") + "provided to the classes prop is not implemented in ".concat(getDisplayName(Component7), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(","), ".")].join("\n"));
        }
        if (newClasses[key3] && typeof newClasses[key3] !== "string") {
          console.error(["Material-UI: The key `".concat(key3, "` ") + "provided to the classes prop is not valid for ".concat(getDisplayName(Component7), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key3], ".")].join("\n"));
        }
      }
      if (newClasses[key3]) {
        nextClasses[key3] = "".concat(baseClasses[key3], " ").concat(newClasses[key3]);
      }
    });
    return nextClasses;
  }

  // node_modules/@material-ui/styles/esm/makeStyles/multiKeyStore.js
  var multiKeyStore2 = {
    set: function set(cache4, key1, key22, value) {
      var subCache = cache4.get(key1);
      if (!subCache) {
        subCache = new Map();
        cache4.set(key1, subCache);
      }
      subCache.set(key22, value);
    },
    get: function get(cache4, key1, key22) {
      var subCache = cache4.get(key1);
      return subCache ? subCache.get(key22) : void 0;
    },
    delete: function _delete(cache4, key1, key22) {
      var subCache = cache4.get(key1);
      subCache.delete(key22);
    }
  };
  const multiKeyStore_default = multiKeyStore2;

  // node_modules/@material-ui/styles/esm/useTheme/ThemeContext.js
  const react8 = __toModule(require_react());
  var ThemeContext2 = react8.default.createContext(null);
  if (true) {
    ThemeContext2.displayName = "ThemeContext";
  }
  const ThemeContext_default = ThemeContext2;

  // node_modules/@material-ui/styles/esm/useTheme/useTheme.js
  const react9 = __toModule(require_react());
  function useTheme10() {
    var theme = react9.default.useContext(ThemeContext_default);
    if (true) {
      react9.default.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@material-ui/styles/esm/StylesProvider/StylesProvider.js
  const react4 = __toModule(require_react());
  const prop_types134 = __toModule(require_prop_types());
  var jss3 = create(jssPreset());
  var generateClassName = createGenerateClassName();
  var sheetsManager = new Map();
  var defaultOptions = {
    disableGeneration: false,
    generateClassName,
    jss: jss3,
    sheetsCache: null,
    sheetsManager,
    sheetsRegistry: null
  };
  var StylesContext = react4.default.createContext(defaultOptions);
  if (true) {
    StylesContext.displayName = "StylesContext";
  }
  var injectFirstNode;
  function StylesProvider(props) {
    var children = props.children, _props$injectFirst = props.injectFirst, injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst, _props$disableGenerat = props.disableGeneration, disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat, localOptions = _objectWithoutProperties(props, ["children", "injectFirst", "disableGeneration"]);
    var outerOptions = react4.default.useContext(StylesContext);
    var context2 = _extends(_extends({}, outerOptions), {}, {
      disableGeneration
    }, localOptions);
    if (true) {
      if (typeof window === "undefined" && !context2.sheetsManager) {
        console.error("Material-UI: You need to use the ServerStyleSheets API when rendering on the server.");
      }
    }
    if (true) {
      if (context2.jss.options.insertionPoint && injectFirst) {
        console.error("Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.");
      }
    }
    if (true) {
      if (injectFirst && localOptions.jss) {
        console.error("Material-UI: You cannot use the jss and injectFirst props at the same time.");
      }
    }
    if (!context2.jss.options.insertionPoint && injectFirst && typeof window !== "undefined") {
      if (!injectFirstNode) {
        var head = document.head;
        injectFirstNode = document.createComment("mui-inject-first");
        head.insertBefore(injectFirstNode, head.firstChild);
      }
      context2.jss = create({
        plugins: jssPreset().plugins,
        insertionPoint: injectFirstNode
      });
    }
    return react4.default.createElement(StylesContext.Provider, {
      value: context2
    }, children);
  }
  StylesProvider.propTypes = {
    children: prop_types134.default.node.isRequired,
    disableGeneration: prop_types134.default.bool,
    generateClassName: prop_types134.default.func,
    injectFirst: prop_types134.default.bool,
    jss: prop_types134.default.object,
    serverGenerateClassName: prop_types134.default.func,
    sheetsCache: prop_types134.default.object,
    sheetsManager: prop_types134.default.object,
    sheetsRegistry: prop_types134.default.object
  };
  if (true) {
    StylesProvider.propTypes = exactProp(StylesProvider.propTypes);
  }

  // node_modules/@material-ui/styles/esm/makeStyles/indexCounter.js
  var indexCounter = -1e9;
  function increment() {
    indexCounter += 1;
    if (true) {
      if (indexCounter >= 0) {
        console.warn(["Material-UI: You might have a memory leak.", "The indexCounter is not supposed to grow that much."].join("\n"));
      }
    }
    return indexCounter;
  }

  // node_modules/@material-ui/styles/esm/getStylesCreator/noopTheme.js
  var noopTheme2 = {};
  const noopTheme_default = noopTheme2;

  // node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js
  function getStylesCreator(stylesOrCreator) {
    var themingEnabled = typeof stylesOrCreator === "function";
    if (true) {
      if (_typeof(stylesOrCreator) !== "object" && !themingEnabled) {
        console.error(["Material-UI: The `styles` argument provided is invalid.", "You need to provide a function generating the styles or a styles object."].join("\n"));
      }
    }
    return {
      create: function create2(theme, name) {
        var styles131;
        try {
          styles131 = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
        } catch (err) {
          if (true) {
            if (themingEnabled === true && theme === noopTheme_default) {
              console.error(["Material-UI: The `styles` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
            }
          }
          throw err;
        }
        if (!name || !theme.overrides || !theme.overrides[name]) {
          return styles131;
        }
        var overrides = theme.overrides[name];
        var stylesWithOverrides = _extends({}, styles131);
        Object.keys(overrides).forEach(function(key3) {
          if (true) {
            if (!stylesWithOverrides[key3]) {
              console.warn(["Material-UI: You are trying to override a style that does not exist.", "Fix the `".concat(key3, "` key of `theme.overrides.").concat(name, "`.")].join("\n"));
            }
          }
          stylesWithOverrides[key3] = deepmerge(stylesWithOverrides[key3], overrides[key3]);
        });
        return stylesWithOverrides;
      },
      options: {}
    };
  }

  // node_modules/@material-ui/styles/esm/makeStyles/makeStyles.js
  const react6 = __toModule(require_react());
  function getClasses(_ref6, classes, Component7) {
    var state = _ref6.state, stylesOptions = _ref6.stylesOptions;
    if (stylesOptions.disableGeneration) {
      return classes || {};
    }
    if (!state.cacheClasses) {
      state.cacheClasses = {
        value: null,
        lastProp: null,
        lastJSS: {}
      };
    }
    var generate = false;
    if (state.classes !== state.cacheClasses.lastJSS) {
      state.cacheClasses.lastJSS = state.classes;
      generate = true;
    }
    if (classes !== state.cacheClasses.lastProp) {
      state.cacheClasses.lastProp = classes;
      generate = true;
    }
    if (generate) {
      state.cacheClasses.value = mergeClasses({
        baseClasses: state.cacheClasses.lastJSS,
        newClasses: classes,
        Component: Component7
      });
    }
    return state.cacheClasses.value;
  }
  function attach(_ref24, props) {
    var state = _ref24.state, theme = _ref24.theme, stylesOptions = _ref24.stylesOptions, stylesCreator = _ref24.stylesCreator, name = _ref24.name;
    if (stylesOptions.disableGeneration) {
      return;
    }
    var sheetManager = multiKeyStore_default.get(stylesOptions.sheetsManager, stylesCreator, theme);
    if (!sheetManager) {
      sheetManager = {
        refs: 0,
        staticSheet: null,
        dynamicStyles: null
      };
      multiKeyStore_default.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
    }
    var options = _extends(_extends(_extends({}, stylesCreator.options), stylesOptions), {}, {
      theme,
      flip: typeof stylesOptions.flip === "boolean" ? stylesOptions.flip : theme.direction === "rtl"
    });
    options.generateId = options.serverGenerateClassName || options.generateClassName;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
      var staticSheet;
      if (stylesOptions.sheetsCache) {
        staticSheet = multiKeyStore_default.get(stylesOptions.sheetsCache, stylesCreator, theme);
      }
      var styles131 = stylesCreator.create(theme, name);
      if (!staticSheet) {
        staticSheet = stylesOptions.jss.createStyleSheet(styles131, _extends({
          link: false
        }, options));
        staticSheet.attach();
        if (stylesOptions.sheetsCache) {
          multiKeyStore_default.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
        }
      }
      if (sheetsRegistry) {
        sheetsRegistry.add(staticSheet);
      }
      sheetManager.staticSheet = staticSheet;
      sheetManager.dynamicStyles = getDynamicStyles(styles131);
    }
    if (sheetManager.dynamicStyles) {
      var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends({
        link: true
      }, options));
      dynamicSheet.update(props);
      dynamicSheet.attach();
      state.dynamicSheet = dynamicSheet;
      state.classes = mergeClasses({
        baseClasses: sheetManager.staticSheet.classes,
        newClasses: dynamicSheet.classes
      });
      if (sheetsRegistry) {
        sheetsRegistry.add(dynamicSheet);
      }
    } else {
      state.classes = sheetManager.staticSheet.classes;
    }
    sheetManager.refs += 1;
  }
  function update(_ref33, props) {
    var state = _ref33.state;
    if (state.dynamicSheet) {
      state.dynamicSheet.update(props);
    }
  }
  function detach(_ref43) {
    var state = _ref43.state, theme = _ref43.theme, stylesOptions = _ref43.stylesOptions, stylesCreator = _ref43.stylesCreator;
    if (stylesOptions.disableGeneration) {
      return;
    }
    var sheetManager = multiKeyStore_default.get(stylesOptions.sheetsManager, stylesCreator, theme);
    sheetManager.refs -= 1;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
      multiKeyStore_default.delete(stylesOptions.sheetsManager, stylesCreator, theme);
      stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
      if (sheetsRegistry) {
        sheetsRegistry.remove(sheetManager.staticSheet);
      }
    }
    if (state.dynamicSheet) {
      stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
      if (sheetsRegistry) {
        sheetsRegistry.remove(state.dynamicSheet);
      }
    }
  }
  function useSynchronousEffect(func, values3) {
    var key3 = react6.default.useRef([]);
    var output;
    var currentKey = react6.default.useMemo(function() {
      return {};
    }, values3);
    if (key3.current !== currentKey) {
      key3.current = currentKey;
      output = func();
    }
    react6.default.useEffect(function() {
      return function() {
        if (output) {
          output();
        }
      };
    }, [currentKey]);
  }
  function makeStyles2(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var name = options.name, classNamePrefixOption = options.classNamePrefix, Component7 = options.Component, _options$defaultTheme = options.defaultTheme, defaultTheme7 = _options$defaultTheme === void 0 ? noopTheme_default : _options$defaultTheme, stylesOptions2 = _objectWithoutProperties(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);
    var stylesCreator = getStylesCreator(stylesOrCreator);
    var classNamePrefix = name || classNamePrefixOption || "makeStyles";
    stylesCreator.options = {
      index: increment(),
      name,
      meta: classNamePrefix,
      classNamePrefix
    };
    var useStyles2 = function useStyles3() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var theme = useTheme10() || defaultTheme7;
      var stylesOptions = _extends(_extends({}, react6.default.useContext(StylesContext)), stylesOptions2);
      var instance = react6.default.useRef();
      var shouldUpdate = react6.default.useRef();
      useSynchronousEffect(function() {
        var current = {
          name,
          state: {},
          stylesCreator,
          stylesOptions,
          theme
        };
        attach(current, props);
        shouldUpdate.current = false;
        instance.current = current;
        return function() {
          detach(current);
        };
      }, [theme, stylesCreator]);
      react6.default.useEffect(function() {
        if (shouldUpdate.current) {
          update(instance.current, props);
        }
        shouldUpdate.current = true;
      });
      var classes = getClasses(instance.current, props.classes, Component7);
      if (true) {
        react6.default.useDebugValue(classes);
      }
      return classes;
    };
    return useStyles2;
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@material-ui/styles/esm/ServerStyleSheets/ServerStyleSheets.js
  const react3 = __toModule(require_react());
  var ServerStyleSheets = function() {
    function ServerStyleSheets4() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      _classCallCheck(this, ServerStyleSheets4);
      this.options = options;
    }
    _createClass(ServerStyleSheets4, [{
      key: "collect",
      value: function collect(children) {
        var sheetsManager2 = new Map();
        this.sheetsRegistry = new SheetsRegistry();
        var generateClassName2 = createGenerateClassName();
        return react3.default.createElement(StylesProvider, _extends({
          sheetsManager: sheetsManager2,
          serverGenerateClassName: generateClassName2,
          sheetsRegistry: this.sheetsRegistry
        }, this.options), children);
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.sheetsRegistry ? this.sheetsRegistry.toString() : "";
      }
    }, {
      key: "getStyleElement",
      value: function getStyleElement(props) {
        return react3.default.createElement("style", _extends({
          id: "jss-server-side",
          key: "jss-server-side",
          dangerouslySetInnerHTML: {
            __html: this.toString()
          }
        }, props));
      }
    }]);
    return ServerStyleSheets4;
  }();

  // node_modules/clsx/dist/clsx.m.js
  function toVal(mix) {
    var k, y, str = "";
    if (typeof mix === "string" || typeof mix === "number") {
      str += mix;
    } else if (typeof mix === "object") {
      if (Array.isArray(mix)) {
        for (k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (y = toVal(mix[k])) {
              str && (str += " ");
              str += y;
            }
          }
        }
      } else {
        for (k in mix) {
          if (mix[k]) {
            str && (str += " ");
            str += k;
          }
        }
      }
    }
    return str;
  }
  function clsx_m_default() {
    var i = 0, tmp, x, str = "";
    while (i < arguments.length) {
      if (tmp = arguments[i++]) {
        if (x = toVal(tmp)) {
          str && (str += " ");
          str += x;
        }
      }
    }
    return str;
  }

  // node_modules/@material-ui/styles/esm/styled/styled.js
  const react7 = __toModule(require_react());
  const prop_types136 = __toModule(require_prop_types());
  const hoist_non_react_statics2 = __toModule(require_hoist_non_react_statics_cjs());
  function omit(input, fields) {
    var output = {};
    Object.keys(input).forEach(function(prop) {
      if (fields.indexOf(prop) === -1) {
        output[prop] = input[prop];
      }
    });
    return output;
  }
  function styled3(Component7) {
    var componentCreator = function componentCreator2(style13) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var name = options.name, stylesOptions = _objectWithoutProperties(options, ["name"]);
      if (Component7 === void 0) {
        throw new Error(["You are calling styled(Component)(style) with an undefined component.", "You may have forgotten to import it."].join("\n"));
      }
      var classNamePrefix = name;
      if (true) {
        if (!name) {
          var displayName = getDisplayName(Component7);
          if (displayName !== void 0) {
            classNamePrefix = displayName;
          }
        }
      }
      var stylesOrCreator = typeof style13 === "function" ? function(theme) {
        return {
          root: function root(props) {
            return style13(_extends({
              theme
            }, props));
          }
        };
      } : {
        root: style13
      };
      var useStyles2 = makeStyles2(stylesOrCreator, _extends({
        Component: Component7,
        name: name || Component7.displayName,
        classNamePrefix
      }, stylesOptions));
      var filterProps;
      var propTypes = {};
      if (style13.filterProps) {
        filterProps = style13.filterProps;
        delete style13.filterProps;
      }
      if (style13.propTypes) {
        propTypes = style13.propTypes;
        delete style13.propTypes;
      }
      var StyledComponent = react7.default.forwardRef(function StyledComponent2(props, ref) {
        var children = props.children, classNameProp = props.className, clone = props.clone, ComponentProp = props.component, other = _objectWithoutProperties(props, ["children", "className", "clone", "component"]);
        var classes = useStyles2(props);
        var className = clsx_m_default(classes.root, classNameProp);
        var spread = other;
        if (filterProps) {
          spread = omit(spread, filterProps);
        }
        if (clone) {
          return react7.default.cloneElement(children, _extends({
            className: clsx_m_default(children.props.className, className)
          }, spread));
        }
        if (typeof children === "function") {
          return children(_extends({
            className
          }, spread));
        }
        var FinalComponent = ComponentProp || Component7;
        return react7.default.createElement(FinalComponent, _extends({
          ref,
          className
        }, spread), children);
      });
      StyledComponent.propTypes = _extends({
        children: prop_types136.default.oneOfType([prop_types136.default.node, prop_types136.default.func]),
        className: prop_types136.default.string,
        clone: chainPropTypes(prop_types136.default.bool, function(props) {
          if (props.clone && props.component) {
            return new Error("You can not use the clone and component prop at the same time.");
          }
          return null;
        }),
        component: prop_types136.default.elementType
      }, propTypes);
      if (true) {
        StyledComponent.displayName = "Styled(".concat(classNamePrefix, ")");
      }
      hoist_non_react_statics2.default(StyledComponent, Component7);
      return StyledComponent;
    };
    return componentCreator;
  }

  // node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js
  const react5 = __toModule(require_react());
  const prop_types135 = __toModule(require_prop_types());
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      var mergedTheme = localTheme(outerTheme);
      if (true) {
        if (!mergedTheme) {
          console.error(["Material-UI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends(_extends({}, outerTheme), localTheme);
  }
  function ThemeProvider(props) {
    var children = props.children, localTheme = props.theme;
    var outerTheme = useTheme10();
    if (true) {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["Material-UI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    var theme = react5.default.useMemo(function() {
      var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested_default] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return react5.default.createElement(ThemeContext_default.Provider, {
      value: theme
    }, children);
  }
  ThemeProvider.propTypes = {
    children: prop_types135.default.node.isRequired,
    theme: prop_types135.default.oneOfType([prop_types135.default.object, prop_types135.default.func]).isRequired
  };
  if (true) {
    ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes);
  }
  const ThemeProvider_default = ThemeProvider;

  // node_modules/@material-ui/styles/esm/withStyles/withStyles.js
  const react10 = __toModule(require_react());
  const prop_types137 = __toModule(require_prop_types());
  const hoist_non_react_statics3 = __toModule(require_hoist_non_react_statics_cjs());
  var withStyles114 = function withStyles115(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return function(Component7) {
      var defaultTheme7 = options.defaultTheme, _options$withTheme = options.withTheme, withTheme6 = _options$withTheme === void 0 ? false : _options$withTheme, name = options.name, stylesOptions = _objectWithoutProperties(options, ["defaultTheme", "withTheme", "name"]);
      if (true) {
        if (Component7 === void 0) {
          throw new Error(["You are calling withStyles(styles)(Component) with an undefined component.", "You may have forgotten to import it."].join("\n"));
        }
      }
      var classNamePrefix = name;
      if (true) {
        if (!name) {
          var displayName = getDisplayName(Component7);
          if (displayName !== void 0) {
            classNamePrefix = displayName;
          }
        }
      }
      var useStyles2 = makeStyles2(stylesOrCreator, _extends({
        defaultTheme: defaultTheme7,
        Component: Component7,
        name: name || Component7.displayName,
        classNamePrefix
      }, stylesOptions));
      var WithStyles = react10.default.forwardRef(function WithStyles2(props, ref) {
        var classesProp = props.classes, innerRef = props.innerRef, other = _objectWithoutProperties(props, ["classes", "innerRef"]);
        var classes = useStyles2(_extends(_extends({}, Component7.defaultProps), props));
        var theme;
        var more = other;
        if (typeof name === "string" || withTheme6) {
          theme = useTheme10() || defaultTheme7;
          if (name) {
            more = getThemeProps({
              theme,
              name,
              props: other
            });
          }
          if (withTheme6 && !more.theme) {
            more.theme = theme;
          }
        }
        return react10.default.createElement(Component7, _extends({
          ref: innerRef || ref,
          classes
        }, more));
      });
      WithStyles.propTypes = {
        classes: prop_types137.default.object,
        innerRef: chainPropTypes(prop_types137.default.oneOfType([prop_types137.default.func, prop_types137.default.object]), function(props) {
          if (props.innerRef == null) {
            return null;
          }
          return null;
        })
      };
      if (true) {
        WithStyles.displayName = "WithStyles(".concat(getDisplayName(Component7), ")");
      }
      hoist_non_react_statics3.default(WithStyles, Component7);
      if (true) {
        WithStyles.Naked = Component7;
        WithStyles.options = options;
        WithStyles.useStyles = useStyles2;
      }
      return WithStyles;
    };
  };
  const withStyles_default2 = withStyles114;

  // node_modules/@material-ui/styles/esm/withTheme/withTheme.js
  const react11 = __toModule(require_react());
  const prop_types138 = __toModule(require_prop_types());
  const hoist_non_react_statics4 = __toModule(require_hoist_non_react_statics_cjs());
  function withThemeCreator() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var defaultTheme7 = options.defaultTheme;
    var withTheme6 = function withTheme7(Component7) {
      if (true) {
        if (Component7 === void 0) {
          throw new Error(["You are calling withTheme(Component) with an undefined component.", "You may have forgotten to import it."].join("\n"));
        }
      }
      var WithTheme = react11.default.forwardRef(function WithTheme2(props, ref) {
        var innerRef = props.innerRef, other = _objectWithoutProperties(props, ["innerRef"]);
        var theme = useTheme10() || defaultTheme7;
        return react11.default.createElement(Component7, _extends({
          theme,
          ref: innerRef || ref
        }, other));
      });
      WithTheme.propTypes = {
        innerRef: chainPropTypes(prop_types138.default.oneOfType([prop_types138.default.func, prop_types138.default.object]), function(props) {
          if (props.innerRef == null) {
            return null;
          }
          return new Error("Material-UI: The `innerRef` prop is deprecated and will be removed in v5. Refs are now automatically forwarded to the inner component.");
        })
      };
      if (true) {
        WithTheme.displayName = "WithTheme(".concat(getDisplayName(Component7), ")");
      }
      hoist_non_react_statics4.default(WithTheme, Component7);
      if (true) {
        WithTheme.Naked = Component7;
      }
      return WithTheme;
    };
    return withTheme6;
  }
  var withTheme5 = withThemeCreator();

  // node_modules/@material-ui/core/esm/styles/createStyles.js
  function createStyles2(styles131) {
    return createStyles(styles131);
  }

  // node_modules/@material-ui/core/esm/styles/defaultTheme.js
  var defaultTheme = createMuiTheme_default();
  const defaultTheme_default = defaultTheme;

  // node_modules/@material-ui/core/esm/styles/makeStyles.js
  function makeStyles3(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return makeStyles2(stylesOrCreator, _extends({
      defaultTheme: defaultTheme_default
    }, options));
  }
  const makeStyles_default = makeStyles3;

  // node_modules/@material-ui/core/esm/styles/cssUtils.js
  function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
  }
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length) {
    return parseFloat(length);
  }
  function convertLength(baseFontSize) {
    return function(length, toUnit) {
      var fromUnit = getUnit(length);
      if (fromUnit === toUnit) {
        return length;
      }
      var pxLength = toUnitless(length);
      if (fromUnit !== "px") {
        if (fromUnit === "em") {
          pxLength = toUnitless(length) * toUnitless(baseFontSize);
        } else if (fromUnit === "rem") {
          pxLength = toUnitless(length) * toUnitless(baseFontSize);
          return length;
        }
      }
      var outputLength = pxLength;
      if (toUnit !== "px") {
        if (toUnit === "em") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else if (toUnit === "rem") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else {
          return length;
        }
      }
      return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
  }
  function alignProperty(_ref6) {
    var size = _ref6.size, grid3 = _ref6.grid;
    var sizeBelow = size - size % grid3;
    var sizeAbove = sizeBelow + grid3;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
  }
  function fontGrid(_ref24) {
    var lineHeight2 = _ref24.lineHeight, pixels = _ref24.pixels, htmlFontSize = _ref24.htmlFontSize;
    return pixels / (lineHeight2 * htmlFontSize);
  }
  function responsiveProperty(_ref33) {
    var cssProperty = _ref33.cssProperty, min = _ref33.min, max = _ref33.max, _ref3$unit = _ref33.unit, unit = _ref3$unit === void 0 ? "rem" : _ref3$unit, _ref3$breakpoints = _ref33.breakpoints, breakpoints5 = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints, _ref3$transform = _ref33.transform, transform3 = _ref3$transform === void 0 ? null : _ref3$transform;
    var output = _defineProperty({}, cssProperty, "".concat(min).concat(unit));
    var factor = (max - min) / breakpoints5[breakpoints5.length - 1];
    breakpoints5.forEach(function(breakpoint) {
      var value = min + factor * breakpoint;
      if (transform3 !== null) {
        value = transform3(value);
      }
      output["@media (min-width:".concat(breakpoint, "px)")] = _defineProperty({}, cssProperty, "".concat(Math.round(value * 1e4) / 1e4).concat(unit));
    });
    return output;
  }

  // node_modules/@material-ui/core/esm/styles/responsiveFontSizes.js
  function responsiveFontSizes2(themeInput) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _options$breakpoints = options.breakpoints, breakpoints5 = _options$breakpoints === void 0 ? ["sm", "md", "lg"] : _options$breakpoints, _options$disableAlign = options.disableAlign, disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign, _options$factor = options.factor, factor = _options$factor === void 0 ? 2 : _options$factor, _options$variants = options.variants, variants = _options$variants === void 0 ? ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"] : _options$variants;
    var theme = _extends({}, themeInput);
    theme.typography = _extends({}, theme.typography);
    var typography3 = theme.typography;
    var convert = convertLength(typography3.htmlFontSize);
    var breakpointValues = breakpoints5.map(function(x) {
      return theme.breakpoints.values[x];
    });
    variants.forEach(function(variant) {
      var style13 = typography3[variant];
      var remFontSize = parseFloat(convert(style13.fontSize, "rem"));
      if (remFontSize <= 1) {
        return;
      }
      var maxFontSize = remFontSize;
      var minFontSize = 1 + (maxFontSize - 1) / factor;
      var lineHeight2 = style13.lineHeight;
      if (!isUnitless(lineHeight2) && !disableAlign) {
        throw new Error("Material-UI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.");
      }
      if (!isUnitless(lineHeight2)) {
        lineHeight2 = parseFloat(convert(lineHeight2, "rem")) / parseFloat(remFontSize);
      }
      var transform3 = null;
      if (!disableAlign) {
        transform3 = function transform4(value) {
          return alignProperty({
            size: value,
            grid: fontGrid({
              pixels: 4,
              lineHeight: lineHeight2,
              htmlFontSize: typography3.htmlFontSize
            })
          });
        };
      }
      typography3[variant] = _extends({}, style13, responsiveProperty({
        cssProperty: "fontSize",
        min: minFontSize,
        max: maxFontSize,
        unit: "rem",
        breakpoints: breakpointValues,
        transform: transform3
      }));
    });
    return theme;
  }

  // node_modules/@material-ui/core/esm/styles/styled.js
  var styled4 = function styled7(Component7) {
    var componentCreator = styled3(Component7);
    return function(style13, options) {
      return componentCreator(style13, _extends({
        defaultTheme: defaultTheme_default
      }, options));
    };
  };
  const styled_default = styled4;

  // node_modules/@material-ui/core/esm/styles/useTheme.js
  const react = __toModule(require_react());
  function useTheme2() {
    var theme = useTheme10() || defaultTheme_default;
    if (true) {
      react.default.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@material-ui/core/esm/styles/withStyles.js
  function withStyles111(stylesOrCreator, options) {
    return withStyles_default2(stylesOrCreator, _extends({
      defaultTheme: defaultTheme_default
    }, options));
  }
  const withStyles_default = withStyles111;

  // node_modules/@material-ui/core/esm/styles/withTheme.js
  var withTheme2 = withThemeCreator({
    defaultTheme: defaultTheme_default
  });
  const withTheme_default = withTheme2;

  // node_modules/@material-ui/core/esm/utils/capitalize.js
  function capitalize2(string) {
    if (typeof string !== "string") {
      throw new Error("Material-UI: capitalize(string) expects a string argument.");
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@material-ui/core/esm/utils/createChainedFunction.js
  function createChainedFunction2() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    return funcs.reduce(function(acc, func) {
      if (func == null) {
        return acc;
      }
      if (true) {
        if (typeof func !== "function") {
          console.error("Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.");
        }
      }
      return function chainedFunction() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, function() {
    });
  }

  // node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js
  const React112 = __toModule(require_react());
  const prop_types105 = __toModule(require_prop_types());
  var styles96 = function styles131(theme) {
    return {
      root: {
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0,
        fontSize: theme.typography.pxToRem(24),
        transition: theme.transitions.create("fill", {
          duration: theme.transitions.duration.shorter
        })
      },
      colorPrimary: {
        color: theme.palette.primary.main
      },
      colorSecondary: {
        color: theme.palette.secondary.main
      },
      colorAction: {
        color: theme.palette.action.active
      },
      colorError: {
        color: theme.palette.error.main
      },
      colorDisabled: {
        color: theme.palette.action.disabled
      },
      fontSizeInherit: {
        fontSize: "inherit"
      },
      fontSizeSmall: {
        fontSize: theme.typography.pxToRem(20)
      },
      fontSizeLarge: {
        fontSize: theme.typography.pxToRem(35)
      }
    };
  };
  var SvgIcon3 = React112.forwardRef(function SvgIcon6(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component7 = _props$component === void 0 ? "svg" : _props$component, _props$fontSize = props.fontSize, fontSize2 = _props$fontSize === void 0 ? "default" : _props$fontSize, htmlColor = props.htmlColor, titleAccess = props.titleAccess, _props$viewBox = props.viewBox, viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
    return React112.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, color2 !== "inherit" && classes["color".concat(capitalize2(color2))], fontSize2 !== "default" && classes["fontSize".concat(capitalize2(fontSize2))]),
      focusable: "false",
      viewBox,
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, other), children, titleAccess ? React112.createElement("title", null, titleAccess) : null);
  });
  SvgIcon3.propTypes = {
    children: prop_types105.default.node,
    classes: prop_types105.default.object,
    className: prop_types105.default.string,
    color: prop_types105.default.oneOf(["action", "disabled", "error", "inherit", "primary", "secondary"]),
    component: prop_types105.default.elementType,
    fontSize: prop_types105.default.oneOf(["default", "inherit", "large", "small"]),
    htmlColor: prop_types105.default.string,
    shapeRendering: prop_types105.default.string,
    titleAccess: prop_types105.default.string,
    viewBox: prop_types105.default.string
  };
  SvgIcon3.muiName = "SvgIcon";
  const SvgIcon_default = withStyles_default(styles96, {
    name: "MuiSvgIcon"
  })(SvgIcon3);

  // node_modules/@material-ui/core/esm/utils/createSvgIcon.js
  const react2 = __toModule(require_react());
  const SvgIcon4 = __toModule(require_SvgIcon());
  function createSvgIcon2(path, displayName) {
    var Component7 = function Component8(props, ref) {
      return react2.default.createElement(SvgIcon4.default, _extends({
        ref
      }, props), path);
    };
    if (true) {
      Component7.displayName = "".concat(displayName, "Icon");
    }
    Component7.muiName = SvgIcon4.default.muiName;
    return react2.default.memo(react2.default.forwardRef(Component7));
  }

  // node_modules/@material-ui/core/esm/utils/debounce.js
  function debounce2(func) {
    var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 166;
    var timeout;
    function debounced() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var that = this;
      var later = function later2() {
        func.apply(that, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }
    debounced.clear = function() {
      clearTimeout(timeout);
    };
    return debounced;
  }

  // node_modules/@material-ui/core/esm/utils/deprecatedPropType.js
  function deprecatedPropType(validator, reason) {
    if (false) {
      return function() {
        return null;
      };
    }
    return function(props, propName, componentName, location, propFullName) {
      var componentNameSafe = componentName || "<<anonymous>>";
      var propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error("The ".concat(location, " `").concat(propFullNameSafe, "` of ") + "`".concat(componentNameSafe, "` is deprecated. ").concat(reason));
      }
      return null;
    };
  }

  // node_modules/@material-ui/core/esm/utils/isMuiElement.js
  const React159 = __toModule(require_react());
  function isMuiElement2(element, muiNames) {
    return React159.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  // node_modules/@material-ui/core/esm/utils/ownerDocument.js
  function ownerDocument2(node) {
    return node && node.ownerDocument || document;
  }

  // node_modules/@material-ui/core/esm/utils/ownerWindow.js
  function ownerWindow2(node) {
    var doc = ownerDocument2(node);
    return doc.defaultView || window;
  }

  // node_modules/@material-ui/core/esm/utils/requirePropFactory.js
  function requirePropFactory2(componentNameInError) {
    if (false) {
      return function() {
        return null;
      };
    }
    var requireProp2 = function requireProp3(requiredProp) {
      return function(props, propName, componentName, location, propFullName) {
        var propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
          return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
        }
        return null;
      };
    };
    return requireProp2;
  }

  // node_modules/@material-ui/core/esm/utils/setRef.js
  function setRef2(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@material-ui/core/esm/utils/unsupportedProp.js
  function unsupportedProp2(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    var propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
    }
    return null;
  }

  // node_modules/@material-ui/core/esm/utils/useControlled.js
  const React161 = __toModule(require_react());
  function useControlled2(_ref6) {
    var controlled = _ref6.controlled, defaultProp = _ref6.default, name = _ref6.name, _ref$state = _ref6.state, state = _ref$state === void 0 ? "value" : _ref$state;
    var _React$useRef = React161.useRef(controlled !== void 0), isControlled = _React$useRef.current;
    var _React$useState = React161.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
    var value = isControlled ? controlled : valueState;
    if (true) {
      React161.useEffect(function() {
        if (isControlled !== (controlled !== void 0)) {
          console.error(["Material-UI: A component is changing the ".concat(isControlled ? "" : "un", "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? "un" : "", "controlled."), "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled ".concat(name, " ") + "element for the lifetime of the component.", "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [controlled]);
      var _React$useRef2 = React161.useRef(defaultProp), defaultValue = _React$useRef2.current;
      React161.useEffect(function() {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    var setValueIfUncontrolled = React161.useCallback(function(newValue) {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@material-ui/core/esm/utils/useEventCallback.js
  const React162 = __toModule(require_react());
  var useEnhancedEffect10 = typeof window !== "undefined" ? React162.useLayoutEffect : React162.useEffect;
  function useEventCallback2(fn) {
    var ref = React162.useRef(fn);
    useEnhancedEffect10(function() {
      ref.current = fn;
    });
    return React162.useCallback(function() {
      return (0, ref.current).apply(void 0, arguments);
    }, []);
  }

  // node_modules/@material-ui/core/esm/utils/useForkRef.js
  const React163 = __toModule(require_react());
  function useForkRef2(refA, refB) {
    return React163.useMemo(function() {
      if (refA == null && refB == null) {
        return null;
      }
      return function(refValue) {
        setRef2(refA, refValue);
        setRef2(refB, refValue);
      };
    }, [refA, refB]);
  }

  // node_modules/@material-ui/core/esm/utils/unstable_useId.js
  const React160 = __toModule(require_react());
  function useId(idOverride) {
    var _React$useState = React160.useState(idOverride), defaultId = _React$useState[0], setDefaultId = _React$useState[1];
    var id = idOverride || defaultId;
    React160.useEffect(function() {
      if (defaultId == null) {
        setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
      }
    }, [defaultId]);
    return id;
  }

  // node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js
  const React164 = __toModule(require_react());
  const ReactDOM14 = __toModule(require_react_dom());
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = null;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node) {
    var type = node.type, tagName = node.tagName;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node.readOnly) {
      return true;
    }
    if (node.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    var target = event.target;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function handleBlurVisible() {
    hadFocusVisibleRecently = true;
    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
    hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
      hadFocusVisibleRecently = false;
    }, 100);
  }
  function useIsFocusVisible2() {
    var ref = React164.useCallback(function(instance) {
      var node = ReactDOM14.findDOMNode(instance);
      if (node != null) {
        prepare(node.ownerDocument);
      }
    }, []);
    if (true) {
      React164.useDebugValue(isFocusVisible);
    }
    return {
      isFocusVisible,
      onBlurVisible: handleBlurVisible,
      ref
    };
  }

  // node_modules/@babel/runtime/helpers/esm/toArray.js
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  // node_modules/react-transition-group/esm/config.js
  const config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  const prop_types152 = __toModule(require_prop_types());
  var timeoutsShape = prop_types152.default.oneOfType([prop_types152.default.number, prop_types152.default.shape({
    enter: prop_types152.default.number,
    exit: prop_types152.default.number,
    appear: prop_types152.default.number
  }).isRequired]);
  var classNamesShape = prop_types152.default.oneOfType([prop_types152.default.string, prop_types152.default.shape({
    enter: prop_types152.default.string,
    exit: prop_types152.default.string,
    active: prop_types152.default.string
  }), prop_types152.default.shape({
    enter: prop_types152.default.string,
    enterDone: prop_types152.default.string,
    enterActive: prop_types152.default.string,
    exit: prop_types152.default.string,
    exitDone: prop_types152.default.string,
    exitActive: prop_types152.default.string
  })]);

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  const react20 = __toModule(require_react());
  const TransitionGroupContext_default = react20.default.createContext(null);

  // node_modules/react-transition-group/esm/Transition.js
  const prop_types150 = __toModule(require_prop_types());
  const react18 = __toModule(require_react());
  const react_dom2 = __toModule(require_react_dom());
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition3 = function(_React$Component) {
    _inheritsLoose(Transition5, _React$Component);
    function Transition5(props, context2) {
      var _this;
      _this = _React$Component.call(this, props, context2) || this;
      var parentGroup = context2;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition5.getDerivedStateFromProps = function getDerivedStateFromProps(_ref6, prevState) {
      var nextIn = _ref6.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition5.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== "number") {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear !== void 0 ? timeout.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref24 = this.props.nodeRef ? [appearing] : [react_dom2.default.findDOMNode(this), appearing], maybeNode = _ref24[0], maybeAppearing = _ref24[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : react_dom2.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom2.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref33 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref33[0], maybeNextCallback = _ref33[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return react18.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : react18.default.cloneElement(react18.default.Children.only(children), childProps));
    };
    return Transition5;
  }(react18.default.Component);
  Transition3.contextType = TransitionGroupContext_default;
  Transition3.propTypes = {
    nodeRef: prop_types150.default.shape({
      current: typeof Element === "undefined" ? prop_types150.default.any : prop_types150.default.instanceOf(Element)
    }),
    children: prop_types150.default.oneOfType([prop_types150.default.func.isRequired, prop_types150.default.element.isRequired]).isRequired,
    in: prop_types150.default.bool,
    mountOnEnter: prop_types150.default.bool,
    unmountOnExit: prop_types150.default.bool,
    appear: prop_types150.default.bool,
    enter: prop_types150.default.bool,
    exit: prop_types150.default.bool,
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    addEndListener: prop_types150.default.func,
    onEnter: prop_types150.default.func,
    onEntering: prop_types150.default.func,
    onEntered: prop_types150.default.func,
    onExit: prop_types150.default.func,
    onExiting: prop_types150.default.func,
    onExited: prop_types150.default.func
  };
  function noop2() {
  }
  Transition3.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop2,
    onEntering: noop2,
    onEntered: noop2,
    onExit: noop2,
    onExiting: noop2,
    onExited: noop2
  };
  Transition3.UNMOUNTED = UNMOUNTED;
  Transition3.EXITED = EXITED;
  Transition3.ENTERING = ENTERING;
  Transition3.ENTERED = ENTERED;
  Transition3.EXITING = EXITING;
  const Transition_default = Transition3;

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  const react21 = __toModule(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && react21.isValidElement(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children)
      react21.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key3) {
      return key3 in next ? next[key3] : prev[key3];
    }
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return react21.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key3) {
      var child = children[key3];
      if (!react21.isValidElement(child))
        return;
      var hasPrev = key3 in prevChildMapping;
      var hasNext = key3 in nextChildMapping;
      var prevChild = prevChildMapping[key3];
      var isLeaving = react21.isValidElement(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key3] = react21.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key3] = react21.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && react21.isValidElement(prevChild)) {
        children[key3] = react21.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  const prop_types151 = __toModule(require_prop_types());
  const react19 = __toModule(require_react());
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup2 = function(_React$Component) {
    _inheritsLoose(TransitionGroup4, _React$Component);
    function TransitionGroup4(props, context2) {
      var _this;
      _this = _React$Component.call(this, props, context2) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup4.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup4.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref6) {
      var prevChildMapping = _ref6.children, handleExited = _ref6.handleExited, firstRender = _ref6.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component7 = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component7 === null) {
        return react19.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return react19.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, react19.default.createElement(Component7, props, children));
    };
    return TransitionGroup4;
  }(react19.default.Component);
  TransitionGroup2.propTypes = {
    component: prop_types151.default.any,
    children: prop_types151.default.node,
    appear: prop_types151.default.bool,
    enter: prop_types151.default.bool,
    exit: prop_types151.default.bool,
    childFactory: prop_types151.default.func
  };
  TransitionGroup2.defaultProps = defaultProps;
  const TransitionGroup_default = TransitionGroup2;

  // node_modules/@material-ui/core/esm/transitions/utils.js
  var reflow = function reflow2(node) {
    return node.scrollTop;
  };
  function getTransitionProps(props, options) {
    var timeout = props.timeout, _props$style = props.style, style13 = _props$style === void 0 ? {} : _props$style;
    return {
      duration: style13.transitionDuration || typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
      delay: style13.transitionDelay
    };
  }

  // node_modules/@material-ui/core/esm/Collapse/Collapse.js
  const React29 = __toModule(require_react());
  const prop_types28 = __toModule(require_prop_types());
  var styles26 = function styles131(theme) {
    return {
      container: {
        height: 0,
        overflow: "hidden",
        transition: theme.transitions.create("height")
      },
      entered: {
        height: "auto",
        overflow: "visible"
      },
      hidden: {
        visibility: "hidden"
      },
      wrapper: {
        display: "flex"
      },
      wrapperInner: {
        width: "100%"
      }
    };
  };
  var Collapse2 = React29.forwardRef(function Collapse6(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$collapsedHeigh = props.collapsedHeight, collapsedHeightProp = _props$collapsedHeigh === void 0 ? "0px" : _props$collapsedHeigh, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style13 = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? duration.standard : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "classes", "className", "collapsedHeight", "component", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var theme = useTheme2();
    var timer = React29.useRef();
    var wrapperRef = React29.useRef(null);
    var autoTransitionDuration = React29.useRef();
    var collapsedHeight = typeof collapsedHeightProp === "number" ? "".concat(collapsedHeightProp, "px") : collapsedHeightProp;
    React29.useEffect(function() {
      return function() {
        clearTimeout(timer.current);
      };
    }, []);
    var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React29.useRef(null);
    var handleRef = useForkRef2(ref, enableStrictModeCompat ? nodeRef : void 0);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref6 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref24 = _slicedToArray(_ref6, 2), node = _ref24[0], isAppearing = _ref24[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      node.style.height = collapsedHeight;
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
      var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
      var _getTransitionProps = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "enter"
      }), transitionDuration = _getTransitionProps.duration;
      if (timeout === "auto") {
        var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
        node.style.transitionDuration = "".concat(duration2, "ms");
        autoTransitionDuration.current = duration2;
      } else {
        node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : "".concat(transitionDuration, "ms");
      }
      node.style.height = "".concat(wrapperHeight, "px");
      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(function(node, isAppearing) {
      node.style.height = "auto";
      if (onEntered) {
        onEntered(node, isAppearing);
      }
    });
    var handleExit = normalizedTransitionCallback(function(node) {
      var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
      node.style.height = "".concat(wrapperHeight, "px");
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    var handleExiting = normalizedTransitionCallback(function(node) {
      var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
      var _getTransitionProps2 = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "exit"
      }), transitionDuration = _getTransitionProps2.duration;
      if (timeout === "auto") {
        var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
        node.style.transitionDuration = "".concat(duration2, "ms");
        autoTransitionDuration.current = duration2;
      } else {
        node.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : "".concat(transitionDuration, "ms");
      }
      node.style.height = collapsedHeight;
      if (onExiting) {
        onExiting(node);
      }
    });
    var addEndListener = function addEndListener2(nodeOrNext, maybeNext) {
      var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
      if (timeout === "auto") {
        timer.current = setTimeout(next, autoTransitionDuration.current || 0);
      }
    };
    return React29.createElement(TransitionComponent, _extends({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      timeout: timeout === "auto" ? null : timeout
    }, other), function(state, childProps) {
      return React29.createElement(Component7, _extends({
        className: clsx_m_default(classes.container, className, {
          entered: classes.entered,
          exited: !inProp && collapsedHeight === "0px" && classes.hidden
        }[state]),
        style: _extends({
          minHeight: collapsedHeight
        }, style13),
        ref: handleRef
      }, childProps), React29.createElement("div", {
        className: classes.wrapper,
        ref: wrapperRef
      }, React29.createElement("div", {
        className: classes.wrapperInner
      }, children)));
    });
  });
  Collapse2.propTypes = {
    children: prop_types28.default.node,
    classes: prop_types28.default.object,
    className: prop_types28.default.string,
    collapsedHeight: prop_types28.default.oneOfType([prop_types28.default.number, prop_types28.default.string]),
    component: prop_types28.default.elementType,
    disableStrictModeCompat: prop_types28.default.bool,
    in: prop_types28.default.bool,
    onEnter: prop_types28.default.func,
    onEntered: prop_types28.default.func,
    onEntering: prop_types28.default.func,
    onExit: prop_types28.default.func,
    onExited: prop_types28.default.func,
    onExiting: prop_types28.default.func,
    style: prop_types28.default.object,
    timeout: prop_types28.default.oneOfType([prop_types28.default.oneOf(["auto"]), prop_types28.default.number, prop_types28.default.shape({
      appear: prop_types28.default.number,
      enter: prop_types28.default.number,
      exit: prop_types28.default.number
    })])
  };
  Collapse2.muiSupportAuto = true;
  const Collapse_default = withStyles_default(styles26, {
    name: "MuiCollapse"
  })(Collapse2);

  // node_modules/@material-ui/core/esm/Paper/Paper.js
  const React88 = __toModule(require_react());
  const prop_types84 = __toModule(require_prop_types());
  var styles78 = function styles131(theme) {
    var elevations = {};
    theme.shadows.forEach(function(shadow, index3) {
      elevations["elevation".concat(index3)] = {
        boxShadow: shadow
      };
    });
    return _extends({
      root: {
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        transition: theme.transitions.create("box-shadow")
      },
      rounded: {
        borderRadius: theme.shape.borderRadius
      },
      outlined: {
        border: "1px solid ".concat(theme.palette.divider)
      }
    }, elevations);
  };
  var Paper8 = React88.forwardRef(function Paper13(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? "elevation" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation", "variant"]);
    return React88.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, variant === "outlined" ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
      ref
    }, other));
  });
  Paper8.propTypes = {
    children: prop_types84.default.node,
    classes: prop_types84.default.object,
    className: prop_types84.default.string,
    component: prop_types84.default.elementType,
    elevation: chainPropTypes(prop_types84.default.number, function(props) {
      var classes = props.classes, elevation = props.elevation;
      if (classes === void 0) {
        return null;
      }
      if (elevation != null && classes["elevation".concat(elevation)] === void 0) {
        return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
      }
      return null;
    }),
    square: prop_types84.default.bool,
    variant: prop_types84.default.oneOf(["elevation", "outlined"])
  };
  const Paper_default = withStyles_default(styles78, {
    name: "MuiPaper"
  })(Paper8);

  // node_modules/@material-ui/core/esm/Accordion/AccordionContext.js
  const React2 = __toModule(require_react());
  var AccordionContext2 = React2.createContext({});
  if (true) {
    AccordionContext2.displayName = "AccordionContext";
  }
  const AccordionContext_default = AccordionContext2;

  // node_modules/@material-ui/core/esm/Accordion/Accordion.js
  const React = __toModule(require_react());
  const react_is = __toModule(require_react_is());
  const prop_types = __toModule(require_prop_types());
  var styles = function styles131(theme) {
    var transition2 = {
      duration: theme.transitions.duration.shortest
    };
    return {
      root: {
        position: "relative",
        transition: theme.transitions.create(["margin"], transition2),
        "&:before": {
          position: "absolute",
          left: 0,
          top: -1,
          right: 0,
          height: 1,
          content: '""',
          opacity: 1,
          backgroundColor: theme.palette.divider,
          transition: theme.transitions.create(["opacity", "background-color"], transition2)
        },
        "&:first-child": {
          "&:before": {
            display: "none"
          }
        },
        "&$expanded": {
          margin: "16px 0",
          "&:first-child": {
            marginTop: 0
          },
          "&:last-child": {
            marginBottom: 0
          },
          "&:before": {
            opacity: 0
          }
        },
        "&$expanded + &": {
          "&:before": {
            display: "none"
          }
        },
        "&$disabled": {
          backgroundColor: theme.palette.action.disabledBackground
        }
      },
      rounded: {
        borderRadius: 0,
        "&:first-child": {
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius
        },
        "&:last-child": {
          borderBottomLeftRadius: theme.shape.borderRadius,
          borderBottomRightRadius: theme.shape.borderRadius,
          "@supports (-ms-ime-align: auto)": {
            borderBottomLeftRadius: 0,
            borderBottomRightRadius: 0
          }
        }
      },
      expanded: {},
      disabled: {}
    };
  };
  var Accordion = React.forwardRef(function Accordion3(props, ref) {
    var childrenProp = props.children, classes = props.classes, className = props.className, _props$defaultExpande = props.defaultExpanded, defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, expandedProp = props.expanded, onChange = props.onChange, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Collapse_default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);
    var _useControlled = useControlled2({
      controlled: expandedProp,
      default: defaultExpanded,
      name: "Accordion",
      state: "expanded"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), expanded = _useControlled2[0], setExpandedState = _useControlled2[1];
    var handleChange = React.useCallback(function(event) {
      setExpandedState(!expanded);
      if (onChange) {
        onChange(event, !expanded);
      }
    }, [expanded, onChange, setExpandedState]);
    var _React$Children$toArr = React.Children.toArray(childrenProp), _React$Children$toArr2 = _toArray(_React$Children$toArr), summary = _React$Children$toArr2[0], children = _React$Children$toArr2.slice(1);
    var contextValue = React.useMemo(function() {
      return {
        expanded,
        disabled,
        toggle: handleChange
      };
    }, [expanded, disabled, handleChange]);
    return React.createElement(Paper_default, _extends({
      className: clsx_m_default(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
      ref,
      square
    }, other), React.createElement(AccordionContext_default.Provider, {
      value: contextValue
    }, summary), React.createElement(TransitionComponent, _extends({
      in: expanded,
      timeout: "auto"
    }, TransitionProps), React.createElement("div", {
      "aria-labelledby": summary.props.id,
      id: summary.props["aria-controls"],
      role: "region"
    }, children)));
  });
  Accordion.propTypes = {
    children: chainPropTypes(prop_types.default.node.isRequired, function(props) {
      var summary = React.Children.toArray(props.children)[0];
      if (react_is.isFragment(summary)) {
        return new Error("Material-UI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.");
      }
      if (!React.isValidElement(summary)) {
        return new Error("Material-UI: Expected the first child of Accordion to be a valid element.");
      }
      return null;
    }),
    classes: prop_types.default.object,
    className: prop_types.default.string,
    defaultExpanded: prop_types.default.bool,
    disabled: prop_types.default.bool,
    expanded: prop_types.default.bool,
    onChange: prop_types.default.func,
    square: prop_types.default.bool,
    TransitionComponent: prop_types.default.elementType,
    TransitionProps: prop_types.default.object
  };
  const Accordion_default = withStyles_default(styles, {
    name: "MuiAccordion"
  })(Accordion);

  // node_modules/@material-ui/core/esm/AccordionActions/AccordionActions.js
  const React3 = __toModule(require_react());
  const prop_types2 = __toModule(require_prop_types());
  var styles2 = {
    root: {
      display: "flex",
      alignItems: "center",
      padding: 8,
      justifyContent: "flex-end"
    },
    spacing: {
      "& > :not(:first-child)": {
        marginLeft: 8
      }
    }
  };
  var AccordionActions = React3.forwardRef(function AccordionActions3(props, ref) {
    var classes = props.classes, className = props.className, _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, other = _objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);
    return React3.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
      ref
    }, other));
  });
  AccordionActions.propTypes = {
    children: prop_types2.default.node,
    classes: prop_types2.default.object,
    className: prop_types2.default.string,
    disableSpacing: prop_types2.default.bool
  };
  const AccordionActions_default = withStyles_default(styles2, {
    name: "MuiAccordionActions"
  })(AccordionActions);

  // node_modules/@material-ui/core/esm/AccordionDetails/AccordionDetails.js
  const React4 = __toModule(require_react());
  const prop_types3 = __toModule(require_prop_types());
  var styles3 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        padding: theme.spacing(1, 2, 2)
      }
    };
  };
  var AccordionDetails = React4.forwardRef(function AccordionDetails3(props, ref) {
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    return React4.createElement("div", _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  AccordionDetails.propTypes = {
    children: prop_types3.default.node,
    classes: prop_types3.default.object,
    className: prop_types3.default.string
  };
  const AccordionDetails_default = withStyles_default(styles3, {
    name: "MuiAccordionDetails"
  })(AccordionDetails);

  // node_modules/@material-ui/core/esm/ButtonBase/Ripple.js
  const React16 = __toModule(require_react());
  const prop_types15 = __toModule(require_prop_types());
  var useEnhancedEffect = typeof window === "undefined" ? React16.useEffect : React16.useLayoutEffect;
  function Ripple(props) {
    var classes = props.classes, _props$pulsate = props.pulsate, pulsate = _props$pulsate === void 0 ? false : _props$pulsate, rippleX = props.rippleX, rippleY = props.rippleY, rippleSize = props.rippleSize, inProp = props.in, _props$onExited = props.onExited, onExited = _props$onExited === void 0 ? function() {
    } : _props$onExited, timeout = props.timeout;
    var _React$useState = React16.useState(false), leaving = _React$useState[0], setLeaving = _React$useState[1];
    var rippleClassName = clsx_m_default(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    var rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    var childClassName = clsx_m_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    var handleExited = useEventCallback2(onExited);
    useEnhancedEffect(function() {
      if (!inProp) {
        setLeaving(true);
        var timeoutId = setTimeout(handleExited, timeout);
        return function() {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [handleExited, inProp, timeout]);
    return React16.createElement("span", {
      className: rippleClassName,
      style: rippleStyles
    }, React16.createElement("span", {
      className: childClassName
    }));
  }
  Ripple.propTypes = {
    classes: prop_types15.default.object.isRequired,
    in: prop_types15.default.bool,
    onExited: prop_types15.default.func,
    pulsate: prop_types15.default.bool,
    rippleSize: prop_types15.default.number,
    rippleX: prop_types15.default.number,
    rippleY: prop_types15.default.number,
    timeout: prop_types15.default.number.isRequired
  };
  const Ripple_default = Ripple;

  // node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js
  const React17 = __toModule(require_react());
  const prop_types16 = __toModule(require_prop_types());
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var styles15 = function styles131(theme) {
    return {
      root: {
        overflow: "hidden",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: "inherit"
      },
      ripple: {
        opacity: 0,
        position: "absolute"
      },
      rippleVisible: {
        opacity: 0.3,
        transform: "scale(1)",
        animation: "$enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
      },
      ripplePulsate: {
        animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
      },
      child: {
        opacity: 1,
        display: "block",
        width: "100%",
        height: "100%",
        borderRadius: "50%",
        backgroundColor: "currentColor"
      },
      childLeaving: {
        opacity: 0,
        animation: "$exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
      },
      childPulsate: {
        position: "absolute",
        left: 0,
        top: 0,
        animation: "$pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite")
      },
      "@keyframes enter": {
        "0%": {
          transform: "scale(0)",
          opacity: 0.1
        },
        "100%": {
          transform: "scale(1)",
          opacity: 0.3
        }
      },
      "@keyframes exit": {
        "0%": {
          opacity: 1
        },
        "100%": {
          opacity: 0
        }
      },
      "@keyframes pulsate": {
        "0%": {
          transform: "scale(1)"
        },
        "50%": {
          transform: "scale(0.92)"
        },
        "100%": {
          transform: "scale(1)"
        }
      }
    };
  };
  var TouchRipple2 = React17.forwardRef(function TouchRipple3(props, ref) {
    var _props$center = props.center, centerProp = _props$center === void 0 ? false : _props$center, classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["center", "classes", "className"]);
    var _React$useState = React17.useState([]), ripples = _React$useState[0], setRipples = _React$useState[1];
    var nextKey = React17.useRef(0);
    var rippleCallback = React17.useRef(null);
    React17.useEffect(function() {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    var ignoringMouseDown = React17.useRef(false);
    var startTimer = React17.useRef(null);
    var startTimerCommit = React17.useRef(null);
    var container = React17.useRef(null);
    React17.useEffect(function() {
      return function() {
        clearTimeout(startTimer.current);
      };
    }, []);
    var startCommit = React17.useCallback(function(params) {
      var pulsate2 = params.pulsate, rippleX = params.rippleX, rippleY = params.rippleY, rippleSize = params.rippleSize, cb = params.cb;
      setRipples(function(oldRipples) {
        return [].concat(_toConsumableArray(oldRipples), [React17.createElement(Ripple_default, {
          key: nextKey.current,
          classes,
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        })]);
      });
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    var start = React17.useCallback(function() {
      var event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var cb = arguments.length > 2 ? arguments[2] : void 0;
      var _options$pulsate = options.pulsate, pulsate2 = _options$pulsate === void 0 ? false : _options$pulsate, _options$center = options.center, center = _options$center === void 0 ? centerProp || options.pulsate : _options$center, _options$fakeElement = options.fakeElement, fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
      if (event.type === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if (event.type === "touchstart") {
        ignoringMouseDown.current = true;
      }
      var element = fakeElement ? null : container.current;
      var rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      var rippleX;
      var rippleY;
      var rippleSize;
      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        var _ref6 = event.touches ? event.touches[0] : event, clientX = _ref6.clientX, clientY = _ref6.clientY;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
      }
      if (event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = function() {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(function() {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    var pulsate = React17.useCallback(function() {
      start({}, {
        pulsate: true
      });
    }, [start]);
    var stop = React17.useCallback(function(event, cb) {
      clearTimeout(startTimer.current);
      if (event.type === "touchend" && startTimerCommit.current) {
        event.persist();
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(function() {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples(function(oldRipples) {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React17.useImperativeHandle(ref, function() {
      return {
        pulsate,
        start,
        stop
      };
    }, [pulsate, start, stop]);
    return React17.createElement("span", _extends({
      className: clsx_m_default(classes.root, className),
      ref: container
    }, other), React17.createElement(TransitionGroup_default, {
      component: null,
      exit: true
    }, ripples));
  });
  TouchRipple2.propTypes = {
    center: prop_types16.default.bool,
    classes: prop_types16.default.object.isRequired,
    className: prop_types16.default.string
  };
  const TouchRipple_default = withStyles_default(styles15, {
    flip: false,
    name: "MuiTouchRipple"
  })(React17.memo(TouchRipple2));

  // node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js
  const React15 = __toModule(require_react());
  const prop_types14 = __toModule(require_prop_types());
  const ReactDOM = __toModule(require_react_dom());
  var styles14 = {
    root: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      "-moz-appearance": "none",
      "-webkit-appearance": "none",
      textDecoration: "none",
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      "&$disabled": {
        pointerEvents: "none",
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    },
    disabled: {},
    focusVisible: {}
  };
  var ButtonBase5 = React15.forwardRef(function ButtonBase17(props, ref) {
    var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, other = _objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);
    var buttonRef = React15.useRef(null);
    function getButtonNode() {
      return ReactDOM.findDOMNode(buttonRef.current);
    }
    var rippleRef = React15.useRef(null);
    var _React$useState = React15.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    var _useIsFocusVisible = useIsFocusVisible2(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    React15.useImperativeHandle(action, function() {
      return {
        focusVisible: function focusVisible2() {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      };
    }, []);
    React15.useEffect(function() {
      if (focusVisible && focusRipple && !disableRipple) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible]);
    function useRippleHandler(rippleAction, eventCallback) {
      var skipRippleAction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : disableTouchRipple;
      return useEventCallback2(function(event) {
        if (eventCallback) {
          eventCallback(event);
        }
        var ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    var handleMouseDown = useRippleHandler("start", onMouseDown);
    var handleDragLeave = useRippleHandler("stop", onDragLeave);
    var handleMouseUp = useRippleHandler("stop", onMouseUp);
    var handleMouseLeave = useRippleHandler("stop", function(event) {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    var handleTouchStart = useRippleHandler("start", onTouchStart);
    var handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    var handleTouchMove = useRippleHandler("stop", onTouchMove);
    var handleBlur = useRippleHandler("stop", function(event) {
      if (focusVisible) {
        onBlurVisible(event);
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    var handleFocus = useEventCallback2(function(event) {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      if (isFocusVisible2(event)) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    var isNonNativeButton = function isNonNativeButton2() {
      var button = getButtonNode();
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    var keydownRef = React15.useRef(false);
    var handleKeyDown2 = useEventCallback2(function(event) {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        event.persist();
        rippleRef.current.stop(event, function() {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    var handleKeyUp = useEventCallback2(function(event) {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        event.persist();
        rippleRef.current.stop(event, function() {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    var ComponentProp = component;
    if (ComponentProp === "button" && other.href) {
      ComponentProp = "a";
    }
    var buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type;
      buttonProps.disabled = disabled;
    } else {
      if (ComponentProp !== "a" || !other.href) {
        buttonProps.role = "button";
      }
      buttonProps["aria-disabled"] = disabled;
    }
    var handleUserRef = useForkRef2(buttonRefProp, ref);
    var handleOwnRef = useForkRef2(focusVisibleRef, buttonRef);
    var handleRef = useForkRef2(handleUserRef, handleOwnRef);
    var _React$useState2 = React15.useState(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
    React15.useEffect(function() {
      setMountedState(true);
    }, []);
    var enableTouchRipple = mountedState && !disableRipple && !disabled;
    if (true) {
      React15.useEffect(function() {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["Material-UI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    return React15.createElement(ComponentProp, _extends({
      className: clsx_m_default(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
      onBlur: handleBlur,
      onClick,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex
    }, buttonProps, other), children, enableTouchRipple ? React15.createElement(TouchRipple_default, _extends({
      ref: rippleRef,
      center: centerRipple
    }, TouchRippleProps)) : null);
  });
  ButtonBase5.propTypes = {
    action: refType_default,
    buttonRef: refType_default,
    centerRipple: prop_types14.default.bool,
    children: prop_types14.default.node,
    classes: prop_types14.default.object,
    className: prop_types14.default.string,
    component: elementTypeAcceptingRef_default,
    disabled: prop_types14.default.bool,
    disableRipple: prop_types14.default.bool,
    disableTouchRipple: prop_types14.default.bool,
    focusRipple: prop_types14.default.bool,
    focusVisibleClassName: prop_types14.default.string,
    href: prop_types14.default.string,
    onBlur: prop_types14.default.func,
    onClick: prop_types14.default.func,
    onDragLeave: prop_types14.default.func,
    onFocus: prop_types14.default.func,
    onFocusVisible: prop_types14.default.func,
    onKeyDown: prop_types14.default.func,
    onKeyUp: prop_types14.default.func,
    onMouseDown: prop_types14.default.func,
    onMouseLeave: prop_types14.default.func,
    onMouseUp: prop_types14.default.func,
    onTouchEnd: prop_types14.default.func,
    onTouchMove: prop_types14.default.func,
    onTouchStart: prop_types14.default.func,
    tabIndex: prop_types14.default.oneOfType([prop_types14.default.number, prop_types14.default.string]),
    TouchRippleProps: prop_types14.default.object,
    type: prop_types14.default.oneOfType([prop_types14.default.oneOf(["button", "reset", "submit"]), prop_types14.default.string])
  };
  const ButtonBase_default = withStyles_default(styles14, {
    name: "MuiButtonBase"
  })(ButtonBase5);

  // node_modules/@material-ui/core/esm/IconButton/IconButton.js
  const React62 = __toModule(require_react());
  const prop_types59 = __toModule(require_prop_types());
  var styles55 = function styles131(theme) {
    return {
      root: {
        textAlign: "center",
        flex: "0 0 auto",
        fontSize: theme.typography.pxToRem(24),
        padding: 12,
        borderRadius: "50%",
        overflow: "visible",
        color: theme.palette.action.active,
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.shortest
        }),
        "&:hover": {
          backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          backgroundColor: "transparent",
          color: theme.palette.action.disabled
        }
      },
      edgeStart: {
        marginLeft: -12,
        "$sizeSmall&": {
          marginLeft: -3
        }
      },
      edgeEnd: {
        marginRight: -12,
        "$sizeSmall&": {
          marginRight: -3
        }
      },
      colorInherit: {
        color: "inherit"
      },
      colorPrimary: {
        color: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      colorSecondary: {
        color: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      disabled: {},
      sizeSmall: {
        padding: 3,
        fontSize: theme.typography.pxToRem(18)
      },
      label: {
        width: "100%",
        display: "flex",
        alignItems: "inherit",
        justifyContent: "inherit"
      }
    };
  };
  var IconButton3 = React62.forwardRef(function IconButton7(props, ref) {
    var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
    return React62.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, className, color2 !== "default" && classes["color".concat(capitalize2(color2))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize2(size))], {
        start: classes.edgeStart,
        end: classes.edgeEnd
      }[edge]),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref
    }, other), React62.createElement("span", {
      className: classes.label
    }, children));
  });
  IconButton3.propTypes = {
    children: chainPropTypes(prop_types59.default.node, function(props) {
      var found = React62.Children.toArray(props.children).some(function(child) {
        return React62.isValidElement(child) && child.props.onClick;
      });
      if (found) {
        return new Error(["Material-UI: You are providing an onClick event listener to a child of a button element.", "Firefox will never trigger the event.", "You should move the onClick listener to the parent button element.", "https://github.com/mui-org/material-ui/issues/13957"].join("\n"));
      }
      return null;
    }),
    classes: prop_types59.default.object.isRequired,
    className: prop_types59.default.string,
    color: prop_types59.default.oneOf(["default", "inherit", "primary", "secondary"]),
    disabled: prop_types59.default.bool,
    disableFocusRipple: prop_types59.default.bool,
    disableRipple: prop_types59.default.bool,
    edge: prop_types59.default.oneOf(["start", "end", false]),
    size: prop_types59.default.oneOf(["small", "medium"])
  };
  const IconButton_default = withStyles_default(styles55, {
    name: "MuiIconButton"
  })(IconButton3);

  // node_modules/@material-ui/core/esm/AccordionSummary/AccordionSummary.js
  const React5 = __toModule(require_react());
  const prop_types4 = __toModule(require_prop_types());
  var styles4 = function styles131(theme) {
    var transition2 = {
      duration: theme.transitions.duration.shortest
    };
    return {
      root: {
        display: "flex",
        minHeight: 8 * 6,
        transition: theme.transitions.create(["min-height", "background-color"], transition2),
        padding: theme.spacing(0, 2),
        "&:hover:not($disabled)": {
          cursor: "pointer"
        },
        "&$expanded": {
          minHeight: 64
        },
        "&$focused": {
          backgroundColor: theme.palette.action.focus
        },
        "&$disabled": {
          opacity: theme.palette.action.disabledOpacity
        }
      },
      expanded: {},
      focused: {},
      disabled: {},
      content: {
        display: "flex",
        flexGrow: 1,
        transition: theme.transitions.create(["margin"], transition2),
        margin: "12px 0",
        "&$expanded": {
          margin: "20px 0"
        }
      },
      expandIcon: {
        transform: "rotate(0deg)",
        transition: theme.transitions.create("transform", transition2),
        "&:hover": {
          backgroundColor: "transparent"
        },
        "&$expanded": {
          transform: "rotate(180deg)"
        }
      }
    };
  };
  var AccordionSummary = React5.forwardRef(function AccordionSummary3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, expandIcon = props.expandIcon, IconButtonProps = props.IconButtonProps, onBlur = props.onBlur, onClick = props.onClick, onFocusVisible = props.onFocusVisible, other = _objectWithoutProperties(props, ["children", "classes", "className", "expandIcon", "IconButtonProps", "onBlur", "onClick", "onFocusVisible"]);
    var _React$useState = React5.useState(false), focusedState = _React$useState[0], setFocusedState = _React$useState[1];
    var handleFocusVisible = function handleFocusVisible2(event) {
      setFocusedState(true);
      if (onFocusVisible) {
        onFocusVisible(event);
      }
    };
    var handleBlur = function handleBlur2(event) {
      setFocusedState(false);
      if (onBlur) {
        onBlur(event);
      }
    };
    var _React$useContext = React5.useContext(AccordionContext_default), _React$useContext$dis = _React$useContext.disabled, disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis, expanded = _React$useContext.expanded, toggle = _React$useContext.toggle;
    var handleChange = function handleChange2(event) {
      if (toggle) {
        toggle(event);
      }
      if (onClick) {
        onClick(event);
      }
    };
    return React5.createElement(ButtonBase_default, _extends({
      focusRipple: false,
      disableRipple: true,
      disabled,
      component: "div",
      "aria-expanded": expanded,
      className: clsx_m_default(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
      onFocusVisible: handleFocusVisible,
      onBlur: handleBlur,
      onClick: handleChange,
      ref
    }, other), React5.createElement("div", {
      className: clsx_m_default(classes.content, expanded && classes.expanded)
    }, children), expandIcon && React5.createElement(IconButton_default, _extends({
      className: clsx_m_default(classes.expandIcon, expanded && classes.expanded),
      edge: "end",
      component: "div",
      tabIndex: null,
      role: null,
      "aria-hidden": true
    }, IconButtonProps), expandIcon));
  });
  AccordionSummary.propTypes = {
    children: prop_types4.default.node,
    classes: prop_types4.default.object,
    className: prop_types4.default.string,
    expandIcon: prop_types4.default.node,
    IconButtonProps: prop_types4.default.object,
    onBlur: prop_types4.default.func,
    onClick: prop_types4.default.func,
    onFocusVisible: prop_types4.default.func
  };
  const AccordionSummary_default = withStyles_default(styles4, {
    name: "MuiAccordionSummary"
  })(AccordionSummary);

  // node_modules/@material-ui/core/esm/AppBar/AppBar.js
  const React6 = __toModule(require_react());
  const prop_types5 = __toModule(require_prop_types());
  var styles5 = function styles131(theme) {
    var backgroundColorDefault = theme.palette.type === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
    return {
      root: {
        display: "flex",
        flexDirection: "column",
        width: "100%",
        boxSizing: "border-box",
        zIndex: theme.zIndex.appBar,
        flexShrink: 0
      },
      positionFixed: {
        position: "fixed",
        top: 0,
        left: "auto",
        right: 0,
        "@media print": {
          position: "absolute"
        }
      },
      positionAbsolute: {
        position: "absolute",
        top: 0,
        left: "auto",
        right: 0
      },
      positionSticky: {
        position: "sticky",
        top: 0,
        left: "auto",
        right: 0
      },
      positionStatic: {
        position: "static"
      },
      positionRelative: {
        position: "relative"
      },
      colorDefault: {
        backgroundColor: backgroundColorDefault,
        color: theme.palette.getContrastText(backgroundColorDefault)
      },
      colorPrimary: {
        backgroundColor: theme.palette.primary.main,
        color: theme.palette.primary.contrastText
      },
      colorSecondary: {
        backgroundColor: theme.palette.secondary.main,
        color: theme.palette.secondary.contrastText
      },
      colorInherit: {
        color: "inherit"
      },
      colorTransparent: {
        backgroundColor: "transparent",
        color: "inherit"
      }
    };
  };
  var AppBar = React6.forwardRef(function AppBar4(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$position = props.position, position2 = _props$position === void 0 ? "fixed" : _props$position, other = _objectWithoutProperties(props, ["classes", "className", "color", "position"]);
    return React6.createElement(Paper_default, _extends({
      square: true,
      component: "header",
      elevation: 4,
      className: clsx_m_default(classes.root, classes["position".concat(capitalize2(position2))], classes["color".concat(capitalize2(color2))], className, position2 === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  AppBar.propTypes = {
    children: prop_types5.default.node,
    classes: prop_types5.default.object,
    className: prop_types5.default.string,
    color: prop_types5.default.oneOf(["default", "inherit", "primary", "secondary", "transparent"]),
    position: prop_types5.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"])
  };
  const AppBar_default = withStyles_default(styles5, {
    name: "MuiAppBar"
  })(AppBar);

  // node_modules/@material-ui/core/esm/internal/svg-icons/Person.js
  const React151 = __toModule(require_react());
  const Person_default = createSvgIcon2(React151.createElement("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), "Person");

  // node_modules/@material-ui/core/esm/Avatar/Avatar.js
  const React7 = __toModule(require_react());
  const prop_types6 = __toModule(require_prop_types());
  var styles6 = function styles131(theme) {
    return {
      root: {
        position: "relative",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0,
        width: 40,
        height: 40,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(20),
        lineHeight: 1,
        borderRadius: "50%",
        overflow: "hidden",
        userSelect: "none"
      },
      colorDefault: {
        color: theme.palette.background.default,
        backgroundColor: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600]
      },
      circle: {},
      rounded: {
        borderRadius: theme.shape.borderRadius
      },
      square: {
        borderRadius: 0
      },
      img: {
        width: "100%",
        height: "100%",
        textAlign: "center",
        objectFit: "cover",
        color: "transparent",
        textIndent: 1e4
      },
      fallback: {
        width: "75%",
        height: "75%"
      }
    };
  };
  function useLoaded(_ref6) {
    var src = _ref6.src, srcSet = _ref6.srcSet;
    var _React$useState = React7.useState(false), loaded = _React$useState[0], setLoaded = _React$useState[1];
    React7.useEffect(function() {
      if (!src && !srcSet) {
        return void 0;
      }
      setLoaded(false);
      var active = true;
      var image = new Image();
      image.src = src;
      image.srcSet = srcSet;
      image.onload = function() {
        if (!active) {
          return;
        }
        setLoaded("loaded");
      };
      image.onerror = function() {
        if (!active) {
          return;
        }
        setLoaded("error");
      };
      return function() {
        active = false;
      };
    }, [src, srcSet]);
    return loaded;
  }
  var Avatar = React7.forwardRef(function Avatar4(props, ref) {
    var alt = props.alt, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, imgProps = props.imgProps, sizes = props.sizes, src = props.src, srcSet = props.srcSet, _props$variant = props.variant, variant = _props$variant === void 0 ? "circle" : _props$variant, other = _objectWithoutProperties(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"]);
    var children = null;
    var loaded = useLoaded({
      src,
      srcSet
    });
    var hasImg = src || srcSet;
    var hasImgNotFailing = hasImg && loaded !== "error";
    if (hasImgNotFailing) {
      children = React7.createElement("img", _extends({
        alt,
        src,
        srcSet,
        sizes,
        className: classes.img
      }, imgProps));
    } else if (childrenProp != null) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = React7.createElement(Person_default, {
        className: classes.fallback
      });
    }
    return React7.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),
      ref
    }, other), children);
  });
  Avatar.propTypes = {
    alt: prop_types6.default.string,
    children: prop_types6.default.node,
    classes: prop_types6.default.object,
    className: prop_types6.default.string,
    component: prop_types6.default.elementType,
    imgProps: prop_types6.default.object,
    sizes: prop_types6.default.string,
    src: prop_types6.default.string,
    srcSet: prop_types6.default.string,
    variant: prop_types6.default.oneOf(["circle", "rounded", "square"])
  };
  const Avatar_default = withStyles_default(styles6, {
    name: "MuiAvatar"
  })(Avatar);

  // node_modules/@material-ui/core/esm/Fade/Fade.js
  const React45 = __toModule(require_react());
  const prop_types43 = __toModule(require_prop_types());
  var styles41 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var defaultTimeout = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Fade3 = React45.forwardRef(function Fade5(props, ref) {
    var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style13 = props.style, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "TransitionComponent", "timeout"]);
    var theme = useTheme2();
    var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React45.useRef(null);
    var foreignRef = useForkRef2(children.ref, ref);
    var handleRef = useForkRef2(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref6 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref24 = _slicedToArray(_ref6, 2), node = _ref24[0], isAppearing = _ref24[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      reflow(node);
      var transitionProps = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var transitionProps = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    return React45.createElement(TransitionComponent, _extends({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      timeout
    }, other), function(state, childProps) {
      return React45.cloneElement(children, _extends({
        style: _extends({
          opacity: 0,
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles41[state], style13, children.props.style),
        ref: handleRef
      }, childProps));
    });
  });
  Fade3.propTypes = {
    children: prop_types43.default.element,
    disableStrictModeCompat: prop_types43.default.bool,
    in: prop_types43.default.bool,
    onEnter: prop_types43.default.func,
    onEntered: prop_types43.default.func,
    onEntering: prop_types43.default.func,
    onExit: prop_types43.default.func,
    onExited: prop_types43.default.func,
    onExiting: prop_types43.default.func,
    style: prop_types43.default.object,
    timeout: prop_types43.default.oneOfType([prop_types43.default.number, prop_types43.default.shape({
      appear: prop_types43.default.number,
      enter: prop_types43.default.number,
      exit: prop_types43.default.number
    })])
  };
  const Fade_default = Fade3;

  // node_modules/@material-ui/core/esm/Backdrop/Backdrop.js
  const React8 = __toModule(require_react());
  const prop_types7 = __toModule(require_prop_types());
  var styles7 = {
    root: {
      zIndex: -1,
      position: "fixed",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    },
    invisible: {
      backgroundColor: "transparent"
    }
  };
  var Backdrop = React8.forwardRef(function Backdrop5(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, transitionDuration = props.transitionDuration, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Fade_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "classes", "className", "invisible", "open", "transitionDuration", "TransitionComponent"]);
    return React8.createElement(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other), React8.createElement("div", {
      className: clsx_m_default(classes.root, className, invisible && classes.invisible),
      "aria-hidden": true,
      ref
    }, children));
  });
  Backdrop.propTypes = {
    children: prop_types7.default.node,
    classes: prop_types7.default.object,
    className: prop_types7.default.string,
    invisible: prop_types7.default.bool,
    open: prop_types7.default.bool.isRequired,
    transitionDuration: prop_types7.default.oneOfType([prop_types7.default.number, prop_types7.default.shape({
      appear: prop_types7.default.number,
      enter: prop_types7.default.number,
      exit: prop_types7.default.number
    })])
  };
  const Backdrop_default = withStyles_default(styles7, {
    name: "MuiBackdrop"
  })(Backdrop);

  // node_modules/@material-ui/core/esm/Badge/Badge.js
  const React9 = __toModule(require_react());
  const prop_types8 = __toModule(require_prop_types());
  var RADIUS_STANDARD = 10;
  var RADIUS_DOT = 4;
  var styles8 = function styles131(theme) {
    return {
      root: {
        position: "relative",
        display: "inline-flex",
        verticalAlign: "middle",
        flexShrink: 0
      },
      badge: {
        display: "flex",
        flexDirection: "row",
        flexWrap: "wrap",
        justifyContent: "center",
        alignContent: "center",
        alignItems: "center",
        position: "absolute",
        boxSizing: "border-box",
        fontFamily: theme.typography.fontFamily,
        fontWeight: theme.typography.fontWeightMedium,
        fontSize: theme.typography.pxToRem(12),
        minWidth: RADIUS_STANDARD * 2,
        lineHeight: 1,
        padding: "0 6px",
        height: RADIUS_STANDARD * 2,
        borderRadius: RADIUS_STANDARD,
        zIndex: 1,
        transition: theme.transitions.create("transform", {
          easing: theme.transitions.easing.easeInOut,
          duration: theme.transitions.duration.enteringScreen
        })
      },
      colorPrimary: {
        backgroundColor: theme.palette.primary.main,
        color: theme.palette.primary.contrastText
      },
      colorSecondary: {
        backgroundColor: theme.palette.secondary.main,
        color: theme.palette.secondary.contrastText
      },
      colorError: {
        backgroundColor: theme.palette.error.main,
        color: theme.palette.error.contrastText
      },
      dot: {
        borderRadius: RADIUS_DOT,
        height: RADIUS_DOT * 2,
        minWidth: RADIUS_DOT * 2,
        padding: 0
      },
      anchorOriginTopRightRectangle: {
        top: 0,
        right: 0,
        transform: "scale(1) translate(50%, -50%)",
        transformOrigin: "100% 0%",
        "&$invisible": {
          transform: "scale(0) translate(50%, -50%)"
        }
      },
      anchorOriginBottomRightRectangle: {
        bottom: 0,
        right: 0,
        transform: "scale(1) translate(50%, 50%)",
        transformOrigin: "100% 100%",
        "&$invisible": {
          transform: "scale(0) translate(50%, 50%)"
        }
      },
      anchorOriginTopLeftRectangle: {
        top: 0,
        left: 0,
        transform: "scale(1) translate(-50%, -50%)",
        transformOrigin: "0% 0%",
        "&$invisible": {
          transform: "scale(0) translate(-50%, -50%)"
        }
      },
      anchorOriginBottomLeftRectangle: {
        bottom: 0,
        left: 0,
        transform: "scale(1) translate(-50%, 50%)",
        transformOrigin: "0% 100%",
        "&$invisible": {
          transform: "scale(0) translate(-50%, 50%)"
        }
      },
      anchorOriginTopRightCircle: {
        top: "14%",
        right: "14%",
        transform: "scale(1) translate(50%, -50%)",
        transformOrigin: "100% 0%",
        "&$invisible": {
          transform: "scale(0) translate(50%, -50%)"
        }
      },
      anchorOriginBottomRightCircle: {
        bottom: "14%",
        right: "14%",
        transform: "scale(1) translate(50%, 50%)",
        transformOrigin: "100% 100%",
        "&$invisible": {
          transform: "scale(0) translate(50%, 50%)"
        }
      },
      anchorOriginTopLeftCircle: {
        top: "14%",
        left: "14%",
        transform: "scale(1) translate(-50%, -50%)",
        transformOrigin: "0% 0%",
        "&$invisible": {
          transform: "scale(0) translate(-50%, -50%)"
        }
      },
      anchorOriginBottomLeftCircle: {
        bottom: "14%",
        left: "14%",
        transform: "scale(1) translate(-50%, 50%)",
        transformOrigin: "0% 100%",
        "&$invisible": {
          transform: "scale(0) translate(-50%, 50%)"
        }
      },
      invisible: {
        transition: theme.transitions.create("transform", {
          easing: theme.transitions.easing.easeInOut,
          duration: theme.transitions.duration.leavingScreen
        })
      }
    };
  };
  var Badge = React9.forwardRef(function Badge3(props, ref) {
    var _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: "top",
      horizontal: "right"
    } : _props$anchorOrigin, badgeContent = props.badgeContent, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, ComponentProp = _props$component === void 0 ? "span" : _props$component, invisibleProp = props.invisible, _props$max = props.max, max = _props$max === void 0 ? 99 : _props$max, _props$overlap = props.overlap, overlap = _props$overlap === void 0 ? "rectangle" : _props$overlap, _props$showZero = props.showZero, showZero = _props$showZero === void 0 ? false : _props$showZero, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["anchorOrigin", "badgeContent", "children", "classes", "className", "color", "component", "invisible", "max", "overlap", "showZero", "variant"]);
    var invisible = invisibleProp;
    if (invisibleProp == null && (badgeContent === 0 && !showZero || badgeContent == null && variant !== "dot")) {
      invisible = true;
    }
    var displayValue = "";
    if (variant !== "dot") {
      displayValue = badgeContent > max ? "".concat(max, "+") : badgeContent;
    }
    return React9.createElement(ComponentProp, _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other), children, React9.createElement("span", {
      className: clsx_m_default(classes.badge, classes["".concat(anchorOrigin.horizontal).concat(capitalize2(anchorOrigin.vertical), "}")], classes["anchorOrigin".concat(capitalize2(anchorOrigin.vertical)).concat(capitalize2(anchorOrigin.horizontal)).concat(capitalize2(overlap))], color2 !== "default" && classes["color".concat(capitalize2(color2))], invisible && classes.invisible, variant === "dot" && classes.dot)
    }, displayValue));
  });
  Badge.propTypes = {
    anchorOrigin: prop_types8.default.shape({
      horizontal: prop_types8.default.oneOf(["left", "right"]).isRequired,
      vertical: prop_types8.default.oneOf(["bottom", "top"]).isRequired
    }),
    badgeContent: prop_types8.default.node,
    children: prop_types8.default.node,
    classes: prop_types8.default.object,
    className: prop_types8.default.string,
    color: prop_types8.default.oneOf(["default", "error", "primary", "secondary"]),
    component: prop_types8.default.elementType,
    invisible: prop_types8.default.bool,
    max: prop_types8.default.number,
    overlap: prop_types8.default.oneOf(["circle", "rectangle"]),
    showZero: prop_types8.default.bool,
    variant: prop_types8.default.oneOf(["dot", "standard"])
  };
  const Badge_default = withStyles_default(styles8, {
    name: "MuiBadge"
  })(Badge);

  // node_modules/@material-ui/core/esm/BottomNavigation/BottomNavigation.js
  const React10 = __toModule(require_react());
  const react_is2 = __toModule(require_react_is());
  const prop_types9 = __toModule(require_prop_types());
  var styles9 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        justifyContent: "center",
        height: 56,
        backgroundColor: theme.palette.background.paper
      }
    };
  };
  var BottomNavigation = React10.forwardRef(function BottomNavigation3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, onChange = props.onChange, _props$showLabels = props.showLabels, showLabels = _props$showLabels === void 0 ? false : _props$showLabels, value = props.value, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "onChange", "showLabels", "value"]);
    return React10.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other), React10.Children.map(children, function(child, childIndex) {
      if (!React10.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is2.isFragment(child)) {
          console.error(["Material-UI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var childValue = child.props.value === void 0 ? childIndex : child.props.value;
      return React10.cloneElement(child, {
        selected: childValue === value,
        showLabel: child.props.showLabel !== void 0 ? child.props.showLabel : showLabels,
        value: childValue,
        onChange
      });
    }));
  });
  BottomNavigation.propTypes = {
    children: prop_types9.default.node,
    classes: prop_types9.default.object,
    className: prop_types9.default.string,
    component: prop_types9.default.elementType,
    onChange: prop_types9.default.func,
    showLabels: prop_types9.default.bool,
    value: prop_types9.default.any
  };
  const BottomNavigation_default = withStyles_default(styles9, {
    name: "MuiBottomNavigation"
  })(BottomNavigation);

  // node_modules/@material-ui/core/esm/BottomNavigationAction/BottomNavigationAction.js
  const React11 = __toModule(require_react());
  const prop_types10 = __toModule(require_prop_types());
  var styles10 = function styles131(theme) {
    return {
      root: {
        transition: theme.transitions.create(["color", "padding-top"], {
          duration: theme.transitions.duration.short
        }),
        padding: "6px 12px 8px",
        minWidth: 80,
        maxWidth: 168,
        color: theme.palette.text.secondary,
        flex: "1",
        "&$iconOnly": {
          paddingTop: 16
        },
        "&$selected": {
          paddingTop: 6,
          color: theme.palette.primary.main
        }
      },
      selected: {},
      iconOnly: {},
      wrapper: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: "100%",
        flexDirection: "column"
      },
      label: {
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(12),
        opacity: 1,
        transition: "font-size 0.2s, opacity 0.2s",
        transitionDelay: "0.1s",
        "&$iconOnly": {
          opacity: 0,
          transitionDelay: "0s"
        },
        "&$selected": {
          fontSize: theme.typography.pxToRem(14)
        }
      }
    };
  };
  var BottomNavigationAction = React11.forwardRef(function BottomNavigationAction3(props, ref) {
    var classes = props.classes, className = props.className, icon = props.icon, label = props.label, onChange = props.onChange, onClick = props.onClick, selected = props.selected, showLabel = props.showLabel, value = props.value, other = _objectWithoutProperties(props, ["classes", "className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"]);
    var handleChange = function handleChange2(event) {
      if (onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    return React11.createElement(ButtonBase_default, _extends({
      ref,
      className: clsx_m_default(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),
      focusRipple: true,
      onClick: handleChange
    }, other), React11.createElement("span", {
      className: classes.wrapper
    }, icon, React11.createElement("span", {
      className: clsx_m_default(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)
    }, label)));
  });
  BottomNavigationAction.propTypes = {
    children: unsupportedProp2,
    classes: prop_types10.default.object,
    className: prop_types10.default.string,
    icon: prop_types10.default.node,
    label: prop_types10.default.node,
    onChange: prop_types10.default.func,
    onClick: prop_types10.default.func,
    selected: prop_types10.default.bool,
    showLabel: prop_types10.default.bool,
    value: prop_types10.default.any
  };
  const BottomNavigationAction_default = withStyles_default(styles10, {
    name: "MuiBottomNavigationAction"
  })(BottomNavigationAction);

  // node_modules/@material-ui/core/esm/Box/Box.js
  var styleFunction = css_default(compose_default(borders_default, display_default, flexbox_default, grid_default, positions_default, palette_default, shadows_default, sizing_default, spacing_default, typography_default));
  var Box = styled_default("div")(styleFunction, {
    name: "MuiBox"
  });
  const Box_default = Box;

  // node_modules/@material-ui/core/esm/Typography/Typography.js
  const React137 = __toModule(require_react());
  const prop_types128 = __toModule(require_prop_types());
  var styles118 = function styles131(theme) {
    return {
      root: {
        margin: 0
      },
      body2: theme.typography.body2,
      body1: theme.typography.body1,
      caption: theme.typography.caption,
      button: theme.typography.button,
      h1: theme.typography.h1,
      h2: theme.typography.h2,
      h3: theme.typography.h3,
      h4: theme.typography.h4,
      h5: theme.typography.h5,
      h6: theme.typography.h6,
      subtitle1: theme.typography.subtitle1,
      subtitle2: theme.typography.subtitle2,
      overline: theme.typography.overline,
      srOnly: {
        position: "absolute",
        height: 1,
        width: 1,
        overflow: "hidden"
      },
      alignLeft: {
        textAlign: "left"
      },
      alignCenter: {
        textAlign: "center"
      },
      alignRight: {
        textAlign: "right"
      },
      alignJustify: {
        textAlign: "justify"
      },
      noWrap: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      gutterBottom: {
        marginBottom: "0.35em"
      },
      paragraph: {
        marginBottom: 16
      },
      colorInherit: {
        color: "inherit"
      },
      colorPrimary: {
        color: theme.palette.primary.main
      },
      colorSecondary: {
        color: theme.palette.secondary.main
      },
      colorTextPrimary: {
        color: theme.palette.text.primary
      },
      colorTextSecondary: {
        color: theme.palette.text.secondary
      },
      colorError: {
        color: theme.palette.error.main
      },
      displayInline: {
        display: "inline"
      },
      displayBlock: {
        display: "block"
      }
    };
  };
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p"
  };
  var Typography11 = React137.forwardRef(function Typography15(props, ref) {
    var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "initial" : _props$color, component = props.component, _props$display = props.display, display2 = _props$display === void 0 ? "initial" : _props$display, _props$gutterBottom = props.gutterBottom, gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom, _props$noWrap = props.noWrap, noWrap = _props$noWrap === void 0 ? false : _props$noWrap, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? false : _props$paragraph, _props$variant = props.variant, variant = _props$variant === void 0 ? "body1" : _props$variant, _props$variantMapping = props.variantMapping, variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping, other = _objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);
    var Component7 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    return React137.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, variant !== "inherit" && classes[variant], color2 !== "initial" && classes["color".concat(capitalize2(color2))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== "inherit" && classes["align".concat(capitalize2(align))], display2 !== "initial" && classes["display".concat(capitalize2(display2))]),
      ref
    }, other));
  });
  Typography11.propTypes = {
    align: prop_types128.default.oneOf(["inherit", "left", "center", "right", "justify"]),
    children: prop_types128.default.node,
    classes: prop_types128.default.object.isRequired,
    className: prop_types128.default.string,
    color: prop_types128.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
    component: prop_types128.default.elementType,
    display: prop_types128.default.oneOf(["initial", "block", "inline"]),
    gutterBottom: prop_types128.default.bool,
    noWrap: prop_types128.default.bool,
    paragraph: prop_types128.default.bool,
    variant: prop_types128.default.oneOf(["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline", "srOnly", "inherit"]),
    variantMapping: prop_types128.default.object
  };
  const Typography_default = withStyles_default(styles118, {
    name: "MuiTypography"
  })(Typography11);

  // node_modules/@material-ui/core/esm/internal/svg-icons/MoreHoriz.js
  const React150 = __toModule(require_react());
  const MoreHoriz_default = createSvgIcon2(React150.createElement("path", {
    d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreHoriz");

  // node_modules/@material-ui/core/esm/Breadcrumbs/BreadcrumbCollapsed.js
  const React12 = __toModule(require_react());
  const prop_types11 = __toModule(require_prop_types());
  var styles11 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        marginLeft: theme.spacing(0.5),
        marginRight: theme.spacing(0.5),
        backgroundColor: theme.palette.grey[100],
        color: theme.palette.grey[700],
        borderRadius: 2,
        cursor: "pointer",
        "&:hover, &:focus": {
          backgroundColor: theme.palette.grey[200]
        },
        "&:active": {
          boxShadow: theme.shadows[0],
          backgroundColor: emphasize(theme.palette.grey[200], 0.12)
        }
      },
      icon: {
        width: 24,
        height: 16
      }
    };
  };
  function BreadcrumbCollapsed(props) {
    var classes = props.classes, other = _objectWithoutProperties(props, ["classes"]);
    return React12.createElement(ButtonBase_default, _extends({
      component: "li",
      className: classes.root,
      focusRipple: true
    }, other), React12.createElement(MoreHoriz_default, {
      className: classes.icon
    }));
  }
  BreadcrumbCollapsed.propTypes = {
    classes: prop_types11.default.object.isRequired
  };
  const BreadcrumbCollapsed_default = withStyles_default(styles11, {
    name: "PrivateBreadcrumbCollapsed"
  })(BreadcrumbCollapsed);

  // node_modules/@material-ui/core/esm/Breadcrumbs/Breadcrumbs.js
  const React13 = __toModule(require_react());
  const react_is3 = __toModule(require_react_is());
  const prop_types12 = __toModule(require_prop_types());
  var styles12 = {
    root: {},
    ol: {
      display: "flex",
      flexWrap: "wrap",
      alignItems: "center",
      padding: 0,
      margin: 0,
      listStyle: "none"
    },
    li: {},
    separator: {
      display: "flex",
      userSelect: "none",
      marginLeft: 8,
      marginRight: 8
    }
  };
  function insertSeparators(items, className, separator) {
    return items.reduce(function(acc, current, index3) {
      if (index3 < items.length - 1) {
        acc = acc.concat(current, React13.createElement("li", {
          "aria-hidden": true,
          key: "separator-".concat(index3),
          className
        }, separator));
      } else {
        acc.push(current);
      }
      return acc;
    }, []);
  }
  var Breadcrumbs = React13.forwardRef(function Breadcrumbs3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "nav" : _props$component, _props$expandText = props.expandText, expandText = _props$expandText === void 0 ? "Show path" : _props$expandText, _props$itemsAfterColl = props.itemsAfterCollapse, itemsAfterCollapse = _props$itemsAfterColl === void 0 ? 1 : _props$itemsAfterColl, _props$itemsBeforeCol = props.itemsBeforeCollapse, itemsBeforeCollapse = _props$itemsBeforeCol === void 0 ? 1 : _props$itemsBeforeCol, _props$maxItems = props.maxItems, maxItems = _props$maxItems === void 0 ? 8 : _props$maxItems, _props$separator = props.separator, separator = _props$separator === void 0 ? "/" : _props$separator, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"]);
    var _React$useState = React13.useState(false), expanded = _React$useState[0], setExpanded = _React$useState[1];
    var renderItemsBeforeAndAfter = function renderItemsBeforeAndAfter2(allItems2) {
      var handleClickExpand = function handleClickExpand2(event) {
        setExpanded(true);
        var focusable = event.currentTarget.parentNode.querySelector("a[href],button,[tabindex]");
        if (focusable) {
          focusable.focus();
        }
      };
      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems2.length) {
        if (true) {
          console.error(["Material-UI: You have provided an invalid combination of props to the Breadcrumbs.", "itemsAfterCollapse={".concat(itemsAfterCollapse, "} + itemsBeforeCollapse={").concat(itemsBeforeCollapse, "} >= maxItems={").concat(maxItems, "}")].join("\n"));
        }
        return allItems2;
      }
      return [].concat(_toConsumableArray(allItems2.slice(0, itemsBeforeCollapse)), [React13.createElement(BreadcrumbCollapsed_default, {
        "aria-label": expandText,
        key: "ellipsis",
        onClick: handleClickExpand
      })], _toConsumableArray(allItems2.slice(allItems2.length - itemsAfterCollapse, allItems2.length)));
    };
    var allItems = React13.Children.toArray(children).filter(function(child) {
      if (true) {
        if (react_is3.isFragment(child)) {
          console.error(["Material-UI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return React13.isValidElement(child);
    }).map(function(child, index3) {
      return React13.createElement("li", {
        className: classes.li,
        key: "child-".concat(index3)
      }, child);
    });
    return React13.createElement(Typography_default, _extends({
      ref,
      component: Component7,
      color: "textSecondary",
      className: clsx_m_default(classes.root, className)
    }, other), React13.createElement("ol", {
      className: classes.ol
    }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)));
  });
  Breadcrumbs.propTypes = {
    children: prop_types12.default.node,
    classes: prop_types12.default.object,
    className: prop_types12.default.string,
    component: prop_types12.default.elementType,
    expandText: prop_types12.default.string,
    itemsAfterCollapse: prop_types12.default.number,
    itemsBeforeCollapse: prop_types12.default.number,
    maxItems: prop_types12.default.number,
    separator: prop_types12.default.node
  };
  const Breadcrumbs_default = withStyles_default(styles12, {
    name: "MuiBreadcrumbs"
  })(Breadcrumbs);

  // node_modules/@material-ui/core/esm/Button/Button.js
  const React14 = __toModule(require_react());
  const prop_types13 = __toModule(require_prop_types());
  var styles13 = function styles131(theme) {
    return {
      root: _extends({}, theme.typography.button, {
        boxSizing: "border-box",
        minWidth: 64,
        padding: "6px 16px",
        borderRadius: theme.shape.borderRadius,
        color: theme.palette.text.primary,
        transition: theme.transitions.create(["background-color", "box-shadow", "border"], {
          duration: theme.transitions.duration.short
        }),
        "&:hover": {
          textDecoration: "none",
          backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          },
          "&$disabled": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }),
      label: {
        width: "100%",
        display: "inherit",
        alignItems: "inherit",
        justifyContent: "inherit"
      },
      text: {
        padding: "6px 8px"
      },
      textPrimary: {
        color: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      textSecondary: {
        color: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      outlined: {
        padding: "5px 15px",
        border: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
        "&$disabled": {
          border: "1px solid ".concat(theme.palette.action.disabledBackground)
        }
      },
      outlinedPrimary: {
        color: theme.palette.primary.main,
        border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
        "&:hover": {
          border: "1px solid ".concat(theme.palette.primary.main),
          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      outlinedSecondary: {
        color: theme.palette.secondary.main,
        border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
        "&:hover": {
          border: "1px solid ".concat(theme.palette.secondary.main),
          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          border: "1px solid ".concat(theme.palette.action.disabled)
        }
      },
      contained: {
        color: theme.palette.getContrastText(theme.palette.grey[300]),
        backgroundColor: theme.palette.grey[300],
        boxShadow: theme.shadows[2],
        "&:hover": {
          backgroundColor: theme.palette.grey.A100,
          boxShadow: theme.shadows[4],
          "@media (hover: none)": {
            boxShadow: theme.shadows[2],
            backgroundColor: theme.palette.grey[300]
          },
          "&$disabled": {
            backgroundColor: theme.palette.action.disabledBackground
          }
        },
        "&$focusVisible": {
          boxShadow: theme.shadows[6]
        },
        "&:active": {
          boxShadow: theme.shadows[8]
        },
        "&$disabled": {
          color: theme.palette.action.disabled,
          boxShadow: theme.shadows[0],
          backgroundColor: theme.palette.action.disabledBackground
        }
      },
      containedPrimary: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: theme.palette.primary.dark,
          "@media (hover: none)": {
            backgroundColor: theme.palette.primary.main
          }
        }
      },
      containedSecondary: {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: theme.palette.secondary.dark,
          "@media (hover: none)": {
            backgroundColor: theme.palette.secondary.main
          }
        }
      },
      disableElevation: {
        boxShadow: "none",
        "&:hover": {
          boxShadow: "none"
        },
        "&$focusVisible": {
          boxShadow: "none"
        },
        "&:active": {
          boxShadow: "none"
        },
        "&$disabled": {
          boxShadow: "none"
        }
      },
      focusVisible: {},
      disabled: {},
      colorInherit: {
        color: "inherit",
        borderColor: "currentColor"
      },
      textSizeSmall: {
        padding: "4px 5px",
        fontSize: theme.typography.pxToRem(13)
      },
      textSizeLarge: {
        padding: "8px 11px",
        fontSize: theme.typography.pxToRem(15)
      },
      outlinedSizeSmall: {
        padding: "3px 9px",
        fontSize: theme.typography.pxToRem(13)
      },
      outlinedSizeLarge: {
        padding: "7px 21px",
        fontSize: theme.typography.pxToRem(15)
      },
      containedSizeSmall: {
        padding: "4px 10px",
        fontSize: theme.typography.pxToRem(13)
      },
      containedSizeLarge: {
        padding: "8px 22px",
        fontSize: theme.typography.pxToRem(15)
      },
      sizeSmall: {},
      sizeLarge: {},
      fullWidth: {
        width: "100%"
      },
      startIcon: {
        display: "inherit",
        marginRight: 8,
        marginLeft: -4,
        "&$iconSizeSmall": {
          marginLeft: -2
        }
      },
      endIcon: {
        display: "inherit",
        marginRight: -4,
        marginLeft: 8,
        "&$iconSizeSmall": {
          marginRight: -2
        }
      },
      iconSizeSmall: {
        "& > *:first-child": {
          fontSize: 18
        }
      },
      iconSizeMedium: {
        "& > *:first-child": {
          fontSize: 20
        }
      },
      iconSizeLarge: {
        "& > *:first-child": {
          fontSize: 22
        }
      }
    };
  };
  var Button = React14.forwardRef(function Button5(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, endIconProp = props.endIcon, focusVisibleClassName = props.focusVisibleClassName, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, startIconProp = props.startIcon, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"]);
    var startIcon = startIconProp && React14.createElement("span", {
      className: clsx_m_default(classes.startIcon, classes["iconSize".concat(capitalize2(size))])
    }, startIconProp);
    var endIcon = endIconProp && React14.createElement("span", {
      className: clsx_m_default(classes.endIcon, classes["iconSize".concat(capitalize2(size))])
    }, endIconProp);
    return React14.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, classes[variant], className, color2 === "inherit" ? classes.colorInherit : color2 !== "default" && classes["".concat(variant).concat(capitalize2(color2))], size !== "medium" && [classes["".concat(variant, "Size").concat(capitalize2(size))], classes["size".concat(capitalize2(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other), React14.createElement("span", {
      className: classes.label
    }, startIcon, children, endIcon));
  });
  Button.propTypes = {
    children: prop_types13.default.node,
    classes: prop_types13.default.object,
    className: prop_types13.default.string,
    color: prop_types13.default.oneOf(["default", "inherit", "primary", "secondary"]),
    component: prop_types13.default.elementType,
    disabled: prop_types13.default.bool,
    disableElevation: prop_types13.default.bool,
    disableFocusRipple: prop_types13.default.bool,
    disableRipple: prop_types13.default.bool,
    endIcon: prop_types13.default.node,
    focusVisibleClassName: prop_types13.default.string,
    fullWidth: prop_types13.default.bool,
    href: prop_types13.default.string,
    size: prop_types13.default.oneOf(["large", "medium", "small"]),
    startIcon: prop_types13.default.node,
    type: prop_types13.default.oneOfType([prop_types13.default.oneOf(["button", "reset", "submit"]), prop_types13.default.string]),
    variant: prop_types13.default.oneOf(["contained", "outlined", "text"])
  };
  const Button_default = withStyles_default(styles13, {
    name: "MuiButton"
  })(Button);

  // node_modules/@material-ui/core/esm/ButtonGroup/ButtonGroup.js
  const React18 = __toModule(require_react());
  const react_is4 = __toModule(require_react_is());
  const prop_types17 = __toModule(require_prop_types());
  Button_default.styles;
  var styles16 = function styles131(theme) {
    return {
      root: {
        display: "inline-flex",
        borderRadius: theme.shape.borderRadius
      },
      contained: {
        boxShadow: theme.shadows[2]
      },
      disableElevation: {
        boxShadow: "none"
      },
      disabled: {},
      fullWidth: {
        width: "100%"
      },
      vertical: {
        flexDirection: "column"
      },
      grouped: {
        minWidth: 40
      },
      groupedHorizontal: {
        "&:not(:first-child)": {
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0
        },
        "&:not(:last-child)": {
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0
        }
      },
      groupedVertical: {
        "&:not(:first-child)": {
          borderTopRightRadius: 0,
          borderTopLeftRadius: 0
        },
        "&:not(:last-child)": {
          borderBottomRightRadius: 0,
          borderBottomLeftRadius: 0
        }
      },
      groupedText: {},
      groupedTextHorizontal: {
        "&:not(:last-child)": {
          borderRight: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)")
        }
      },
      groupedTextVertical: {
        "&:not(:last-child)": {
          borderBottom: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)")
        }
      },
      groupedTextPrimary: {
        "&:not(:last-child)": {
          borderColor: fade(theme.palette.primary.main, 0.5)
        }
      },
      groupedTextSecondary: {
        "&:not(:last-child)": {
          borderColor: fade(theme.palette.secondary.main, 0.5)
        }
      },
      groupedOutlined: {},
      groupedOutlinedHorizontal: {
        "&:not(:first-child)": {
          marginLeft: -1
        },
        "&:not(:last-child)": {
          borderRightColor: "transparent"
        }
      },
      groupedOutlinedVertical: {
        "&:not(:first-child)": {
          marginTop: -1
        },
        "&:not(:last-child)": {
          borderBottomColor: "transparent"
        }
      },
      groupedOutlinedPrimary: {
        "&:hover": {
          borderColor: theme.palette.primary.main
        }
      },
      groupedOutlinedSecondary: {
        "&:hover": {
          borderColor: theme.palette.secondary.main
        }
      },
      groupedContained: {
        boxShadow: "none"
      },
      groupedContainedHorizontal: {
        "&:not(:last-child)": {
          borderRight: "1px solid ".concat(theme.palette.grey[400]),
          "&$disabled": {
            borderRight: "1px solid ".concat(theme.palette.action.disabled)
          }
        }
      },
      groupedContainedVertical: {
        "&:not(:last-child)": {
          borderBottom: "1px solid ".concat(theme.palette.grey[400]),
          "&$disabled": {
            borderBottom: "1px solid ".concat(theme.palette.action.disabled)
          }
        }
      },
      groupedContainedPrimary: {
        "&:not(:last-child)": {
          borderColor: theme.palette.primary.dark
        }
      },
      groupedContainedSecondary: {
        "&:not(:last-child)": {
          borderColor: theme.palette.secondary.dark
        }
      }
    };
  };
  var ButtonGroup = React18.forwardRef(function ButtonGroup3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "outlined" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"]);
    var buttonClassName = clsx_m_default(classes.grouped, classes["grouped".concat(capitalize2(orientation))], classes["grouped".concat(capitalize2(variant))], classes["grouped".concat(capitalize2(variant)).concat(capitalize2(orientation))], classes["grouped".concat(capitalize2(variant)).concat(color2 !== "default" ? capitalize2(color2) : "")], disabled && classes.disabled);
    return React18.createElement(Component7, _extends({
      role: "group",
      className: clsx_m_default(classes.root, className, fullWidth && classes.fullWidth, disableElevation && classes.disableElevation, variant === "contained" && classes.contained, orientation === "vertical" && classes.vertical),
      ref
    }, other), React18.Children.map(children, function(child) {
      if (!React18.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is4.isFragment(child)) {
          console.error(["Material-UI: The ButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return React18.cloneElement(child, {
        className: clsx_m_default(buttonClassName, child.props.className),
        color: child.props.color || color2,
        disabled: child.props.disabled || disabled,
        disableElevation: child.props.disableElevation || disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        size: child.props.size || size,
        variant: child.props.variant || variant
      });
    }));
  });
  ButtonGroup.propTypes = {
    children: prop_types17.default.node,
    classes: prop_types17.default.object,
    className: prop_types17.default.string,
    color: prop_types17.default.oneOf(["default", "inherit", "primary", "secondary"]),
    component: prop_types17.default.elementType,
    disabled: prop_types17.default.bool,
    disableElevation: prop_types17.default.bool,
    disableFocusRipple: prop_types17.default.bool,
    disableRipple: prop_types17.default.bool,
    fullWidth: prop_types17.default.bool,
    orientation: prop_types17.default.oneOf(["horizontal", "vertical"]),
    size: prop_types17.default.oneOf(["large", "medium", "small"]),
    variant: prop_types17.default.oneOf(["contained", "outlined", "text"])
  };
  const ButtonGroup_default = withStyles_default(styles16, {
    name: "MuiButtonGroup"
  })(ButtonGroup);

  // node_modules/@material-ui/core/esm/Card/Card.js
  const React19 = __toModule(require_react());
  const prop_types18 = __toModule(require_prop_types());
  var styles17 = {
    root: {
      overflow: "hidden"
    }
  };
  var Card = React19.forwardRef(function Card3(props, ref) {
    var classes = props.classes, className = props.className, _props$raised = props.raised, raised = _props$raised === void 0 ? false : _props$raised, other = _objectWithoutProperties(props, ["classes", "className", "raised"]);
    return React19.createElement(Paper_default, _extends({
      className: clsx_m_default(classes.root, className),
      elevation: raised ? 8 : 1,
      ref
    }, other));
  });
  Card.propTypes = {
    children: prop_types18.default.node,
    classes: prop_types18.default.object,
    className: prop_types18.default.string,
    raised: prop_types18.default.bool
  };
  const Card_default = withStyles_default(styles17, {
    name: "MuiCard"
  })(Card);

  // node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js
  const React20 = __toModule(require_react());
  const prop_types19 = __toModule(require_prop_types());
  var styles18 = function styles131(theme) {
    return {
      root: {
        display: "block",
        textAlign: "inherit",
        width: "100%",
        "&:hover $focusHighlight": {
          opacity: theme.palette.action.hoverOpacity
        },
        "&$focusVisible $focusHighlight": {
          opacity: 0.12
        }
      },
      focusVisible: {},
      focusHighlight: {
        overflow: "hidden",
        pointerEvents: "none",
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: "inherit",
        opacity: 0,
        backgroundColor: "currentcolor",
        transition: theme.transitions.create("opacity", {
          duration: theme.transitions.duration.short
        })
      }
    };
  };
  var CardActionArea = React20.forwardRef(function CardActionArea3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, focusVisibleClassName = props.focusVisibleClassName, other = _objectWithoutProperties(props, ["children", "classes", "className", "focusVisibleClassName"]);
    return React20.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, className),
      focusVisibleClassName: clsx_m_default(focusVisibleClassName, classes.focusVisible),
      ref
    }, other), children, React20.createElement("span", {
      className: classes.focusHighlight
    }));
  });
  CardActionArea.propTypes = {
    children: prop_types19.default.node,
    classes: prop_types19.default.object,
    className: prop_types19.default.string,
    focusVisibleClassName: prop_types19.default.string
  };
  const CardActionArea_default = withStyles_default(styles18, {
    name: "MuiCardActionArea"
  })(CardActionArea);

  // node_modules/@material-ui/core/esm/CardActions/CardActions.js
  const React21 = __toModule(require_react());
  const prop_types20 = __toModule(require_prop_types());
  var styles19 = {
    root: {
      display: "flex",
      alignItems: "center",
      padding: 8
    },
    spacing: {
      "& > :not(:first-child)": {
        marginLeft: 8
      }
    }
  };
  var CardActions = React21.forwardRef(function CardActions3(props, ref) {
    var _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);
    return React21.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
      ref
    }, other));
  });
  CardActions.propTypes = {
    children: prop_types20.default.node,
    classes: prop_types20.default.object,
    className: prop_types20.default.string,
    disableSpacing: prop_types20.default.bool
  };
  const CardActions_default = withStyles_default(styles19, {
    name: "MuiCardActions"
  })(CardActions);

  // node_modules/@material-ui/core/esm/CardContent/CardContent.js
  const React22 = __toModule(require_react());
  const prop_types21 = __toModule(require_prop_types());
  var styles20 = {
    root: {
      padding: 16,
      "&:last-child": {
        paddingBottom: 24
      }
    }
  };
  var CardContent = React22.forwardRef(function CardContent3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, other = _objectWithoutProperties(props, ["classes", "className", "component"]);
    return React22.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  CardContent.propTypes = {
    children: prop_types21.default.node,
    classes: prop_types21.default.object,
    className: prop_types21.default.string,
    component: prop_types21.default.elementType
  };
  const CardContent_default = withStyles_default(styles20, {
    name: "MuiCardContent"
  })(CardContent);

  // node_modules/@material-ui/core/esm/CardHeader/CardHeader.js
  const React23 = __toModule(require_react());
  const prop_types22 = __toModule(require_prop_types());
  var styles21 = {
    root: {
      display: "flex",
      alignItems: "center",
      padding: 16
    },
    avatar: {
      flex: "0 0 auto",
      marginRight: 16
    },
    action: {
      flex: "0 0 auto",
      alignSelf: "flex-start",
      marginTop: -8,
      marginRight: -8
    },
    content: {
      flex: "1 1 auto"
    },
    title: {},
    subheader: {}
  };
  var CardHeader = React23.forwardRef(function CardHeader3(props, ref) {
    var action = props.action, avatar = props.avatar, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, subheaderProp = props.subheader, subheaderTypographyProps = props.subheaderTypographyProps, titleProp = props.title, titleTypographyProps = props.titleTypographyProps, other = _objectWithoutProperties(props, ["action", "avatar", "classes", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"]);
    var title = titleProp;
    if (title != null && title.type !== Typography_default && !disableTypography) {
      title = React23.createElement(Typography_default, _extends({
        variant: avatar ? "body2" : "h5",
        className: classes.title,
        component: "span",
        display: "block"
      }, titleTypographyProps), title);
    }
    var subheader = subheaderProp;
    if (subheader != null && subheader.type !== Typography_default && !disableTypography) {
      subheader = React23.createElement(Typography_default, _extends({
        variant: avatar ? "body2" : "body1",
        className: classes.subheader,
        color: "textSecondary",
        component: "span",
        display: "block"
      }, subheaderTypographyProps), subheader);
    }
    return React23.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other), avatar && React23.createElement("div", {
      className: classes.avatar
    }, avatar), React23.createElement("div", {
      className: classes.content
    }, title, subheader), action && React23.createElement("div", {
      className: classes.action
    }, action));
  });
  CardHeader.propTypes = {
    action: prop_types22.default.node,
    avatar: prop_types22.default.node,
    children: prop_types22.default.node,
    classes: prop_types22.default.object,
    className: prop_types22.default.string,
    component: prop_types22.default.elementType,
    disableTypography: prop_types22.default.bool,
    subheader: prop_types22.default.node,
    subheaderTypographyProps: prop_types22.default.object,
    title: prop_types22.default.node,
    titleTypographyProps: prop_types22.default.object
  };
  const CardHeader_default = withStyles_default(styles21, {
    name: "MuiCardHeader"
  })(CardHeader);

  // node_modules/@material-ui/core/esm/CardMedia/CardMedia.js
  const React24 = __toModule(require_react());
  const prop_types23 = __toModule(require_prop_types());
  var styles22 = {
    root: {
      display: "block",
      backgroundSize: "cover",
      backgroundRepeat: "no-repeat",
      backgroundPosition: "center"
    },
    media: {
      width: "100%"
    },
    img: {
      objectFit: "cover"
    }
  };
  var MEDIA_COMPONENTS = ["video", "audio", "picture", "iframe", "img"];
  var CardMedia = React24.forwardRef(function CardMedia3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, image = props.image, src = props.src, style13 = props.style, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "image", "src", "style"]);
    var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component7) !== -1;
    var composedStyle = !isMediaComponent && image ? _extends({
      backgroundImage: 'url("'.concat(image, '")')
    }, style13) : style13;
    return React24.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, isMediaComponent && classes.media, "picture img".indexOf(Component7) !== -1 && classes.img),
      ref,
      style: composedStyle,
      src: isMediaComponent ? image || src : void 0
    }, other), children);
  });
  CardMedia.propTypes = {
    children: chainPropTypes(prop_types23.default.node, function(props) {
      if (!props.children && !props.image && !props.src && !props.component) {
        return new Error("Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.");
      }
      return null;
    }),
    classes: prop_types23.default.object,
    className: prop_types23.default.string,
    component: prop_types23.default.elementType,
    image: prop_types23.default.string,
    src: prop_types23.default.string,
    style: prop_types23.default.object
  };
  const CardMedia_default = withStyles_default(styles22, {
    name: "MuiCardMedia"
  })(CardMedia);

  // node_modules/@material-ui/core/esm/FormControl/FormControlContext.js
  const React48 = __toModule(require_react());
  var FormControlContext2 = React48.createContext();
  if (true) {
    FormControlContext2.displayName = "FormControlContext";
  }
  function useFormControl() {
    return React48.useContext(FormControlContext2);
  }
  const FormControlContext_default = FormControlContext2;

  // node_modules/@material-ui/core/esm/FormControl/useFormControl.js
  const React49 = __toModule(require_react());
  function useFormControl3() {
    return React49.useContext(FormControlContext_default);
  }

  // node_modules/@material-ui/core/esm/internal/SwitchBase.js
  const React140 = __toModule(require_react());
  const prop_types131 = __toModule(require_prop_types());
  var styles120 = {
    root: {
      padding: 9
    },
    checked: {},
    disabled: {},
    input: {
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    }
  };
  var SwitchBase4 = React140.forwardRef(function SwitchBase5(props, ref) {
    var autoFocus = props.autoFocus, checkedProp = props.checked, checkedIcon = props.checkedIcon, classes = props.classes, className = props.className, defaultChecked = props.defaultChecked, disabledProp = props.disabled, icon = props.icon, id = props.id, inputProps = props.inputProps, inputRef = props.inputRef, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, readOnly = props.readOnly, required = props.required, tabIndex = props.tabIndex, type = props.type, value = props.value, other = _objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);
    var _useControlled = useControlled2({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), checked = _useControlled2[0], setCheckedState = _useControlled2[1];
    var muiFormControl = useFormControl3();
    var handleFocus = function handleFocus2(event) {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    var handleBlur = function handleBlur2(event) {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    var handleInputChange = function handleInputChange2(event) {
      var newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    var disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    var hasLabelFor = type === "checkbox" || type === "radio";
    return React140.createElement(IconButton_default, _extends({
      component: "span",
      className: clsx_m_default(classes.root, className, checked && classes.checked, disabled && classes.disabled),
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ref
    }, other), React140.createElement("input", _extends({
      autoFocus,
      checked: checkedProp,
      defaultChecked,
      className: classes.input,
      disabled,
      id: hasLabelFor && id,
      name,
      onChange: handleInputChange,
      readOnly,
      ref: inputRef,
      required,
      tabIndex,
      type,
      value
    }, inputProps)), checked ? checkedIcon : icon);
  });
  SwitchBase4.propTypes = {
    autoFocus: prop_types131.default.bool,
    checked: prop_types131.default.bool,
    checkedIcon: prop_types131.default.node.isRequired,
    classes: prop_types131.default.object.isRequired,
    className: prop_types131.default.string,
    defaultChecked: prop_types131.default.bool,
    disabled: prop_types131.default.bool,
    icon: prop_types131.default.node.isRequired,
    id: prop_types131.default.string,
    inputProps: prop_types131.default.object,
    inputRef: refType_default,
    name: prop_types131.default.string,
    onBlur: prop_types131.default.func,
    onChange: prop_types131.default.func,
    onFocus: prop_types131.default.func,
    readOnly: prop_types131.default.bool,
    required: prop_types131.default.bool,
    tabIndex: prop_types131.default.oneOfType([prop_types131.default.number, prop_types131.default.string]),
    type: prop_types131.default.string.isRequired,
    value: prop_types131.default.any
  };
  const SwitchBase_default = withStyles_default(styles120, {
    name: "PrivateSwitchBase"
  })(SwitchBase4);

  // node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js
  const React145 = __toModule(require_react());
  const CheckBoxOutlineBlank_default = createSvgIcon2(React145.createElement("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js
  const React144 = __toModule(require_react());
  const CheckBox_default = createSvgIcon2(React144.createElement("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js
  const React147 = __toModule(require_react());
  const IndeterminateCheckBox_default = createSvgIcon2(React147.createElement("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@material-ui/core/esm/Checkbox/Checkbox.js
  const React25 = __toModule(require_react());
  const prop_types24 = __toModule(require_prop_types());
  var styles23 = function styles131(theme) {
    return {
      root: {
        color: theme.palette.text.secondary
      },
      checked: {},
      disabled: {},
      indeterminate: {},
      colorPrimary: {
        "&$checked": {
          color: theme.palette.primary.main,
          "&:hover": {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      },
      colorSecondary: {
        "&$checked": {
          color: theme.palette.secondary.main,
          "&:hover": {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }
    };
  };
  var defaultCheckedIcon = React25.createElement(CheckBox_default, null);
  var defaultIcon = React25.createElement(CheckBoxOutlineBlank_default, null);
  var defaultIndeterminateIcon = React25.createElement(IndeterminateCheckBox_default, null);
  var Checkbox = React25.forwardRef(function Checkbox4(props, ref) {
    var _props$checkedIcon = props.checkedIcon, checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon, classes = props.classes, _props$color = props.color, color2 = _props$color === void 0 ? "secondary" : _props$color, _props$icon = props.icon, iconProp = _props$icon === void 0 ? defaultIcon : _props$icon, _props$indeterminate = props.indeterminate, indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate, _props$indeterminateI = props.indeterminateIcon, indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI, inputProps = props.inputProps, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"]);
    var icon = indeterminate ? indeterminateIconProp : iconProp;
    var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    return React25.createElement(SwitchBase_default, _extends({
      type: "checkbox",
      classes: {
        root: clsx_m_default(classes.root, classes["color".concat(capitalize2(color2))], indeterminate && classes.indeterminate),
        checked: classes.checked,
        disabled: classes.disabled
      },
      color: color2,
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: React25.cloneElement(icon, {
        fontSize: icon.props.fontSize === void 0 && size === "small" ? size : icon.props.fontSize
      }),
      checkedIcon: React25.cloneElement(indeterminateIcon, {
        fontSize: indeterminateIcon.props.fontSize === void 0 && size === "small" ? size : indeterminateIcon.props.fontSize
      }),
      ref
    }, other));
  });
  Checkbox.propTypes = {
    checked: prop_types24.default.bool,
    checkedIcon: prop_types24.default.node,
    classes: prop_types24.default.object,
    color: prop_types24.default.oneOf(["default", "primary", "secondary"]),
    disabled: prop_types24.default.bool,
    disableRipple: prop_types24.default.bool,
    icon: prop_types24.default.node,
    id: prop_types24.default.string,
    indeterminate: prop_types24.default.bool,
    indeterminateIcon: prop_types24.default.node,
    inputProps: prop_types24.default.object,
    inputRef: refType_default,
    onChange: prop_types24.default.func,
    required: prop_types24.default.bool,
    size: prop_types24.default.oneOf(["medium", "small"]),
    value: prop_types24.default.any
  };
  const Checkbox_default = withStyles_default(styles23, {
    name: "MuiCheckbox"
  })(Checkbox);

  // node_modules/@material-ui/core/esm/internal/svg-icons/Cancel.js
  const React143 = __toModule(require_react());
  const Cancel_default = createSvgIcon2(React143.createElement("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@material-ui/core/esm/Chip/Chip.js
  const React26 = __toModule(require_react());
  const prop_types25 = __toModule(require_prop_types());
  var styles24 = function styles131(theme) {
    var backgroundColor = theme.palette.type === "light" ? theme.palette.grey[300] : theme.palette.grey[700];
    var deleteIconColor = fade(theme.palette.text.primary, 0.26);
    return {
      root: {
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        height: 32,
        color: theme.palette.getContrastText(backgroundColor),
        backgroundColor,
        borderRadius: 32 / 2,
        whiteSpace: "nowrap",
        transition: theme.transitions.create(["background-color", "box-shadow"]),
        cursor: "default",
        outline: 0,
        textDecoration: "none",
        border: "none",
        padding: 0,
        verticalAlign: "middle",
        boxSizing: "border-box",
        "&$disabled": {
          opacity: 0.5,
          pointerEvents: "none"
        },
        "& $avatar": {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.palette.type === "light" ? theme.palette.grey[700] : theme.palette.grey[300],
          fontSize: theme.typography.pxToRem(12)
        },
        "& $avatarColorPrimary": {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.dark
        },
        "& $avatarColorSecondary": {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.dark
        },
        "& $avatarSmall": {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        }
      },
      sizeSmall: {
        height: 24
      },
      colorPrimary: {
        backgroundColor: theme.palette.primary.main,
        color: theme.palette.primary.contrastText
      },
      colorSecondary: {
        backgroundColor: theme.palette.secondary.main,
        color: theme.palette.secondary.contrastText
      },
      disabled: {},
      clickable: {
        userSelect: "none",
        WebkitTapHighlightColor: "transparent",
        cursor: "pointer",
        "&:hover, &:focus": {
          backgroundColor: emphasize(backgroundColor, 0.08)
        },
        "&:active": {
          boxShadow: theme.shadows[1]
        }
      },
      clickableColorPrimary: {
        "&:hover, &:focus": {
          backgroundColor: emphasize(theme.palette.primary.main, 0.08)
        }
      },
      clickableColorSecondary: {
        "&:hover, &:focus": {
          backgroundColor: emphasize(theme.palette.secondary.main, 0.08)
        }
      },
      deletable: {
        "&:focus": {
          backgroundColor: emphasize(backgroundColor, 0.08)
        }
      },
      deletableColorPrimary: {
        "&:focus": {
          backgroundColor: emphasize(theme.palette.primary.main, 0.2)
        }
      },
      deletableColorSecondary: {
        "&:focus": {
          backgroundColor: emphasize(theme.palette.secondary.main, 0.2)
        }
      },
      outlined: {
        backgroundColor: "transparent",
        border: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
        "$clickable&:hover, $clickable&:focus, $deletable&:focus": {
          backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity)
        },
        "& $avatar": {
          marginLeft: 4
        },
        "& $avatarSmall": {
          marginLeft: 2
        },
        "& $icon": {
          marginLeft: 4
        },
        "& $iconSmall": {
          marginLeft: 2
        },
        "& $deleteIcon": {
          marginRight: 5
        },
        "& $deleteIconSmall": {
          marginRight: 3
        }
      },
      outlinedPrimary: {
        color: theme.palette.primary.main,
        border: "1px solid ".concat(theme.palette.primary.main),
        "$clickable&:hover, $clickable&:focus, $deletable&:focus": {
          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity)
        }
      },
      outlinedSecondary: {
        color: theme.palette.secondary.main,
        border: "1px solid ".concat(theme.palette.secondary.main),
        "$clickable&:hover, $clickable&:focus, $deletable&:focus": {
          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity)
        }
      },
      avatar: {},
      avatarSmall: {},
      avatarColorPrimary: {},
      avatarColorSecondary: {},
      icon: {
        color: theme.palette.type === "light" ? theme.palette.grey[700] : theme.palette.grey[300],
        marginLeft: 5,
        marginRight: -6
      },
      iconSmall: {
        width: 18,
        height: 18,
        marginLeft: 4,
        marginRight: -4
      },
      iconColorPrimary: {
        color: "inherit"
      },
      iconColorSecondary: {
        color: "inherit"
      },
      label: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        paddingLeft: 12,
        paddingRight: 12,
        whiteSpace: "nowrap"
      },
      labelSmall: {
        paddingLeft: 8,
        paddingRight: 8
      },
      deleteIcon: {
        WebkitTapHighlightColor: "transparent",
        color: deleteIconColor,
        height: 22,
        width: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: fade(deleteIconColor, 0.4)
        }
      },
      deleteIconSmall: {
        height: 16,
        width: 16,
        marginRight: 4,
        marginLeft: -4
      },
      deleteIconColorPrimary: {
        color: fade(theme.palette.primary.contrastText, 0.7),
        "&:hover, &:active": {
          color: theme.palette.primary.contrastText
        }
      },
      deleteIconColorSecondary: {
        color: fade(theme.palette.secondary.contrastText, 0.7),
        "&:hover, &:active": {
          color: theme.palette.secondary.contrastText
        }
      },
      deleteIconOutlinedColorPrimary: {
        color: fade(theme.palette.primary.main, 0.7),
        "&:hover, &:active": {
          color: theme.palette.primary.main
        }
      },
      deleteIconOutlinedColorSecondary: {
        color: fade(theme.palette.secondary.main, 0.7),
        "&:hover, &:active": {
          color: theme.palette.secondary.main
        }
      }
    };
  };
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = React26.forwardRef(function Chip3(props, ref) {
    var avatarProp = props.avatar, classes = props.classes, className = props.className, clickableProp = props.clickable, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, ComponentProp = props.component, deleteIconProp = props.deleteIcon, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, iconProp = props.icon, label = props.label, onClick = props.onClick, onDelete = props.onDelete, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "default" : _props$variant, other = _objectWithoutProperties(props, ["avatar", "classes", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"]);
    var chipRef = React26.useRef(null);
    var handleRef = useForkRef2(chipRef, ref);
    var handleDeleteIconClick = function handleDeleteIconClick2(event) {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    var handleKeyDown2 = function handleKeyDown3(event) {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    var handleKeyUp = function handleKeyUp2(event) {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    var clickable = clickableProp !== false && onClick ? true : clickableProp;
    var small = size === "small";
    var Component7 = ComponentProp || (clickable ? ButtonBase_default : "div");
    var moreProps = Component7 === ButtonBase_default ? {
      component: "div"
    } : {};
    var deleteIcon = null;
    if (onDelete) {
      var customClasses = clsx_m_default(color2 !== "default" && (variant === "default" ? classes["deleteIconColor".concat(capitalize2(color2))] : classes["deleteIconOutlinedColor".concat(capitalize2(color2))]), small && classes.deleteIconSmall);
      deleteIcon = deleteIconProp && React26.isValidElement(deleteIconProp) ? React26.cloneElement(deleteIconProp, {
        className: clsx_m_default(deleteIconProp.props.className, classes.deleteIcon, customClasses),
        onClick: handleDeleteIconClick
      }) : React26.createElement(Cancel_default, {
        className: clsx_m_default(classes.deleteIcon, customClasses),
        onClick: handleDeleteIconClick
      });
    }
    var avatar = null;
    if (avatarProp && React26.isValidElement(avatarProp)) {
      avatar = React26.cloneElement(avatarProp, {
        className: clsx_m_default(classes.avatar, avatarProp.props.className, small && classes.avatarSmall, color2 !== "default" && classes["avatarColor".concat(capitalize2(color2))])
      });
    }
    var icon = null;
    if (iconProp && React26.isValidElement(iconProp)) {
      icon = React26.cloneElement(iconProp, {
        className: clsx_m_default(classes.icon, iconProp.props.className, small && classes.iconSmall, color2 !== "default" && classes["iconColor".concat(capitalize2(color2))])
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("Material-UI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return React26.createElement(Component7, _extends({
      role: clickable || onDelete ? "button" : void 0,
      className: clsx_m_default(classes.root, className, color2 !== "default" && [classes["color".concat(capitalize2(color2))], clickable && classes["clickableColor".concat(capitalize2(color2))], onDelete && classes["deletableColor".concat(capitalize2(color2))]], variant !== "default" && [classes.outlined, {
        primary: classes.outlinedPrimary,
        secondary: classes.outlinedSecondary
      }[color2]], disabled && classes.disabled, small && classes.sizeSmall, clickable && classes.clickable, onDelete && classes.deletable),
      "aria-disabled": disabled ? true : void 0,
      tabIndex: clickable || onDelete ? 0 : void 0,
      onClick,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      ref: handleRef
    }, moreProps, other), avatar || icon, React26.createElement("span", {
      className: clsx_m_default(classes.label, small && classes.labelSmall)
    }, label), deleteIcon);
  });
  Chip.propTypes = {
    avatar: prop_types25.default.element,
    children: unsupportedProp2,
    classes: prop_types25.default.object,
    className: prop_types25.default.string,
    clickable: prop_types25.default.bool,
    color: prop_types25.default.oneOf(["default", "primary", "secondary"]),
    component: prop_types25.default.elementType,
    deleteIcon: prop_types25.default.element,
    disabled: prop_types25.default.bool,
    icon: prop_types25.default.element,
    label: prop_types25.default.node,
    onClick: prop_types25.default.func,
    onDelete: prop_types25.default.func,
    onKeyDown: prop_types25.default.func,
    onKeyUp: prop_types25.default.func,
    size: prop_types25.default.oneOf(["medium", "small"]),
    variant: prop_types25.default.oneOf(["default", "outlined"])
  };
  const Chip_default = withStyles_default(styles24, {
    name: "MuiChip"
  })(Chip);

  // node_modules/@material-ui/core/esm/CircularProgress/CircularProgress.js
  const React27 = __toModule(require_react());
  const prop_types26 = __toModule(require_prop_types());
  var SIZE = 44;
  function getRelativeValue(value, min, max) {
    return (Math.min(Math.max(min, value), max) - min) / (max - min);
  }
  function easeOut(t) {
    t = getRelativeValue(t, 0, 1);
    t = (t -= 1) * t * t + 1;
    return t;
  }
  function easeIn(t) {
    return t * t;
  }
  var styles25 = function styles131(theme) {
    return {
      root: {
        display: "inline-block"
      },
      static: {
        transition: theme.transitions.create("transform")
      },
      indeterminate: {
        animation: "$circular-rotate 1.4s linear infinite"
      },
      colorPrimary: {
        color: theme.palette.primary.main
      },
      colorSecondary: {
        color: theme.palette.secondary.main
      },
      svg: {
        display: "block"
      },
      circle: {
        stroke: "currentColor"
      },
      circleStatic: {
        transition: theme.transitions.create("stroke-dashoffset")
      },
      circleIndeterminate: {
        animation: "$circular-dash 1.4s ease-in-out infinite",
        strokeDasharray: "80px, 200px",
        strokeDashoffset: "0px"
      },
      "@keyframes circular-rotate": {
        "0%": {
          transformOrigin: "50% 50%"
        },
        "100%": {
          transform: "rotate(360deg)"
        }
      },
      "@keyframes circular-dash": {
        "0%": {
          strokeDasharray: "1px, 200px",
          strokeDashoffset: "0px"
        },
        "50%": {
          strokeDasharray: "100px, 200px",
          strokeDashoffset: "-15px"
        },
        "100%": {
          strokeDasharray: "100px, 200px",
          strokeDashoffset: "-125px"
        }
      },
      circleDisableShrink: {
        animation: "none"
      }
    };
  };
  var CircularProgress = React27.forwardRef(function CircularProgress3(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$disableShrink = props.disableShrink, disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink, _props$size = props.size, size = _props$size === void 0 ? 40 : _props$size, style13 = props.style, _props$thickness = props.thickness, thickness = _props$thickness === void 0 ? 3.6 : _props$thickness, _props$value = props.value, value = _props$value === void 0 ? 0 : _props$value, _props$variant = props.variant, variant = _props$variant === void 0 ? "indeterminate" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);
    var circleStyle = {};
    var rootStyle = {};
    var rootProps = {};
    if (variant === "determinate" || variant === "static") {
      var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      if (variant === "static") {
        circleStyle.strokeDashoffset = "".concat(((100 - value) / 100 * circumference).toFixed(3), "px");
        rootStyle.transform = "rotate(-90deg)";
      } else {
        circleStyle.strokeDashoffset = "".concat((easeIn((100 - value) / 100) * circumference).toFixed(3), "px");
        rootStyle.transform = "rotate(".concat((easeOut(value / 70) * 270).toFixed(3), "deg)");
      }
    }
    return React27.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, color2 !== "inherit" && classes["color".concat(capitalize2(color2))], {
        indeterminate: classes.indeterminate,
        static: classes.static
      }[variant]),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style13),
      ref,
      role: "progressbar"
    }, rootProps, other), React27.createElement("svg", {
      className: classes.svg,
      viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE)
    }, React27.createElement("circle", {
      className: clsx_m_default(classes.circle, disableShrink && classes.circleDisableShrink, {
        indeterminate: classes.circleIndeterminate,
        static: classes.circleStatic
      }[variant]),
      style: circleStyle,
      cx: SIZE,
      cy: SIZE,
      r: (SIZE - thickness) / 2,
      fill: "none",
      strokeWidth: thickness
    })));
  });
  CircularProgress.propTypes = {
    classes: prop_types26.default.object,
    className: prop_types26.default.string,
    color: prop_types26.default.oneOf(["inherit", "primary", "secondary"]),
    disableShrink: chainPropTypes(prop_types26.default.bool, function(props) {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("Material-UI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    size: prop_types26.default.oneOfType([prop_types26.default.number, prop_types26.default.string]),
    style: prop_types26.default.object,
    thickness: prop_types26.default.number,
    value: prop_types26.default.number,
    variant: prop_types26.default.oneOf(["determinate", "indeterminate", "static"])
  };
  const CircularProgress_default = withStyles_default(styles25, {
    name: "MuiCircularProgress",
    flip: false
  })(CircularProgress);

  // node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js
  const React28 = __toModule(require_react());
  const ReactDOM2 = __toModule(require_react_dom());
  const prop_types27 = __toModule(require_prop_types());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event) {
    return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    var children = props.children, _props$disableReactTr = props.disableReactTree, disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr, _props$mouseEvent = props.mouseEvent, mouseEvent = _props$mouseEvent === void 0 ? "onClick" : _props$mouseEvent, onClickAway = props.onClickAway, _props$touchEvent = props.touchEvent, touchEvent = _props$touchEvent === void 0 ? "onTouchEnd" : _props$touchEvent;
    var movedRef = React28.useRef(false);
    var nodeRef = React28.useRef(null);
    var mountedRef = React28.useRef(false);
    var syntheticEventRef = React28.useRef(false);
    React28.useEffect(function() {
      mountedRef.current = true;
      return function() {
        mountedRef.current = false;
      };
    }, []);
    var handleOwnRef = React28.useCallback(function(instance) {
      nodeRef.current = ReactDOM2.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef2(children.ref, handleOwnRef);
    var handleClickAway = useEventCallback2(function(event) {
      var insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      var insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        var doc = ownerDocument2(nodeRef.current);
        insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    var createHandleSynthetic = function createHandleSynthetic2(handlerName) {
      return function(event) {
        syntheticEventRef.current = true;
        var childrenPropsHandler = children.props[handlerName];
        if (childrenPropsHandler) {
          childrenPropsHandler(event);
        }
      };
    };
    var childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React28.useEffect(function() {
      if (touchEvent !== false) {
        var mappedTouchEvent = mapEventPropToEvent(touchEvent);
        var doc = ownerDocument2(nodeRef.current);
        var handleTouchMove = function handleTouchMove2() {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return function() {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React28.useEffect(function() {
      if (mouseEvent !== false) {
        var mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        var doc = ownerDocument2(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return function() {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return React28.createElement(React28.Fragment, null, React28.cloneElement(children, childrenProps));
  }
  ClickAwayListener.propTypes = {
    children: elementAcceptingRef_default.isRequired,
    disableReactTree: prop_types27.default.bool,
    mouseEvent: prop_types27.default.oneOf(["onClick", "onMouseDown", "onMouseUp", false]),
    onClickAway: prop_types27.default.func.isRequired,
    touchEvent: prop_types27.default.oneOf(["onTouchEnd", "onTouchStart", false])
  };
  if (true) {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }
  const ClickAwayListener_default = ClickAwayListener;

  // node_modules/@material-ui/core/esm/Container/Container.js
  const React30 = __toModule(require_react());
  const prop_types29 = __toModule(require_prop_types());
  var styles27 = function styles131(theme) {
    return {
      root: _defineProperty({
        width: "100%",
        marginLeft: "auto",
        boxSizing: "border-box",
        marginRight: "auto",
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        display: "block"
      }, theme.breakpoints.up("sm"), {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }),
      disableGutters: {
        paddingLeft: 0,
        paddingRight: 0
      },
      fixed: Object.keys(theme.breakpoints.values).reduce(function(acc, breakpoint) {
        var value = theme.breakpoints.values[breakpoint];
        if (value !== 0) {
          acc[theme.breakpoints.up(breakpoint)] = {
            maxWidth: value
          };
        }
        return acc;
      }, {}),
      maxWidthXs: _defineProperty({}, theme.breakpoints.up("xs"), {
        maxWidth: Math.max(theme.breakpoints.values.xs, 444)
      }),
      maxWidthSm: _defineProperty({}, theme.breakpoints.up("sm"), {
        maxWidth: theme.breakpoints.values.sm
      }),
      maxWidthMd: _defineProperty({}, theme.breakpoints.up("md"), {
        maxWidth: theme.breakpoints.values.md
      }),
      maxWidthLg: _defineProperty({}, theme.breakpoints.up("lg"), {
        maxWidth: theme.breakpoints.values.lg
      }),
      maxWidthXl: _defineProperty({}, theme.breakpoints.up("xl"), {
        maxWidth: theme.breakpoints.values.xl
      })
    };
  };
  var Container = React30.forwardRef(function Container4(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$fixed = props.fixed, fixed = _props$fixed === void 0 ? false : _props$fixed, _props$maxWidth = props.maxWidth, maxWidth2 = _props$maxWidth === void 0 ? "lg" : _props$maxWidth, other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "fixed", "maxWidth"]);
    return React30.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth2 !== false && classes["maxWidth".concat(capitalize2(String(maxWidth2)))]),
      ref
    }, other));
  });
  Container.propTypes = {
    children: prop_types29.default.node.isRequired,
    classes: prop_types29.default.object,
    className: prop_types29.default.string,
    component: prop_types29.default.elementType,
    disableGutters: prop_types29.default.bool,
    fixed: prop_types29.default.bool,
    maxWidth: prop_types29.default.oneOf(["lg", "md", "sm", "xl", "xs", false])
  };
  const Container_default = withStyles_default(styles27, {
    name: "MuiContainer"
  })(Container);

  // node_modules/@material-ui/core/esm/CssBaseline/CssBaseline.js
  const React31 = __toModule(require_react());
  const prop_types30 = __toModule(require_prop_types());
  var html = {
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    boxSizing: "border-box"
  };
  var body = function body2(theme) {
    return _extends({
      color: theme.palette.text.primary
    }, theme.typography.body2, {
      backgroundColor: theme.palette.background.default,
      "@media print": {
        backgroundColor: theme.palette.common.white
      }
    });
  };
  var styles28 = function styles131(theme) {
    return {
      "@global": {
        html,
        "*, *::before, *::after": {
          boxSizing: "inherit"
        },
        "strong, b": {
          fontWeight: theme.typography.fontWeightBold
        },
        body: _extends({
          margin: 0
        }, body(theme), {
          "&::backdrop": {
            backgroundColor: theme.palette.background.default
          }
        })
      }
    };
  };
  function CssBaseline(props) {
    var _props$children = props.children, children = _props$children === void 0 ? null : _props$children, classes = props.classes;
    return React31.createElement(React31.Fragment, null, children);
  }
  CssBaseline.propTypes = {
    children: prop_types30.default.node,
    classes: prop_types30.default.object
  };
  if (true) {
    CssBaseline["propTypes"] = exactProp(CssBaseline.propTypes);
  }
  const CssBaseline_default = withStyles_default(styles28, {
    name: "MuiCssBaseline"
  })(CssBaseline);

  // node_modules/@material-ui/core/esm/Portal/Portal.js
  const React91 = __toModule(require_react());
  const ReactDOM8 = __toModule(require_react_dom());
  const prop_types87 = __toModule(require_prop_types());
  function getContainer2(container) {
    container = typeof container === "function" ? container() : container;
    return ReactDOM8.findDOMNode(container);
  }
  var useEnhancedEffect7 = typeof window !== "undefined" ? React91.useLayoutEffect : React91.useEffect;
  var Portal3 = React91.forwardRef(function Portal5(props, ref) {
    var children = props.children, container = props.container, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, onRendered = props.onRendered;
    var _React$useState = React91.useState(null), mountNode = _React$useState[0], setMountNode = _React$useState[1];
    var handleRef = useForkRef2(React91.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect7(function() {
      if (!disablePortal) {
        setMountNode(getContainer2(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect7(function() {
      if (mountNode && !disablePortal) {
        setRef2(ref, mountNode);
        return function() {
          setRef2(ref, null);
        };
      }
      return void 0;
    }, [ref, mountNode, disablePortal]);
    useEnhancedEffect7(function() {
      if (onRendered && (mountNode || disablePortal)) {
        onRendered();
      }
    }, [onRendered, mountNode, disablePortal]);
    if (disablePortal) {
      if (React91.isValidElement(children)) {
        return React91.cloneElement(children, {
          ref: handleRef
        });
      }
      return children;
    }
    return mountNode ? ReactDOM8.createPortal(children, mountNode) : mountNode;
  });
  Portal3.propTypes = {
    children: prop_types87.default.node,
    container: prop_types87.default.oneOfType([HTMLElementType, prop_types87.default.instanceOf(React91.Component), prop_types87.default.func]),
    disablePortal: prop_types87.default.bool,
    onRendered: prop_types87.default.func
  };
  if (true) {
    Portal3["propTypes"] = exactProp(Portal3.propTypes);
  }
  const Portal_default = Portal3;

  // node_modules/@material-ui/core/esm/utils/getScrollbarSize.js
  function getScrollbarSize2() {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.width = "99px";
    scrollDiv.style.height = "99px";
    scrollDiv.style.position = "absolute";
    scrollDiv.style.top = "-9999px";
    scrollDiv.style.overflow = "scroll";
    document.body.appendChild(scrollDiv);
    var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarSize;
  }

  // node_modules/@material-ui/core/esm/Modal/ModalManager.js
  function isOverflowing(container) {
    var doc = ownerDocument2(container);
    if (doc.body === container) {
      return ownerWindow2(doc).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(node, show) {
    if (show) {
      node.setAttribute("aria-hidden", "true");
    } else {
      node.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(node) {
    return parseInt(window.getComputedStyle(node)["padding-right"], 10) || 0;
  }
  function ariaHiddenSiblings(container, mountNode, currentNode) {
    var nodesToExclude = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
    var show = arguments.length > 4 ? arguments[4] : void 0;
    var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));
    var blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
    [].forEach.call(container.children, function(node) {
      if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
        ariaHidden(node, show);
      }
    });
  }
  function findIndexOf(containerInfo, callback) {
    var idx = -1;
    containerInfo.some(function(item, index3) {
      if (callback(item)) {
        idx = index3;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    var restoreStyle = [];
    var restorePaddings = [];
    var container = containerInfo.container;
    var fixedNodes;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        var scrollbarSize = getScrollbarSize2();
        restoreStyle.push({
          value: container.style.paddingRight,
          key: "padding-right",
          el: container
        });
        container.style["padding-right"] = "".concat(getPaddingRight(container) + scrollbarSize, "px");
        fixedNodes = ownerDocument2(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedNodes, function(node) {
          restorePaddings.push(node.style.paddingRight);
          node.style.paddingRight = "".concat(getPaddingRight(node) + scrollbarSize, "px");
        });
      }
      var parent = container.parentElement;
      var scrollContainer = parent.nodeName === "HTML" && window.getComputedStyle(parent)["overflow-y"] === "scroll" ? parent : container;
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        key: "overflow",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    var restore = function restore2() {
      if (fixedNodes) {
        [].forEach.call(fixedNodes, function(node, i) {
          if (restorePaddings[i]) {
            node.style.paddingRight = restorePaddings[i];
          } else {
            node.style.removeProperty("padding-right");
          }
        });
      }
      restoreStyle.forEach(function(_ref6) {
        var value = _ref6.value, el2 = _ref6.el, key3 = _ref6.key;
        if (value) {
          el2.style.setProperty(key3, value);
        } else {
          el2.style.removeProperty(key3);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    var hiddenSiblings = [];
    [].forEach.call(container.children, function(node) {
      if (node.getAttribute && node.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(node);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager2 = function() {
    function ModalManager4() {
      _classCallCheck(this, ModalManager4);
      this.modals = [];
      this.containers = [];
    }
    _createClass(ModalManager4, [{
      key: "add",
      value: function add(modal, container) {
        var modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        var hiddenSiblingNodes = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.container === container;
        });
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblingNodes
        });
        return modalIndex;
      }
    }, {
      key: "mount",
      value: function mount(modal, props) {
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
    }, {
      key: "remove",
      value: function remove(modal) {
        var modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, true);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
          this.containers.splice(containerIndex, 1);
        } else {
          var nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
    }, {
      key: "isTopModal",
      value: function isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }]);
    return ModalManager4;
  }();

  // node_modules/@material-ui/core/esm/Unstable_TrapFocus/Unstable_TrapFocus.js
  const React138 = __toModule(require_react());
  const ReactDOM13 = __toModule(require_react_dom());
  const prop_types129 = __toModule(require_prop_types());
  function Unstable_TrapFocus2(props) {
    var children = props.children, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, getDoc = props.getDoc, isEnabled = props.isEnabled, open = props.open;
    var ignoreNextEnforceFocus = React138.useRef();
    var sentinelStart = React138.useRef(null);
    var sentinelEnd = React138.useRef(null);
    var nodeToRestore = React138.useRef();
    var rootRef = React138.useRef(null);
    var handleOwnRef = React138.useCallback(function(instance) {
      rootRef.current = ReactDOM13.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef2(children.ref, handleOwnRef);
    var prevOpenRef = React138.useRef();
    React138.useEffect(function() {
      prevOpenRef.current = open;
    }, [open]);
    if (!prevOpenRef.current && open && typeof window !== "undefined") {
      nodeToRestore.current = getDoc().activeElement;
    }
    React138.useEffect(function() {
      if (!open) {
        return;
      }
      var doc = ownerDocument2(rootRef.current);
      if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["Material-UI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", -1);
        }
        rootRef.current.focus();
      }
      var contain = function contain2() {
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
          rootRef.current.focus();
        }
      };
      var loopFocus = function loopFocus2(event) {
        if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
          return;
        }
        if (doc.activeElement === rootRef.current) {
          ignoreNextEnforceFocus.current = true;
          if (event.shiftKey) {
            sentinelEnd.current.focus();
          } else {
            sentinelStart.current.focus();
          }
        }
      };
      doc.addEventListener("focus", contain, true);
      doc.addEventListener("keydown", loopFocus, true);
      var interval = setInterval(function() {
        contain();
      }, 50);
      return function() {
        clearInterval(interval);
        doc.removeEventListener("focus", contain, true);
        doc.removeEventListener("keydown", loopFocus, true);
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
    return React138.createElement(React138.Fragment, null, React138.createElement("div", {
      tabIndex: 0,
      ref: sentinelStart,
      "data-test": "sentinelStart"
    }), React138.cloneElement(children, {
      ref: handleRef
    }), React138.createElement("div", {
      tabIndex: 0,
      ref: sentinelEnd,
      "data-test": "sentinelEnd"
    }));
  }
  Unstable_TrapFocus2.propTypes = {
    children: prop_types129.default.node,
    disableAutoFocus: prop_types129.default.bool,
    disableEnforceFocus: prop_types129.default.bool,
    disableRestoreFocus: prop_types129.default.bool,
    getDoc: prop_types129.default.func.isRequired,
    isEnabled: prop_types129.default.func.isRequired,
    open: prop_types129.default.bool.isRequired
  };
  if (true) {
    Unstable_TrapFocus2["propTypes"] = exactProp(Unstable_TrapFocus2.propTypes);
  }
  const Unstable_TrapFocus_default = Unstable_TrapFocus2;

  // node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js
  const React82 = __toModule(require_react());
  const prop_types78 = __toModule(require_prop_types());
  var styles74 = {
    root: {
      zIndex: -1,
      position: "fixed",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    },
    invisible: {
      backgroundColor: "transparent"
    }
  };
  var SimpleBackdrop2 = React82.forwardRef(function SimpleBackdrop3(props, ref) {
    var _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, other = _objectWithoutProperties(props, ["invisible", "open"]);
    return open ? React82.createElement("div", _extends({
      "aria-hidden": true,
      ref
    }, other, {
      style: _extends({}, styles74.root, invisible ? styles74.invisible : {}, other.style)
    })) : null;
  });
  SimpleBackdrop2.propTypes = {
    invisible: prop_types78.default.bool,
    open: prop_types78.default.bool.isRequired
  };
  const SimpleBackdrop_default = SimpleBackdrop2;

  // node_modules/@material-ui/core/esm/Modal/Modal.js
  const React81 = __toModule(require_react());
  const ReactDOM6 = __toModule(require_react_dom());
  const prop_types77 = __toModule(require_prop_types());
  function getContainer(container) {
    container = typeof container === "function" ? container() : container;
    return ReactDOM6.findDOMNode(container);
  }
  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager2();
  var styles73 = function styles131(theme) {
    return {
      root: {
        position: "fixed",
        zIndex: theme.zIndex.modal,
        right: 0,
        bottom: 0,
        top: 0,
        left: 0
      },
      hidden: {
        visibility: "hidden"
      }
    };
  };
  var Modal3 = React81.forwardRef(function Modal6(inProps, ref) {
    var theme = useTheme10();
    var props = getThemeProps({
      name: "MuiModal",
      props: _extends({}, inProps),
      theme
    });
    var _props$BackdropCompon = props.BackdropComponent, BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop_default : _props$BackdropCompon, BackdropProps = props.BackdropProps, children = props.children, _props$closeAfterTran = props.closeAfterTransition, closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran, container = props.container, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, _props$disableScrollL = props.disableScrollLock, disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL, _props$hideBackdrop = props.hideBackdrop, hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop, _props$keepMounted = props.keepMounted, keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted, _props$manager = props.manager, manager = _props$manager === void 0 ? defaultManager : _props$manager, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEscapeKeyDown = props.onEscapeKeyDown, onRendered = props.onRendered, open = props.open, other = _objectWithoutProperties(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);
    var _React$useState = React81.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
    var modal = React81.useRef({});
    var mountNodeRef = React81.useRef(null);
    var modalRef = React81.useRef(null);
    var handleRef = useForkRef2(modalRef, ref);
    var hasTransition = getHasTransition(props);
    var getDoc = function getDoc2() {
      return ownerDocument2(mountNodeRef.current);
    };
    var getModal = function getModal2() {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    var handleMounted = function handleMounted2() {
      manager.mount(getModal(), {
        disableScrollLock
      });
      modalRef.current.scrollTop = 0;
    };
    var handleOpen = useEventCallback2(function() {
      var resolvedContainer = getContainer(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    var isTopModal = React81.useCallback(function() {
      return manager.isTopModal(getModal());
    }, [manager]);
    var handlePortalRef = useEventCallback2(function(node) {
      mountNodeRef.current = node;
      if (!node) {
        return;
      }
      if (onRendered) {
        onRendered();
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    var handleClose = React81.useCallback(function() {
      manager.remove(getModal());
    }, [manager]);
    React81.useEffect(function() {
      return function() {
        handleClose();
      };
    }, [handleClose]);
    React81.useEffect(function() {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    var handleEnter = function handleEnter2() {
      setExited(false);
    };
    var handleExited = function handleExited2() {
      setExited(true);
      if (closeAfterTransition) {
        handleClose();
      }
    };
    var handleBackdropClick = function handleBackdropClick2(event) {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (!disableBackdropClick && onClose) {
        onClose(event, "backdropClick");
      }
    };
    var handleKeyDown2 = function handleKeyDown3(event) {
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (onEscapeKeyDown) {
        onEscapeKeyDown(event);
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    var inlineStyle = styles73(theme || {
      zIndex: zIndex_default
    });
    var childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = children.props.tabIndex || "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction2(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction2(handleExited, children.props.onExited);
    }
    return React81.createElement(Portal_default, {
      ref: handlePortalRef,
      container,
      disablePortal
    }, React81.createElement("div", _extends({
      ref: handleRef,
      onKeyDown: handleKeyDown2,
      role: "presentation"
    }, other, {
      style: _extends({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
    }), hideBackdrop ? null : React81.createElement(BackdropComponent, _extends({
      open,
      onClick: handleBackdropClick
    }, BackdropProps)), React81.createElement(Unstable_TrapFocus_default, {
      disableEnforceFocus,
      disableAutoFocus,
      disableRestoreFocus,
      getDoc,
      isEnabled: isTopModal,
      open
    }, React81.cloneElement(children, childProps))));
  });
  Modal3.propTypes = {
    BackdropComponent: prop_types77.default.elementType,
    BackdropProps: prop_types77.default.object,
    children: elementAcceptingRef_default.isRequired,
    closeAfterTransition: prop_types77.default.bool,
    container: prop_types77.default.oneOfType([HTMLElementType, prop_types77.default.instanceOf(React81.Component), prop_types77.default.func]),
    disableAutoFocus: prop_types77.default.bool,
    disableBackdropClick: prop_types77.default.bool,
    disableEnforceFocus: prop_types77.default.bool,
    disableEscapeKeyDown: prop_types77.default.bool,
    disablePortal: prop_types77.default.bool,
    disableRestoreFocus: prop_types77.default.bool,
    disableScrollLock: prop_types77.default.bool,
    hideBackdrop: prop_types77.default.bool,
    keepMounted: prop_types77.default.bool,
    manager: prop_types77.default.object,
    onBackdropClick: prop_types77.default.func,
    onClose: prop_types77.default.func,
    onEscapeKeyDown: prop_types77.default.func,
    onRendered: prop_types77.default.func,
    open: prop_types77.default.bool.isRequired
  };
  const Modal_default = Modal3;

  // node_modules/@material-ui/core/esm/Dialog/Dialog.js
  const React32 = __toModule(require_react());
  const prop_types31 = __toModule(require_prop_types());
  var styles29 = function styles131(theme) {
    return {
      root: {
        "@media print": {
          position: "absolute !important"
        }
      },
      scrollPaper: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      },
      scrollBody: {
        overflowY: "auto",
        overflowX: "hidden",
        textAlign: "center",
        "&:after": {
          content: '""',
          display: "inline-block",
          verticalAlign: "middle",
          height: "100%",
          width: "0"
        }
      },
      container: {
        height: "100%",
        "@media print": {
          height: "auto"
        },
        outline: 0
      },
      paper: {
        margin: 32,
        position: "relative",
        overflowY: "auto",
        "@media print": {
          overflowY: "visible",
          boxShadow: "none"
        }
      },
      paperScrollPaper: {
        display: "flex",
        flexDirection: "column",
        maxHeight: "calc(100% - 64px)"
      },
      paperScrollBody: {
        display: "inline-block",
        verticalAlign: "middle",
        textAlign: "left"
      },
      paperWidthFalse: {
        maxWidth: "calc(100% - 64px)"
      },
      paperWidthXs: {
        maxWidth: Math.max(theme.breakpoints.values.xs, 444),
        "&$paperScrollBody": _defineProperty({}, theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthSm: {
        maxWidth: theme.breakpoints.values.sm,
        "&$paperScrollBody": _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.sm + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthMd: {
        maxWidth: theme.breakpoints.values.md,
        "&$paperScrollBody": _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.md + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthLg: {
        maxWidth: theme.breakpoints.values.lg,
        "&$paperScrollBody": _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.lg + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperWidthXl: {
        maxWidth: theme.breakpoints.values.xl,
        "&$paperScrollBody": _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.xl + 32 * 2), {
          maxWidth: "calc(100% - 64px)"
        })
      },
      paperFullWidth: {
        width: "calc(100% - 64px)"
      },
      paperFullScreen: {
        margin: 0,
        width: "100%",
        maxWidth: "100%",
        height: "100%",
        maxHeight: "none",
        borderRadius: 0,
        "&$paperScrollBody": {
          margin: 0,
          maxWidth: "100%"
        }
      }
    };
  };
  var defaultTransitionDuration = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Dialog = React32.forwardRef(function Dialog3(props, ref) {
    var BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$fullScreen = props.fullScreen, fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$maxWidth = props.maxWidth, maxWidth2 = _props$maxWidth === void 0 ? "sm" : _props$maxWidth, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onEscapeKeyDown = props.onEscapeKeyDown, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperComponent = props.PaperComponent, PaperComponent = _props$PaperComponent === void 0 ? Paper_default : _props$PaperComponent, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, _props$scroll = props.scroll, scroll = _props$scroll === void 0 ? "paper" : _props$scroll, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Fade_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura, TransitionProps = props.TransitionProps, ariaDescribedby = props["aria-describedby"], ariaLabelledby = props["aria-labelledby"], other = _objectWithoutProperties(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps", "aria-describedby", "aria-labelledby"]);
    var mouseDownTarget = React32.useRef();
    var handleMouseDown = function handleMouseDown2(event) {
      mouseDownTarget.current = event.target;
    };
    var handleBackdropClick = function handleBackdropClick2(event) {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (event.target !== mouseDownTarget.current) {
        return;
      }
      mouseDownTarget.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (!disableBackdropClick && onClose) {
        onClose(event, "backdropClick");
      }
    };
    return React32.createElement(Modal_default, _extends({
      className: clsx_m_default(classes.root, className),
      BackdropComponent: Backdrop_default,
      BackdropProps: _extends({
        transitionDuration
      }, BackdropProps),
      closeAfterTransition: true,
      disableBackdropClick,
      disableEscapeKeyDown,
      onEscapeKeyDown,
      onClose,
      open,
      ref
    }, other), React32.createElement(TransitionComponent, _extends({
      appear: true,
      in: open,
      timeout: transitionDuration,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited,
      role: "none presentation"
    }, TransitionProps), React32.createElement("div", {
      className: clsx_m_default(classes.container, classes["scroll".concat(capitalize2(scroll))]),
      onMouseUp: handleBackdropClick,
      onMouseDown: handleMouseDown
    }, React32.createElement(PaperComponent, _extends({
      elevation: 24,
      role: "dialog",
      "aria-describedby": ariaDescribedby,
      "aria-labelledby": ariaLabelledby
    }, PaperProps, {
      className: clsx_m_default(classes.paper, classes["paperScroll".concat(capitalize2(scroll))], classes["paperWidth".concat(capitalize2(String(maxWidth2)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
    }), children))));
  });
  Dialog.propTypes = {
    "aria-describedby": prop_types31.default.string,
    "aria-labelledby": prop_types31.default.string,
    BackdropProps: prop_types31.default.object,
    children: prop_types31.default.node,
    classes: prop_types31.default.object,
    className: prop_types31.default.string,
    disableBackdropClick: prop_types31.default.bool,
    disableEscapeKeyDown: prop_types31.default.bool,
    fullScreen: prop_types31.default.bool,
    fullWidth: prop_types31.default.bool,
    maxWidth: prop_types31.default.oneOf(["lg", "md", "sm", "xl", "xs", false]),
    onBackdropClick: prop_types31.default.func,
    onClose: prop_types31.default.func,
    onEnter: prop_types31.default.func,
    onEntered: prop_types31.default.func,
    onEntering: prop_types31.default.func,
    onEscapeKeyDown: prop_types31.default.func,
    onExit: prop_types31.default.func,
    onExited: prop_types31.default.func,
    onExiting: prop_types31.default.func,
    open: prop_types31.default.bool.isRequired,
    PaperComponent: prop_types31.default.elementType,
    PaperProps: prop_types31.default.object,
    scroll: prop_types31.default.oneOf(["body", "paper"]),
    TransitionComponent: prop_types31.default.elementType,
    transitionDuration: prop_types31.default.oneOfType([prop_types31.default.number, prop_types31.default.shape({
      appear: prop_types31.default.number,
      enter: prop_types31.default.number,
      exit: prop_types31.default.number
    })]),
    TransitionProps: prop_types31.default.object
  };
  const Dialog_default = withStyles_default(styles29, {
    name: "MuiDialog"
  })(Dialog);

  // node_modules/@material-ui/core/esm/DialogActions/DialogActions.js
  const React33 = __toModule(require_react());
  const prop_types32 = __toModule(require_prop_types());
  var styles30 = {
    root: {
      display: "flex",
      alignItems: "center",
      padding: 8,
      justifyContent: "flex-end",
      flex: "0 0 auto"
    },
    spacing: {
      "& > :not(:first-child)": {
        marginLeft: 8
      }
    }
  };
  var DialogActions = React33.forwardRef(function DialogActions3(props, ref) {
    var _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);
    return React33.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
      ref
    }, other));
  });
  DialogActions.propTypes = {
    children: prop_types32.default.node,
    classes: prop_types32.default.object,
    className: prop_types32.default.string,
    disableSpacing: prop_types32.default.bool
  };
  const DialogActions_default = withStyles_default(styles30, {
    name: "MuiDialogActions"
  })(DialogActions);

  // node_modules/@material-ui/core/esm/DialogContent/DialogContent.js
  const React34 = __toModule(require_react());
  const prop_types33 = __toModule(require_prop_types());
  var styles31 = function styles131(theme) {
    return {
      root: {
        flex: "1 1 auto",
        WebkitOverflowScrolling: "touch",
        overflowY: "auto",
        padding: "8px 24px",
        "&:first-child": {
          paddingTop: 20
        }
      },
      dividers: {
        padding: "16px 24px",
        borderTop: "1px solid ".concat(theme.palette.divider),
        borderBottom: "1px solid ".concat(theme.palette.divider)
      }
    };
  };
  var DialogContent = React34.forwardRef(function DialogContent3(props, ref) {
    var classes = props.classes, className = props.className, _props$dividers = props.dividers, dividers = _props$dividers === void 0 ? false : _props$dividers, other = _objectWithoutProperties(props, ["classes", "className", "dividers"]);
    return React34.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, dividers && classes.dividers),
      ref
    }, other));
  });
  DialogContent.propTypes = {
    children: prop_types33.default.node,
    classes: prop_types33.default.object,
    className: prop_types33.default.string,
    dividers: prop_types33.default.bool
  };
  const DialogContent_default = withStyles_default(styles31, {
    name: "MuiDialogContent"
  })(DialogContent);

  // node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js
  const React35 = __toModule(require_react());
  const prop_types34 = __toModule(require_prop_types());
  var styles32 = {
    root: {
      marginBottom: 12
    }
  };
  var DialogContentText = React35.forwardRef(function DialogContentText3(props, ref) {
    return React35.createElement(Typography_default, _extends({
      component: "p",
      variant: "body1",
      color: "textSecondary",
      ref
    }, props));
  });
  DialogContentText.propTypes = {
    children: prop_types34.default.node,
    classes: prop_types34.default.object
  };
  const DialogContentText_default = withStyles_default(styles32, {
    name: "MuiDialogContentText"
  })(DialogContentText);

  // node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js
  const React36 = __toModule(require_react());
  const prop_types35 = __toModule(require_prop_types());
  var styles33 = {
    root: {
      margin: 0,
      padding: "16px 24px",
      flex: "0 0 auto"
    }
  };
  var DialogTitle = React36.forwardRef(function DialogTitle3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, other = _objectWithoutProperties(props, ["children", "classes", "className", "disableTypography"]);
    return React36.createElement("div", _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other), disableTypography ? children : React36.createElement(Typography_default, {
      component: "h2",
      variant: "h6"
    }, children));
  });
  DialogTitle.propTypes = {
    children: prop_types35.default.node,
    classes: prop_types35.default.object,
    className: prop_types35.default.string,
    disableTypography: prop_types35.default.bool
  };
  const DialogTitle_default = withStyles_default(styles33, {
    name: "MuiDialogTitle"
  })(DialogTitle);

  // node_modules/@material-ui/core/esm/Divider/Divider.js
  const React37 = __toModule(require_react());
  const prop_types36 = __toModule(require_prop_types());
  var styles34 = function styles131(theme) {
    return {
      root: {
        height: 1,
        margin: 0,
        border: "none",
        flexShrink: 0,
        backgroundColor: theme.palette.divider
      },
      absolute: {
        position: "absolute",
        bottom: 0,
        left: 0,
        width: "100%"
      },
      inset: {
        marginLeft: 72
      },
      light: {
        backgroundColor: fade(theme.palette.divider, 0.08)
      },
      middle: {
        marginLeft: theme.spacing(2),
        marginRight: theme.spacing(2)
      },
      vertical: {
        height: "100%",
        width: 1
      },
      flexItem: {
        alignSelf: "stretch",
        height: "auto"
      }
    };
  };
  var Divider = React37.forwardRef(function Divider3(props, ref) {
    var _props$absolute = props.absolute, absolute = _props$absolute === void 0 ? false : _props$absolute, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "hr" : _props$component, _props$flexItem = props.flexItem, flexItem = _props$flexItem === void 0 ? false : _props$flexItem, _props$light = props.light, light2 = _props$light === void 0 ? false : _props$light, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$role = props.role, role = _props$role === void 0 ? Component7 !== "hr" ? "separator" : void 0 : _props$role, _props$variant = props.variant, variant = _props$variant === void 0 ? "fullWidth" : _props$variant, other = _objectWithoutProperties(props, ["absolute", "classes", "className", "component", "flexItem", "light", "orientation", "role", "variant"]);
    return React37.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, variant !== "fullWidth" && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light2 && classes.light, orientation === "vertical" && classes.vertical),
      role,
      ref
    }, other));
  });
  Divider.propTypes = {
    absolute: prop_types36.default.bool,
    children: prop_types36.default.node,
    classes: prop_types36.default.object,
    className: prop_types36.default.string,
    component: prop_types36.default.elementType,
    flexItem: prop_types36.default.bool,
    light: prop_types36.default.bool,
    orientation: prop_types36.default.oneOf(["horizontal", "vertical"]),
    role: prop_types36.default.string,
    variant: prop_types36.default.oneOf(["fullWidth", "inset", "middle"])
  };
  const Divider_default = withStyles_default(styles34, {
    name: "MuiDivider"
  })(Divider);

  // node_modules/@material-ui/core/esm/Slide/Slide.js
  const React100 = __toModule(require_react());
  const prop_types94 = __toModule(require_prop_types());
  const ReactDOM10 = __toModule(require_react_dom());
  function getTranslateValue(direction, node) {
    var rect = node.getBoundingClientRect();
    var transform3;
    if (node.fakeTransform) {
      transform3 = node.fakeTransform;
    } else {
      var computedStyle = window.getComputedStyle(node);
      transform3 = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    var offsetX = 0;
    var offsetY = 0;
    if (transform3 && transform3 !== "none" && typeof transform3 === "string") {
      var transformValues = transform3.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === "left") {
      return "translateX(".concat(window.innerWidth, "px) translateX(").concat(offsetX - rect.left, "px)");
    }
    if (direction === "right") {
      return "translateX(-".concat(rect.left + rect.width - offsetX, "px)");
    }
    if (direction === "up") {
      return "translateY(".concat(window.innerHeight, "px) translateY(").concat(offsetY - rect.top, "px)");
    }
    return "translateY(-".concat(rect.top + rect.height - offsetY, "px)");
  }
  function setTranslateValue(direction, node) {
    var transform3 = getTranslateValue(direction, node);
    if (transform3) {
      node.style.webkitTransform = transform3;
      node.style.transform = transform3;
    }
  }
  var defaultTimeout2 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Slide2 = React100.forwardRef(function Slide4(props, ref) {
    var children = props.children, _props$direction = props.direction, direction = _props$direction === void 0 ? "down" : _props$direction, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style13 = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout2 : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "direction", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var theme = useTheme2();
    var childrenRef = React100.useRef(null);
    var handleOwnRef = React100.useCallback(function(instance) {
      childrenRef.current = ReactDOM10.findDOMNode(instance);
    }, []);
    var handleRefIntermediary = useForkRef2(children.ref, handleOwnRef);
    var handleRef = useForkRef2(handleRefIntermediary, ref);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(isAppearing) {
        if (callback) {
          if (isAppearing === void 0) {
            callback(childrenRef.current);
          } else {
            callback(childrenRef.current, isAppearing);
          }
        }
      };
    };
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      setTranslateValue(direction, node);
      reflow(node);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
      var transitionProps = getTransitionProps({
        timeout,
        style: style13
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps, {
        easing: theme.transitions.easing.easeOut
      }));
      node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps, {
        easing: theme.transitions.easing.easeOut
      }));
      node.style.webkitTransform = "none";
      node.style.transform = "none";
      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var transitionProps = getTransitionProps({
        timeout,
        style: style13
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps, {
        easing: theme.transitions.easing.sharp
      }));
      node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps, {
        easing: theme.transitions.easing.sharp
      }));
      setTranslateValue(direction, node);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(function(node) {
      node.style.webkitTransition = "";
      node.style.transition = "";
      if (onExited) {
        onExited(node);
      }
    });
    var updatePosition = React100.useCallback(function() {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current);
      }
    }, [direction]);
    React100.useEffect(function() {
      if (inProp || direction === "down" || direction === "right") {
        return void 0;
      }
      var handleResize = debounce2(function() {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current);
        }
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [direction, inProp]);
    React100.useEffect(function() {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return React100.createElement(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      appear: true,
      in: inProp,
      timeout
    }, other), function(state, childProps) {
      return React100.cloneElement(children, _extends({
        ref: handleRef,
        style: _extends({
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, style13, children.props.style)
      }, childProps));
    });
  });
  Slide2.propTypes = {
    children: elementAcceptingRef_default,
    direction: prop_types94.default.oneOf(["down", "left", "right", "up"]),
    in: prop_types94.default.bool,
    onEnter: prop_types94.default.func,
    onEntered: prop_types94.default.func,
    onEntering: prop_types94.default.func,
    onExit: prop_types94.default.func,
    onExited: prop_types94.default.func,
    onExiting: prop_types94.default.func,
    style: prop_types94.default.object,
    timeout: prop_types94.default.oneOfType([prop_types94.default.number, prop_types94.default.shape({
      appear: prop_types94.default.number,
      enter: prop_types94.default.number,
      exit: prop_types94.default.number
    })])
  };
  const Slide_default = Slide2;

  // node_modules/@material-ui/core/esm/Drawer/Drawer.js
  const React38 = __toModule(require_react());
  const prop_types37 = __toModule(require_prop_types());
  var styles35 = function styles131(theme) {
    return {
      root: {},
      docked: {
        flex: "0 0 auto"
      },
      paper: {
        overflowY: "auto",
        display: "flex",
        flexDirection: "column",
        height: "100%",
        flex: "1 0 auto",
        zIndex: theme.zIndex.drawer,
        WebkitOverflowScrolling: "touch",
        position: "fixed",
        top: 0,
        outline: 0
      },
      paperAnchorLeft: {
        left: 0,
        right: "auto"
      },
      paperAnchorRight: {
        left: "auto",
        right: 0
      },
      paperAnchorTop: {
        top: 0,
        left: 0,
        bottom: "auto",
        right: 0,
        height: "auto",
        maxHeight: "100%"
      },
      paperAnchorBottom: {
        top: "auto",
        left: 0,
        bottom: 0,
        right: 0,
        height: "auto",
        maxHeight: "100%"
      },
      paperAnchorDockedLeft: {
        borderRight: "1px solid ".concat(theme.palette.divider)
      },
      paperAnchorDockedTop: {
        borderBottom: "1px solid ".concat(theme.palette.divider)
      },
      paperAnchorDockedRight: {
        borderLeft: "1px solid ".concat(theme.palette.divider)
      },
      paperAnchorDockedBottom: {
        borderTop: "1px solid ".concat(theme.palette.divider)
      },
      modal: {}
    };
  };
  var oppositeDirection = {
    left: "right",
    right: "left",
    top: "down",
    bottom: "up"
  };
  function isHorizontal(anchor) {
    return ["left", "right"].indexOf(anchor) !== -1;
  }
  function getAnchor(theme, anchor) {
    return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  var defaultTransitionDuration2 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Drawer = React38.forwardRef(function Drawer5(props, ref) {
    var _props$anchor = props.anchor, anchorProp = _props$anchor === void 0 ? "left" : _props$anchor, BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 16 : _props$elevation, _props$ModalProps = props.ModalProps;
    _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
    var BackdropPropsProp = _props$ModalProps.BackdropProps, ModalProps = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]), onClose = props.onClose, _props$open = props.open, open = _props$open === void 0 ? false : _props$open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, SlideProps = props.SlideProps, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Slide_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration2 : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? "temporary" : _props$variant, other = _objectWithoutProperties(props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"]);
    var theme = useTheme2();
    var mounted = React38.useRef(false);
    React38.useEffect(function() {
      mounted.current = true;
    }, []);
    var anchor = getAnchor(theme, anchorProp);
    var drawer = React38.createElement(Paper_default, _extends({
      elevation: variant === "temporary" ? elevation : 0,
      square: true
    }, PaperProps, {
      className: clsx_m_default(classes.paper, classes["paperAnchor".concat(capitalize2(anchor))], PaperProps.className, variant !== "temporary" && classes["paperAnchorDocked".concat(capitalize2(anchor))])
    }), children);
    if (variant === "permanent") {
      return React38.createElement("div", _extends({
        className: clsx_m_default(classes.root, classes.docked, className),
        ref
      }, other), drawer);
    }
    var slidingDrawer = React38.createElement(TransitionComponent, _extends({
      in: open,
      direction: oppositeDirection[anchor],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps), drawer);
    if (variant === "persistent") {
      return React38.createElement("div", _extends({
        className: clsx_m_default(classes.root, classes.docked, className),
        ref
      }, other), slidingDrawer);
    }
    return React38.createElement(Modal_default, _extends({
      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      BackdropComponent: Backdrop_default,
      className: clsx_m_default(classes.root, classes.modal, className),
      open,
      onClose,
      ref
    }, other, ModalProps), slidingDrawer);
  });
  Drawer.propTypes = {
    anchor: prop_types37.default.oneOf(["bottom", "left", "right", "top"]),
    BackdropProps: prop_types37.default.object,
    children: prop_types37.default.node,
    classes: prop_types37.default.object,
    className: prop_types37.default.string,
    elevation: prop_types37.default.number,
    ModalProps: prop_types37.default.object,
    onClose: prop_types37.default.func,
    open: prop_types37.default.bool,
    PaperProps: prop_types37.default.object,
    SlideProps: prop_types37.default.object,
    transitionDuration: prop_types37.default.oneOfType([prop_types37.default.number, prop_types37.default.shape({
      appear: prop_types37.default.number,
      enter: prop_types37.default.number,
      exit: prop_types37.default.number
    })]),
    variant: prop_types37.default.oneOf(["permanent", "persistent", "temporary"])
  };
  const Drawer_default = withStyles_default(styles35, {
    name: "MuiDrawer",
    flip: false
  })(Drawer);

  // node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanelContext.js
  const React40 = __toModule(require_react());
  var ExpansionPanelContext2 = React40.createContext({});
  if (true) {
    ExpansionPanelContext2.displayName = "ExpansionPanelContext";
  }
  const ExpansionPanelContext_default = ExpansionPanelContext2;

  // node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanel.js
  const React39 = __toModule(require_react());
  const react_is5 = __toModule(require_react_is());
  const prop_types38 = __toModule(require_prop_types());
  var styles36 = function styles131(theme) {
    var transition2 = {
      duration: theme.transitions.duration.shortest
    };
    return {
      root: {
        position: "relative",
        transition: theme.transitions.create(["margin"], transition2),
        "&:before": {
          position: "absolute",
          left: 0,
          top: -1,
          right: 0,
          height: 1,
          content: '""',
          opacity: 1,
          backgroundColor: theme.palette.divider,
          transition: theme.transitions.create(["opacity", "background-color"], transition2)
        },
        "&:first-child": {
          "&:before": {
            display: "none"
          }
        },
        "&$expanded": {
          margin: "16px 0",
          "&:first-child": {
            marginTop: 0
          },
          "&:last-child": {
            marginBottom: 0
          },
          "&:before": {
            opacity: 0
          }
        },
        "&$expanded + &": {
          "&:before": {
            display: "none"
          }
        },
        "&$disabled": {
          backgroundColor: theme.palette.action.disabledBackground
        }
      },
      rounded: {
        borderRadius: 0,
        "&:first-child": {
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius
        },
        "&:last-child": {
          borderBottomLeftRadius: theme.shape.borderRadius,
          borderBottomRightRadius: theme.shape.borderRadius,
          "@supports (-ms-ime-align: auto)": {
            borderBottomLeftRadius: 0,
            borderBottomRightRadius: 0
          }
        }
      },
      expanded: {},
      disabled: {}
    };
  };
  var warnedOnce = false;
  var ExpansionPanel = React39.forwardRef(function ExpansionPanel3(props, ref) {
    if (true) {
      if (!warnedOnce) {
        warnedOnce = true;
        console.error(["Material-UI: the ExpansionPanel component was renamed to Accordion to use a more common naming convention.", "", "You should use `import { Accordion } from '@material-ui/core'`", "or `import Accordion from '@material-ui/core/Accordion'`"].join("\n"));
      }
    }
    var childrenProp = props.children, classes = props.classes, className = props.className, _props$defaultExpande = props.defaultExpanded, defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, expandedProp = props.expanded, onChange = props.onChange, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Collapse_default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);
    var _useControlled = useControlled2({
      controlled: expandedProp,
      default: defaultExpanded,
      name: "ExpansionPanel",
      state: "expanded"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), expanded = _useControlled2[0], setExpandedState = _useControlled2[1];
    var handleChange = React39.useCallback(function(event) {
      setExpandedState(!expanded);
      if (onChange) {
        onChange(event, !expanded);
      }
    }, [expanded, onChange, setExpandedState]);
    var _React$Children$toArr = React39.Children.toArray(childrenProp), _React$Children$toArr2 = _toArray(_React$Children$toArr), summary = _React$Children$toArr2[0], children = _React$Children$toArr2.slice(1);
    var contextValue = React39.useMemo(function() {
      return {
        expanded,
        disabled,
        toggle: handleChange
      };
    }, [expanded, disabled, handleChange]);
    return React39.createElement(Paper_default, _extends({
      className: clsx_m_default(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
      ref,
      square
    }, other), React39.createElement(ExpansionPanelContext_default.Provider, {
      value: contextValue
    }, summary), React39.createElement(TransitionComponent, _extends({
      in: expanded,
      timeout: "auto"
    }, TransitionProps), React39.createElement("div", {
      "aria-labelledby": summary.props.id,
      id: summary.props["aria-controls"],
      role: "region"
    }, children)));
  });
  ExpansionPanel.propTypes = {
    children: chainPropTypes(prop_types38.default.node.isRequired, function(props) {
      var summary = React39.Children.toArray(props.children)[0];
      if (react_is5.isFragment(summary)) {
        return new Error("Material-UI: The ExpansionPanel doesn't accept a Fragment as a child. Consider providing an array instead.");
      }
      if (!React39.isValidElement(summary)) {
        return new Error("Material-UI: Expected the first child of ExpansionPanel to be a valid element.");
      }
      return null;
    }),
    classes: prop_types38.default.object,
    className: prop_types38.default.string,
    defaultExpanded: prop_types38.default.bool,
    disabled: prop_types38.default.bool,
    expanded: prop_types38.default.bool,
    onChange: prop_types38.default.func,
    square: prop_types38.default.bool,
    TransitionComponent: prop_types38.default.elementType,
    TransitionProps: prop_types38.default.object
  };
  const ExpansionPanel_default = withStyles_default(styles36, {
    name: "MuiExpansionPanel"
  })(ExpansionPanel);

  // node_modules/@material-ui/core/esm/ExpansionPanelActions/ExpansionPanelActions.js
  const React41 = __toModule(require_react());
  const prop_types39 = __toModule(require_prop_types());
  var styles37 = {
    root: {
      display: "flex",
      alignItems: "center",
      padding: 8,
      justifyContent: "flex-end"
    },
    spacing: {
      "& > :not(:first-child)": {
        marginLeft: 8
      }
    }
  };
  var warnedOnce2 = false;
  var ExpansionPanelActions = React41.forwardRef(function ExpansionPanelActions3(props, ref) {
    if (true) {
      if (!warnedOnce2) {
        warnedOnce2 = true;
        console.error(["Material-UI: the ExpansionPanelActions component was renamed to AccordionActions to use a more common naming convention.", "", "You should use `import { AccordionActions } from '@material-ui/core'`", "or `import AccordionActions from '@material-ui/core/AccordionActions'`"].join("\n"));
      }
    }
    var classes = props.classes, className = props.className, _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, other = _objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);
    return React41.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
      ref
    }, other));
  });
  ExpansionPanelActions.propTypes = {
    children: prop_types39.default.node,
    classes: prop_types39.default.object,
    className: prop_types39.default.string,
    disableSpacing: prop_types39.default.bool
  };
  const ExpansionPanelActions_default = withStyles_default(styles37, {
    name: "MuiExpansionPanelActions"
  })(ExpansionPanelActions);

  // node_modules/@material-ui/core/esm/ExpansionPanelDetails/ExpansionPanelDetails.js
  const React42 = __toModule(require_react());
  const prop_types40 = __toModule(require_prop_types());
  var styles38 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        padding: theme.spacing(1, 2, 2)
      }
    };
  };
  var warnedOnce3 = false;
  var ExpansionPanelDetails = React42.forwardRef(function ExpansionPanelDetails3(props, ref) {
    if (true) {
      if (!warnedOnce3) {
        warnedOnce3 = true;
        console.error(["Material-UI: the ExpansionPanelDetails component was renamed to AccordionDetails to use a more common naming convention.", "", "You should use `import { AccordionDetails } from '@material-ui/core'`", "or `import AccordionDetails from '@material-ui/core/AccordionActions'`"].join("\n"));
      }
    }
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    return React42.createElement("div", _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  ExpansionPanelDetails.propTypes = {
    children: prop_types40.default.node,
    classes: prop_types40.default.object,
    className: prop_types40.default.string
  };
  const ExpansionPanelDetails_default = withStyles_default(styles38, {
    name: "MuiExpansionPanelDetails"
  })(ExpansionPanelDetails);

  // node_modules/@material-ui/core/esm/ExpansionPanelSummary/ExpansionPanelSummary.js
  const React43 = __toModule(require_react());
  const prop_types41 = __toModule(require_prop_types());
  var styles39 = function styles131(theme) {
    var transition2 = {
      duration: theme.transitions.duration.shortest
    };
    return {
      root: {
        display: "flex",
        minHeight: 8 * 6,
        transition: theme.transitions.create(["min-height", "background-color"], transition2),
        padding: theme.spacing(0, 2),
        "&:hover:not($disabled)": {
          cursor: "pointer"
        },
        "&$expanded": {
          minHeight: 64
        },
        "&$focused": {
          backgroundColor: theme.palette.action.focus
        },
        "&$disabled": {
          opacity: theme.palette.action.disabledOpacity
        }
      },
      expanded: {},
      focused: {},
      disabled: {},
      content: {
        display: "flex",
        flexGrow: 1,
        transition: theme.transitions.create(["margin"], transition2),
        margin: "12px 0",
        "&$expanded": {
          margin: "20px 0"
        }
      },
      expandIcon: {
        transform: "rotate(0deg)",
        transition: theme.transitions.create("transform", transition2),
        "&:hover": {
          backgroundColor: "transparent"
        },
        "&$expanded": {
          transform: "rotate(180deg)"
        }
      }
    };
  };
  var warnedOnce4 = false;
  var ExpansionPanelSummary = React43.forwardRef(function ExpansionPanelSummary3(props, ref) {
    if (true) {
      if (!warnedOnce4) {
        warnedOnce4 = true;
        console.error(["Material-UI: the ExpansionPanelSummary component was renamed to AccordionSummary to use a more common naming convention.", "", "You should use `import { AccordionSummary } from '@material-ui/core'`", "or `import AccordionSummary from '@material-ui/core/AccordionSummary'`"].join("\n"));
      }
    }
    var children = props.children, classes = props.classes, className = props.className, expandIcon = props.expandIcon, IconButtonProps = props.IconButtonProps, onBlur = props.onBlur, onClick = props.onClick, onFocusVisible = props.onFocusVisible, other = _objectWithoutProperties(props, ["children", "classes", "className", "expandIcon", "IconButtonProps", "onBlur", "onClick", "onFocusVisible"]);
    var _React$useState = React43.useState(false), focusedState = _React$useState[0], setFocusedState = _React$useState[1];
    var handleFocusVisible = function handleFocusVisible2(event) {
      setFocusedState(true);
      if (onFocusVisible) {
        onFocusVisible(event);
      }
    };
    var handleBlur = function handleBlur2(event) {
      setFocusedState(false);
      if (onBlur) {
        onBlur(event);
      }
    };
    var _React$useContext = React43.useContext(ExpansionPanelContext_default), _React$useContext$dis = _React$useContext.disabled, disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis, expanded = _React$useContext.expanded, toggle = _React$useContext.toggle;
    var handleChange = function handleChange2(event) {
      if (toggle) {
        toggle(event);
      }
      if (onClick) {
        onClick(event);
      }
    };
    return React43.createElement(ButtonBase_default, _extends({
      focusRipple: false,
      disableRipple: true,
      disabled,
      component: "div",
      "aria-expanded": expanded,
      className: clsx_m_default(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
      onFocusVisible: handleFocusVisible,
      onBlur: handleBlur,
      onClick: handleChange,
      ref
    }, other), React43.createElement("div", {
      className: clsx_m_default(classes.content, expanded && classes.expanded)
    }, children), expandIcon && React43.createElement(IconButton_default, _extends({
      className: clsx_m_default(classes.expandIcon, expanded && classes.expanded),
      edge: "end",
      component: "div",
      tabIndex: null,
      role: null,
      "aria-hidden": true
    }, IconButtonProps), expandIcon));
  });
  ExpansionPanelSummary.propTypes = {
    children: prop_types41.default.node,
    classes: prop_types41.default.object,
    className: prop_types41.default.string,
    expandIcon: prop_types41.default.node,
    IconButtonProps: prop_types41.default.object,
    onBlur: prop_types41.default.func,
    onClick: prop_types41.default.func,
    onFocusVisible: prop_types41.default.func
  };
  const ExpansionPanelSummary_default = withStyles_default(styles39, {
    name: "MuiExpansionPanelSummary"
  })(ExpansionPanelSummary);

  // node_modules/@material-ui/core/esm/Fab/Fab.js
  const React44 = __toModule(require_react());
  const prop_types42 = __toModule(require_prop_types());
  var styles40 = function styles131(theme) {
    return {
      root: _extends({}, theme.typography.button, {
        boxSizing: "border-box",
        minHeight: 36,
        transition: theme.transitions.create(["background-color", "box-shadow", "border"], {
          duration: theme.transitions.duration.short
        }),
        borderRadius: "50%",
        padding: 0,
        minWidth: 0,
        width: 56,
        height: 56,
        boxShadow: theme.shadows[6],
        "&:active": {
          boxShadow: theme.shadows[12]
        },
        color: theme.palette.getContrastText(theme.palette.grey[300]),
        backgroundColor: theme.palette.grey[300],
        "&:hover": {
          backgroundColor: theme.palette.grey.A100,
          "@media (hover: none)": {
            backgroundColor: theme.palette.grey[300]
          },
          "&$disabled": {
            backgroundColor: theme.palette.action.disabledBackground
          },
          textDecoration: "none"
        },
        "&$focusVisible": {
          boxShadow: theme.shadows[6]
        },
        "&$disabled": {
          color: theme.palette.action.disabled,
          boxShadow: theme.shadows[0],
          backgroundColor: theme.palette.action.disabledBackground
        }
      }),
      label: {
        width: "100%",
        display: "inherit",
        alignItems: "inherit",
        justifyContent: "inherit"
      },
      primary: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: theme.palette.primary.dark,
          "@media (hover: none)": {
            backgroundColor: theme.palette.primary.main
          }
        }
      },
      secondary: {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: theme.palette.secondary.dark,
          "@media (hover: none)": {
            backgroundColor: theme.palette.secondary.main
          }
        }
      },
      extended: {
        borderRadius: 48 / 2,
        padding: "0 16px",
        width: "auto",
        minHeight: "auto",
        minWidth: 48,
        height: 48,
        "&$sizeSmall": {
          width: "auto",
          padding: "0 8px",
          borderRadius: 34 / 2,
          minWidth: 34,
          height: 34
        },
        "&$sizeMedium": {
          width: "auto",
          padding: "0 16px",
          borderRadius: 40 / 2,
          minWidth: 40,
          height: 40
        }
      },
      focusVisible: {},
      disabled: {},
      colorInherit: {
        color: "inherit"
      },
      sizeSmall: {
        width: 40,
        height: 40
      },
      sizeMedium: {
        width: 48,
        height: 48
      }
    };
  };
  var Fab = React44.forwardRef(function Fab3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, focusVisibleClassName = props.focusVisibleClassName, _props$size = props.size, size = _props$size === void 0 ? "large" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "round" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
    return React44.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, className, variant !== "round" && classes.extended, size !== "large" && classes["size".concat(capitalize2(size))], disabled && classes.disabled, {
        primary: classes.primary,
        secondary: classes.secondary,
        inherit: classes.colorInherit
      }[color2]),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
      ref
    }, other), React44.createElement("span", {
      className: classes.label
    }, children));
  });
  Fab.propTypes = {
    children: prop_types42.default.node.isRequired,
    classes: prop_types42.default.object,
    className: prop_types42.default.string,
    color: prop_types42.default.oneOf(["default", "inherit", "primary", "secondary"]),
    component: prop_types42.default.elementType,
    disabled: prop_types42.default.bool,
    disableFocusRipple: prop_types42.default.bool,
    disableRipple: prop_types42.default.bool,
    focusVisibleClassName: prop_types42.default.string,
    href: prop_types42.default.string,
    size: prop_types42.default.oneOf(["large", "medium", "small"]),
    variant: prop_types42.default.oneOf(["extended", "round"])
  };
  const Fab_default = withStyles_default(styles40, {
    name: "MuiFab"
  })(Fab);

  // node_modules/@material-ui/core/esm/FormControl/formControlState.js
  function formControlState(_ref6) {
    var props = _ref6.props, states = _ref6.states, muiFormControl = _ref6.muiFormControl;
    return states.reduce(function(acc, state) {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js
  const React134 = __toModule(require_react());
  const prop_types125 = __toModule(require_prop_types());
  function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }
  var useEnhancedEffect9 = typeof window !== "undefined" ? React134.useLayoutEffect : React134.useEffect;
  var styles115 = {
    shadow: {
      visibility: "hidden",
      position: "absolute",
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      transform: "translateZ(0)"
    }
  };
  var TextareaAutosize2 = React134.forwardRef(function TextareaAutosize4(props, ref) {
    var onChange = props.onChange, rows = props.rows, rowsMax = props.rowsMax, _props$rowsMin = props.rowsMin, rowsMinProp = _props$rowsMin === void 0 ? 1 : _props$rowsMin, style13 = props.style, value = props.value, other = _objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "rowsMin", "style", "value"]);
    var rowsMin = rows || rowsMinProp;
    var _React$useRef = React134.useRef(value != null), isControlled = _React$useRef.current;
    var inputRef = React134.useRef(null);
    var handleRef = useForkRef2(ref, inputRef);
    var shadowRef = React134.useRef(null);
    var renders = React134.useRef(0);
    var _React$useState = React134.useState({}), state = _React$useState[0], setState = _React$useState[1];
    var syncHeight = React134.useCallback(function() {
      var input = inputRef.current;
      var computedStyle = window.getComputedStyle(input);
      var inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      var boxSizing2 = computedStyle["box-sizing"];
      var padding = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
      var border2 = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
      var innerHeight = inputShallow.scrollHeight - padding;
      inputShallow.value = "x";
      var singleRowHeight = inputShallow.scrollHeight - padding;
      var outerHeight = innerHeight;
      if (rowsMin) {
        outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);
      }
      if (rowsMax) {
        outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      var outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding + border2 : 0);
      var overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      setState(function(prevState) {
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
          renders.current += 1;
          return {
            overflow: overflow2,
            outerHeightStyle
          };
        }
        if (true) {
          if (renders.current === 20) {
            console.error(["Material-UI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
          }
        }
        return prevState;
      });
    }, [rowsMax, rowsMin, props.placeholder]);
    React134.useEffect(function() {
      var handleResize = debounce2(function() {
        renders.current = 0;
        syncHeight();
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [syncHeight]);
    useEnhancedEffect9(function() {
      syncHeight();
    });
    React134.useEffect(function() {
      renders.current = 0;
    }, [value]);
    var handleChange = function handleChange2(event) {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return React134.createElement(React134.Fragment, null, React134.createElement("textarea", _extends({
      value,
      onChange: handleChange,
      ref: handleRef,
      rows: rowsMin,
      style: _extends({
        height: state.outerHeightStyle,
        overflow: state.overflow ? "hidden" : null
      }, style13)
    }, other)), React134.createElement("textarea", {
      "aria-hidden": true,
      className: props.className,
      readOnly: true,
      ref: shadowRef,
      tabIndex: -1,
      style: _extends({}, styles115.shadow, style13)
    }));
  });
  TextareaAutosize2.propTypes = {
    className: prop_types125.default.string,
    onChange: prop_types125.default.func,
    placeholder: prop_types125.default.string,
    rows: prop_types125.default.oneOfType([prop_types125.default.number, prop_types125.default.string]),
    rowsMax: prop_types125.default.oneOfType([prop_types125.default.number, prop_types125.default.string]),
    rowsMin: prop_types125.default.oneOfType([prop_types125.default.number, prop_types125.default.string]),
    style: prop_types125.default.object,
    value: prop_types125.default.oneOfType([prop_types125.default.arrayOf(prop_types125.default.string), prop_types125.default.number, prop_types125.default.string])
  };
  const TextareaAutosize_default = TextareaAutosize2;

  // node_modules/@material-ui/core/esm/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj) {
    var SSR = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@material-ui/core/esm/InputBase/InputBase.js
  const React65 = __toModule(require_react());
  const prop_types62 = __toModule(require_prop_types());
  var styles58 = function styles131(theme) {
    var light2 = theme.palette.type === "light";
    var placeholder = {
      color: "currentColor",
      opacity: light2 ? 0.42 : 0.5,
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    };
    var placeholderHidden = {
      opacity: "0 !important"
    };
    var placeholderVisible = {
      opacity: light2 ? 0.42 : 0.5
    };
    return {
      "@global": {
        "@keyframes mui-auto-fill": {},
        "@keyframes mui-auto-fill-cancel": {}
      },
      root: _extends({}, theme.typography.body1, {
        color: theme.palette.text.primary,
        lineHeight: "1.1876em",
        boxSizing: "border-box",
        position: "relative",
        cursor: "text",
        display: "inline-flex",
        alignItems: "center",
        "&$disabled": {
          color: theme.palette.text.disabled,
          cursor: "default"
        }
      }),
      formControl: {},
      focused: {},
      disabled: {},
      adornedStart: {},
      adornedEnd: {},
      error: {},
      marginDense: {},
      multiline: {
        padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
        "&$marginDense": {
          paddingTop: 4 - 1
        }
      },
      colorSecondary: {},
      fullWidth: {
        width: "100%"
      },
      input: {
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.1876em",
        margin: 0,
        WebkitTapHighlightColor: "transparent",
        display: "block",
        minWidth: 0,
        width: "100%",
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        "&:-ms-input-placeholder": placeholder,
        "&::-ms-input-placeholder": placeholder,
        "&:focus": {
          outline: 0
        },
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          "-webkit-appearance": "none"
        },
        "label[data-shrink=false] + $formControl &": {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          "&:-ms-input-placeholder": placeholderHidden,
          "&::-ms-input-placeholder": placeholderHidden,
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          "&:focus:-ms-input-placeholder": placeholderVisible,
          "&:focus::-ms-input-placeholder": placeholderVisible
        },
        "&$disabled": {
          opacity: 1
        },
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      },
      inputMarginDense: {
        paddingTop: 4 - 1
      },
      inputMultiline: {
        height: "auto",
        resize: "none",
        padding: 0
      },
      inputTypeSearch: {
        "-moz-appearance": "textfield",
        "-webkit-appearance": "textfield"
      },
      inputAdornedStart: {},
      inputAdornedEnd: {},
      inputHiddenLabel: {}
    };
  };
  var useEnhancedEffect2 = typeof window === "undefined" ? React65.useEffect : React65.useLayoutEffect;
  var InputBase3 = React65.forwardRef(function InputBase7(props, ref) {
    var ariaDescribedby = props["aria-describedby"], autoComplete = props.autoComplete, autoFocus = props.autoFocus, classes = props.classes, className = props.className, color2 = props.color, defaultValue = props.defaultValue, disabled = props.disabled, endAdornment = props.endAdornment, error = props.error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, id = props.id, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$inputProps = props.inputProps, inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps, inputRefProp = props.inputRef, margin = props.margin, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, placeholder = props.placeholder, readOnly = props.readOnly, renderSuffix = props.renderSuffix, rows = props.rows, rowsMax = props.rowsMax, rowsMin = props.rowsMin, startAdornment = props.startAdornment, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, valueProp = props.value, other = _objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "startAdornment", "type", "value"]);
    var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    var _React$useRef = React65.useRef(value != null), isControlled = _React$useRef.current;
    var inputRef = React65.useRef();
    var handleInputRefWarning = React65.useCallback(function(instance) {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["Material-UI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `inputRef` prop.", "Make sure the `inputRef` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    var handleInputPropsRefProp = useForkRef2(inputPropsProp.ref, handleInputRefWarning);
    var handleInputRefProp = useForkRef2(inputRefProp, handleInputPropsRefProp);
    var handleInputRef = useForkRef2(inputRef, handleInputRefProp);
    var _React$useState = React65.useState(false), focused = _React$useState[0], setFocused = _React$useState[1];
    var muiFormControl = useFormControl();
    if (true) {
      React65.useEffect(function() {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "margin", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React65.useEffect(function() {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    var onFilled = muiFormControl && muiFormControl.onFilled;
    var onEmpty = muiFormControl && muiFormControl.onEmpty;
    var checkDirty = React65.useCallback(function(obj) {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect2(function() {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    var handleFocus = function handleFocus2(event) {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    var handleBlur = function handleBlur2(event) {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    var handleChange = function handleChange2(event) {
      if (!isControlled) {
        var element = event.target || inputRef.current;
        if (element == null) {
          throw new Error("Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info.");
        }
        checkDirty({
          value: element.value
        });
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
      }
      if (onChange) {
        onChange.apply(void 0, [event].concat(args));
      }
    };
    React65.useEffect(function() {
      checkDirty(inputRef.current);
    }, []);
    var handleClick = function handleClick2(event) {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    var InputComponent = inputComponent;
    var inputProps = _extends({}, inputPropsProp, {
      ref: handleInputRef
    });
    if (typeof InputComponent !== "string") {
      inputProps = _extends({
        inputRef: handleInputRef,
        type
      }, inputProps, {
        ref: null
      });
    } else if (multiline) {
      if (rows && !rowsMax && !rowsMin) {
        InputComponent = "textarea";
      } else {
        inputProps = _extends({
          rows,
          rowsMax
        }, inputProps);
        InputComponent = TextareaAutosize_default;
      }
    } else {
      inputProps = _extends({
        type
      }, inputProps);
    }
    var handleAutoFill = function handleAutoFill2(event) {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React65.useEffect(function() {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    return React65.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes["color".concat(capitalize2(fcs.color || "primary"))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === "dense" && classes.marginDense),
      onClick: handleClick,
      ref
    }, other), startAdornment, React65.createElement(FormControlContext_default.Provider, {
      value: null
    }, React65.createElement(InputComponent, _extends({
      "aria-invalid": fcs.error,
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      defaultValue,
      disabled: fcs.disabled,
      id,
      onAnimationStart: handleAutoFill,
      name,
      placeholder,
      readOnly,
      required: fcs.required,
      rows,
      value,
      onKeyDown,
      onKeyUp
    }, inputProps, {
      className: clsx_m_default(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === "search" && classes.inputTypeSearch, fcs.margin === "dense" && classes.inputMarginDense),
      onBlur: handleBlur,
      onChange: handleChange,
      onFocus: handleFocus
    }))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
      startAdornment
    })) : null);
  });
  InputBase3.propTypes = {
    "aria-describedby": prop_types62.default.string,
    autoComplete: prop_types62.default.string,
    autoFocus: prop_types62.default.bool,
    classes: prop_types62.default.object,
    className: prop_types62.default.string,
    color: prop_types62.default.oneOf(["primary", "secondary"]),
    defaultValue: prop_types62.default.any,
    disabled: prop_types62.default.bool,
    endAdornment: prop_types62.default.node,
    error: prop_types62.default.bool,
    fullWidth: prop_types62.default.bool,
    id: prop_types62.default.string,
    inputComponent: prop_types62.default.elementType,
    inputProps: prop_types62.default.object,
    inputRef: refType_default,
    margin: prop_types62.default.oneOf(["dense", "none"]),
    multiline: prop_types62.default.bool,
    name: prop_types62.default.string,
    onBlur: prop_types62.default.func,
    onChange: prop_types62.default.func,
    onClick: prop_types62.default.func,
    onFocus: prop_types62.default.func,
    onKeyDown: prop_types62.default.func,
    onKeyUp: prop_types62.default.func,
    placeholder: prop_types62.default.string,
    readOnly: prop_types62.default.bool,
    renderSuffix: prop_types62.default.func,
    required: prop_types62.default.bool,
    rows: prop_types62.default.oneOfType([prop_types62.default.number, prop_types62.default.string]),
    rowsMax: prop_types62.default.oneOfType([prop_types62.default.number, prop_types62.default.string]),
    rowsMin: prop_types62.default.oneOfType([prop_types62.default.number, prop_types62.default.string]),
    startAdornment: prop_types62.default.node,
    type: prop_types62.default.string,
    value: prop_types62.default.any
  };
  const InputBase_default = withStyles_default(styles58, {
    name: "MuiInputBase"
  })(InputBase3);

  // node_modules/@material-ui/core/esm/FilledInput/FilledInput.js
  const React46 = __toModule(require_react());
  const prop_types44 = __toModule(require_prop_types());
  var styles42 = function styles131(theme) {
    var light2 = theme.palette.type === "light";
    var bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    var backgroundColor = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.09)";
    return {
      root: {
        position: "relative",
        backgroundColor,
        borderTopLeftRadius: theme.shape.borderRadius,
        borderTopRightRadius: theme.shape.borderRadius,
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        "&:hover": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.13)" : "rgba(255, 255, 255, 0.13)",
          "@media (hover: none)": {
            backgroundColor
          }
        },
        "&$focused": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.09)"
        },
        "&$disabled": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)"
        }
      },
      colorSecondary: {
        "&$underline:after": {
          borderBottomColor: theme.palette.secondary.main
        }
      },
      underline: {
        "&:after": {
          borderBottom: "2px solid ".concat(theme.palette.primary.main),
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme.transitions.create("transform", {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        "&$focused:after": {
          transform: "scaleX(1)"
        },
        "&$error:after": {
          borderBottomColor: theme.palette.error.main,
          transform: "scaleX(1)"
        },
        "&:before": {
          borderBottom: "1px solid ".concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme.transitions.create("border-bottom-color", {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        "&:hover:before": {
          borderBottom: "1px solid ".concat(theme.palette.text.primary)
        },
        "&$disabled:before": {
          borderBottomStyle: "dotted"
        }
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 12
      },
      adornedEnd: {
        paddingRight: 12
      },
      error: {},
      marginDense: {},
      multiline: {
        padding: "27px 12px 10px",
        "&$marginDense": {
          paddingTop: 23,
          paddingBottom: 6
        }
      },
      input: {
        padding: "27px 12px 10px",
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme.palette.type === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme.palette.type === "light" ? null : "#fff",
          caretColor: theme.palette.type === "light" ? null : "#fff",
          borderTopLeftRadius: "inherit",
          borderTopRightRadius: "inherit"
        }
      },
      inputMarginDense: {
        paddingTop: 23,
        paddingBottom: 6
      },
      inputHiddenLabel: {
        paddingTop: 18,
        paddingBottom: 19,
        "&$inputMarginDense": {
          paddingTop: 10,
          paddingBottom: 11
        }
      },
      inputMultiline: {
        padding: 0
      },
      inputAdornedStart: {
        paddingLeft: 0
      },
      inputAdornedEnd: {
        paddingRight: 0
      }
    };
  };
  var FilledInput = React46.forwardRef(function FilledInput5(props, ref) {
    var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
    return React46.createElement(InputBase_default, _extends({
      classes: _extends({}, classes, {
        root: clsx_m_default(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  FilledInput.propTypes = {
    autoComplete: prop_types44.default.string,
    autoFocus: prop_types44.default.bool,
    classes: prop_types44.default.object,
    color: prop_types44.default.oneOf(["primary", "secondary"]),
    defaultValue: prop_types44.default.any,
    disabled: prop_types44.default.bool,
    disableUnderline: prop_types44.default.bool,
    endAdornment: prop_types44.default.node,
    error: prop_types44.default.bool,
    fullWidth: prop_types44.default.bool,
    id: prop_types44.default.string,
    inputComponent: prop_types44.default.elementType,
    inputProps: prop_types44.default.object,
    inputRef: refType_default,
    margin: prop_types44.default.oneOf(["dense", "none"]),
    multiline: prop_types44.default.bool,
    name: prop_types44.default.string,
    onChange: prop_types44.default.func,
    placeholder: prop_types44.default.string,
    readOnly: prop_types44.default.bool,
    required: prop_types44.default.bool,
    rows: prop_types44.default.oneOfType([prop_types44.default.number, prop_types44.default.string]),
    rowsMax: prop_types44.default.oneOfType([prop_types44.default.number, prop_types44.default.string]),
    startAdornment: prop_types44.default.node,
    type: prop_types44.default.string,
    value: prop_types44.default.any
  };
  FilledInput.muiName = "Input";
  const FilledInput_default = withStyles_default(styles42, {
    name: "MuiFilledInput"
  })(FilledInput);

  // node_modules/@material-ui/core/esm/FormControl/FormControl.js
  const React47 = __toModule(require_react());
  const prop_types45 = __toModule(require_prop_types());
  var styles43 = {
    root: {
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    },
    marginNormal: {
      marginTop: 16,
      marginBottom: 8
    },
    marginDense: {
      marginTop: 8,
      marginBottom: 4
    },
    fullWidth: {
      width: "100%"
    }
  };
  var FormControl = React47.forwardRef(function FormControl5(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, visuallyFocused = props.focused, _props$hiddenLabel = props.hiddenLabel, hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel, _props$margin = props.margin, margin = _props$margin === void 0 ? "none" : _props$margin, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, size = props.size, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);
    var _React$useState = React47.useState(function() {
      var initialAdornedStart = false;
      if (children) {
        React47.Children.forEach(children, function(child) {
          if (!isMuiElement2(child, ["Input", "Select"])) {
            return;
          }
          var input = isMuiElement2(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    }), adornedStart = _React$useState[0], setAdornedStart = _React$useState[1];
    var _React$useState2 = React47.useState(function() {
      var initialFilled = false;
      if (children) {
        React47.Children.forEach(children, function(child) {
          if (!isMuiElement2(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    }), filled = _React$useState2[0], setFilled = _React$useState2[1];
    var _React$useState3 = React47.useState(false), _focused = _React$useState3[0], setFocused = _React$useState3[1];
    var focused = visuallyFocused !== void 0 ? visuallyFocused : _focused;
    if (disabled && focused) {
      setFocused(false);
    }
    var registerEffect;
    if (true) {
      var registeredInput = React47.useRef(false);
      registerEffect = function registerEffect2() {
        if (registeredInput.current) {
          console.error(["Material-UI: There are multiple InputBase components inside a FormControl.", "This is not supported. It might cause infinite rendering loops.", "Only use one InputBase."].join("\n"));
        }
        registeredInput.current = true;
        return function() {
          registeredInput.current = false;
        };
      };
    }
    var onFilled = React47.useCallback(function() {
      setFilled(true);
    }, []);
    var onEmpty = React47.useCallback(function() {
      setFilled(false);
    }, []);
    var childContext = {
      adornedStart,
      setAdornedStart,
      color: color2,
      disabled,
      error,
      filled,
      focused,
      fullWidth,
      hiddenLabel,
      margin: (size === "small" ? "dense" : void 0) || margin,
      onBlur: function onBlur() {
        setFocused(false);
      },
      onEmpty,
      onFilled,
      onFocus: function onFocus() {
        setFocused(true);
      },
      registerEffect,
      required,
      variant
    };
    return React47.createElement(FormControlContext_default.Provider, {
      value: childContext
    }, React47.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, margin !== "none" && classes["margin".concat(capitalize2(margin))], fullWidth && classes.fullWidth),
      ref
    }, other), children));
  });
  FormControl.propTypes = {
    children: prop_types45.default.node,
    classes: prop_types45.default.object,
    className: prop_types45.default.string,
    color: prop_types45.default.oneOf(["primary", "secondary"]),
    component: prop_types45.default.elementType,
    disabled: prop_types45.default.bool,
    error: prop_types45.default.bool,
    focused: prop_types45.default.bool,
    fullWidth: prop_types45.default.bool,
    hiddenLabel: prop_types45.default.bool,
    margin: prop_types45.default.oneOf(["dense", "none", "normal"]),
    required: prop_types45.default.bool,
    size: prop_types45.default.oneOf(["medium", "small"]),
    variant: prop_types45.default.oneOf(["filled", "outlined", "standard"])
  };
  const FormControl_default = withStyles_default(styles43, {
    name: "MuiFormControl"
  })(FormControl);

  // node_modules/@material-ui/core/esm/FormControlLabel/FormControlLabel.js
  const React50 = __toModule(require_react());
  const prop_types46 = __toModule(require_prop_types());
  var styles44 = function styles131(theme) {
    return {
      root: {
        display: "inline-flex",
        alignItems: "center",
        cursor: "pointer",
        verticalAlign: "middle",
        WebkitTapHighlightColor: "transparent",
        marginLeft: -11,
        marginRight: 16,
        "&$disabled": {
          cursor: "default"
        }
      },
      labelPlacementStart: {
        flexDirection: "row-reverse",
        marginLeft: 16,
        marginRight: -11
      },
      labelPlacementTop: {
        flexDirection: "column-reverse",
        marginLeft: 16
      },
      labelPlacementBottom: {
        flexDirection: "column",
        marginLeft: 16
      },
      disabled: {},
      label: {
        "&$disabled": {
          color: theme.palette.text.disabled
        }
      }
    };
  };
  var FormControlLabel = React50.forwardRef(function FormControlLabel4(props, ref) {
    var checked = props.checked, classes = props.classes, className = props.className, control = props.control, disabledProp = props.disabled, inputRef = props.inputRef, label = props.label, _props$labelPlacement = props.labelPlacement, labelPlacement = _props$labelPlacement === void 0 ? "end" : _props$labelPlacement, name = props.name, onChange = props.onChange, value = props.value, other = _objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "name", "onChange", "value"]);
    var muiFormControl = useFormControl3();
    var disabled = disabledProp;
    if (typeof disabled === "undefined" && typeof control.props.disabled !== "undefined") {
      disabled = control.props.disabled;
    }
    if (typeof disabled === "undefined" && muiFormControl) {
      disabled = muiFormControl.disabled;
    }
    var controlProps = {
      disabled
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach(function(key3) {
      if (typeof control.props[key3] === "undefined" && typeof props[key3] !== "undefined") {
        controlProps[key3] = props[key3];
      }
    });
    return React50.createElement("label", _extends({
      className: clsx_m_default(classes.root, className, labelPlacement !== "end" && classes["labelPlacement".concat(capitalize2(labelPlacement))], disabled && classes.disabled),
      ref
    }, other), React50.cloneElement(control, controlProps), React50.createElement(Typography_default, {
      component: "span",
      className: clsx_m_default(classes.label, disabled && classes.disabled)
    }, label));
  });
  FormControlLabel.propTypes = {
    checked: prop_types46.default.bool,
    classes: prop_types46.default.object,
    className: prop_types46.default.string,
    control: prop_types46.default.element.isRequired,
    disabled: prop_types46.default.bool,
    inputRef: refType_default,
    label: prop_types46.default.node,
    labelPlacement: prop_types46.default.oneOf(["bottom", "end", "start", "top"]),
    name: prop_types46.default.string,
    onChange: prop_types46.default.func,
    value: prop_types46.default.any
  };
  const FormControlLabel_default = withStyles_default(styles44, {
    name: "MuiFormControlLabel"
  })(FormControlLabel);

  // node_modules/@material-ui/core/esm/FormGroup/FormGroup.js
  const React51 = __toModule(require_react());
  const prop_types47 = __toModule(require_prop_types());
  var styles45 = {
    root: {
      display: "flex",
      flexDirection: "column",
      flexWrap: "wrap"
    },
    row: {
      flexDirection: "row"
    }
  };
  var FormGroup = React51.forwardRef(function FormGroup4(props, ref) {
    var classes = props.classes, className = props.className, _props$row = props.row, row = _props$row === void 0 ? false : _props$row, other = _objectWithoutProperties(props, ["classes", "className", "row"]);
    return React51.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, row && classes.row),
      ref
    }, other));
  });
  FormGroup.propTypes = {
    children: prop_types47.default.node,
    classes: prop_types47.default.object,
    className: prop_types47.default.string,
    row: prop_types47.default.bool
  };
  const FormGroup_default = withStyles_default(styles45, {
    name: "MuiFormGroup"
  })(FormGroup);

  // node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js
  const React52 = __toModule(require_react());
  const prop_types48 = __toModule(require_prop_types());
  var styles46 = function styles131(theme) {
    return {
      root: _extends({
        color: theme.palette.text.secondary
      }, theme.typography.caption, {
        textAlign: "left",
        marginTop: 3,
        margin: 0,
        "&$disabled": {
          color: theme.palette.text.disabled
        },
        "&$error": {
          color: theme.palette.error.main
        }
      }),
      error: {},
      disabled: {},
      marginDense: {
        marginTop: 4
      },
      contained: {
        marginLeft: 14,
        marginRight: 14
      },
      focused: {},
      filled: {},
      required: {}
    };
  };
  var FormHelperText = React52.forwardRef(function FormHelperText4(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "p" : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, margin = props.margin, required = props.required, variant = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"]);
    var muiFormControl = useFormControl3();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "margin", "disabled", "error", "filled", "focused", "required"]
    });
    return React52.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, (fcs.variant === "filled" || fcs.variant === "outlined") && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === "dense" && classes.marginDense),
      ref
    }, other), children === " " ? React52.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    }) : children);
  });
  FormHelperText.propTypes = {
    children: prop_types48.default.node,
    classes: prop_types48.default.object,
    className: prop_types48.default.string,
    component: prop_types48.default.elementType,
    disabled: prop_types48.default.bool,
    error: prop_types48.default.bool,
    filled: prop_types48.default.bool,
    focused: prop_types48.default.bool,
    margin: prop_types48.default.oneOf(["dense"]),
    required: prop_types48.default.bool,
    variant: prop_types48.default.oneOf(["filled", "outlined", "standard"])
  };
  const FormHelperText_default = withStyles_default(styles46, {
    name: "MuiFormHelperText"
  })(FormHelperText);

  // node_modules/@material-ui/core/esm/FormLabel/FormLabel.js
  const React53 = __toModule(require_react());
  const prop_types49 = __toModule(require_prop_types());
  var styles47 = function styles131(theme) {
    return {
      root: _extends({
        color: theme.palette.text.secondary
      }, theme.typography.body1, {
        lineHeight: 1,
        padding: 0,
        "&$focused": {
          color: theme.palette.primary.main
        },
        "&$disabled": {
          color: theme.palette.text.disabled
        },
        "&$error": {
          color: theme.palette.error.main
        }
      }),
      colorSecondary: {
        "&$focused": {
          color: theme.palette.secondary.main
        }
      },
      focused: {},
      disabled: {},
      error: {},
      filled: {},
      required: {},
      asterisk: {
        "&$error": {
          color: theme.palette.error.main
        }
      }
    };
  };
  var FormLabel = React53.forwardRef(function FormLabel4(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, color2 = props.color, _props$component = props.component, Component7 = _props$component === void 0 ? "label" : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, required = props.required, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);
    var muiFormControl = useFormControl3();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    return React53.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, classes["color".concat(capitalize2(fcs.color || "primary"))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
      ref
    }, other), children, fcs.required && React53.createElement("span", {
      "aria-hidden": true,
      className: clsx_m_default(classes.asterisk, fcs.error && classes.error)
    }, " ", "*"));
  });
  FormLabel.propTypes = {
    children: prop_types49.default.node,
    classes: prop_types49.default.object,
    className: prop_types49.default.string,
    color: prop_types49.default.oneOf(["primary", "secondary"]),
    component: prop_types49.default.elementType,
    disabled: prop_types49.default.bool,
    error: prop_types49.default.bool,
    filled: prop_types49.default.bool,
    focused: prop_types49.default.bool,
    required: prop_types49.default.bool
  };
  const FormLabel_default = withStyles_default(styles47, {
    name: "MuiFormLabel"
  })(FormLabel);

  // node_modules/@material-ui/core/esm/Grid/Grid.js
  const React54 = __toModule(require_react());
  const prop_types50 = __toModule(require_prop_types());
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  function generateGrid(globalStyles, theme, breakpoint) {
    var styles131 = {};
    GRID_SIZES.forEach(function(size) {
      var key3 = "grid-".concat(breakpoint, "-").concat(size);
      if (size === true) {
        styles131[key3] = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
        return;
      }
      if (size === "auto") {
        styles131[key3] = {
          flexBasis: "auto",
          flexGrow: 0,
          maxWidth: "none"
        };
        return;
      }
      var width2 = "".concat(Math.round(size / 12 * 1e8) / 1e6, "%");
      styles131[key3] = {
        flexBasis: width2,
        flexGrow: 0,
        maxWidth: width2
      };
    });
    if (breakpoint === "xs") {
      _extends(globalStyles, styles131);
    } else {
      globalStyles[theme.breakpoints.up(breakpoint)] = styles131;
    }
  }
  function getOffset(val) {
    var div = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var parse = parseFloat(val);
    return "".concat(parse / div).concat(String(val).replace(String(parse), "") || "px");
  }
  function generateGutter(theme, breakpoint) {
    var styles131 = {};
    SPACINGS.forEach(function(spacing3) {
      var themeSpacing = theme.spacing(spacing3);
      if (themeSpacing === 0) {
        return;
      }
      styles131["spacing-".concat(breakpoint, "-").concat(spacing3)] = {
        margin: "-".concat(getOffset(themeSpacing, 2)),
        width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
        "& > $item": {
          padding: getOffset(themeSpacing, 2)
        }
      };
    });
    return styles131;
  }
  var styles48 = function styles131(theme) {
    return _extends({
      root: {},
      container: {
        boxSizing: "border-box",
        display: "flex",
        flexWrap: "wrap",
        width: "100%"
      },
      item: {
        boxSizing: "border-box",
        margin: "0"
      },
      zeroMinWidth: {
        minWidth: 0
      },
      "direction-xs-column": {
        flexDirection: "column"
      },
      "direction-xs-column-reverse": {
        flexDirection: "column-reverse"
      },
      "direction-xs-row-reverse": {
        flexDirection: "row-reverse"
      },
      "wrap-xs-nowrap": {
        flexWrap: "nowrap"
      },
      "wrap-xs-wrap-reverse": {
        flexWrap: "wrap-reverse"
      },
      "align-items-xs-center": {
        alignItems: "center"
      },
      "align-items-xs-flex-start": {
        alignItems: "flex-start"
      },
      "align-items-xs-flex-end": {
        alignItems: "flex-end"
      },
      "align-items-xs-baseline": {
        alignItems: "baseline"
      },
      "align-content-xs-center": {
        alignContent: "center"
      },
      "align-content-xs-flex-start": {
        alignContent: "flex-start"
      },
      "align-content-xs-flex-end": {
        alignContent: "flex-end"
      },
      "align-content-xs-space-between": {
        alignContent: "space-between"
      },
      "align-content-xs-space-around": {
        alignContent: "space-around"
      },
      "justify-xs-center": {
        justifyContent: "center"
      },
      "justify-xs-flex-end": {
        justifyContent: "flex-end"
      },
      "justify-xs-space-between": {
        justifyContent: "space-between"
      },
      "justify-xs-space-around": {
        justifyContent: "space-around"
      },
      "justify-xs-space-evenly": {
        justifyContent: "space-evenly"
      }
    }, generateGutter(theme, "xs"), theme.breakpoints.keys.reduce(function(accumulator, key3) {
      generateGrid(accumulator, theme, key3);
      return accumulator;
    }, {}));
  };
  var Grid = React54.forwardRef(function Grid4(props, ref) {
    var _props$alignContent = props.alignContent, alignContent2 = _props$alignContent === void 0 ? "stretch" : _props$alignContent, _props$alignItems = props.alignItems, alignItems2 = _props$alignItems === void 0 ? "stretch" : _props$alignItems, classes = props.classes, classNameProp = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$container = props.container, container = _props$container === void 0 ? false : _props$container, _props$direction = props.direction, direction = _props$direction === void 0 ? "row" : _props$direction, _props$item = props.item, item = _props$item === void 0 ? false : _props$item, _props$justify = props.justify, justify = _props$justify === void 0 ? "flex-start" : _props$justify, _props$lg = props.lg, lg = _props$lg === void 0 ? false : _props$lg, _props$md = props.md, md = _props$md === void 0 ? false : _props$md, _props$sm = props.sm, sm = _props$sm === void 0 ? false : _props$sm, _props$spacing = props.spacing, spacing3 = _props$spacing === void 0 ? 0 : _props$spacing, _props$wrap = props.wrap, wrap = _props$wrap === void 0 ? "wrap" : _props$wrap, _props$xl = props.xl, xl = _props$xl === void 0 ? false : _props$xl, _props$xs = props.xs, xs = _props$xs === void 0 ? false : _props$xs, _props$zeroMinWidth = props.zeroMinWidth, zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth, other = _objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);
    var className = clsx_m_default(classes.root, classNameProp, container && [classes.container, spacing3 !== 0 && classes["spacing-xs-".concat(String(spacing3))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== "row" && classes["direction-xs-".concat(String(direction))], wrap !== "wrap" && classes["wrap-xs-".concat(String(wrap))], alignItems2 !== "stretch" && classes["align-items-xs-".concat(String(alignItems2))], alignContent2 !== "stretch" && classes["align-content-xs-".concat(String(alignContent2))], justify !== "flex-start" && classes["justify-xs-".concat(String(justify))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
    return React54.createElement(Component7, _extends({
      className,
      ref
    }, other));
  });
  Grid.propTypes = {
    alignContent: prop_types50.default.oneOf(["stretch", "center", "flex-start", "flex-end", "space-between", "space-around"]),
    alignItems: prop_types50.default.oneOf(["flex-start", "center", "flex-end", "stretch", "baseline"]),
    children: prop_types50.default.node,
    classes: prop_types50.default.object.isRequired,
    className: prop_types50.default.string,
    component: prop_types50.default.elementType,
    container: prop_types50.default.bool,
    direction: prop_types50.default.oneOf(["row", "row-reverse", "column", "column-reverse"]),
    item: prop_types50.default.bool,
    justify: prop_types50.default.oneOf(["flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly"]),
    lg: prop_types50.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    md: prop_types50.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    sm: prop_types50.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    spacing: prop_types50.default.oneOf(SPACINGS),
    wrap: prop_types50.default.oneOf(["nowrap", "wrap", "wrap-reverse"]),
    xl: prop_types50.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    xs: prop_types50.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    zeroMinWidth: prop_types50.default.bool
  };
  var StyledGrid = withStyles_default(styles48, {
    name: "MuiGrid"
  })(Grid);
  if (true) {
    var requireProp = requirePropFactory2("Grid");
    StyledGrid.propTypes = _extends({}, StyledGrid.propTypes, {
      alignContent: requireProp("container"),
      alignItems: requireProp("container"),
      direction: requireProp("container"),
      justify: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  const Grid_default = StyledGrid;

  // node_modules/@material-ui/core/esm/GridList/GridList.js
  const React55 = __toModule(require_react());
  const react_is6 = __toModule(require_react_is());
  const prop_types51 = __toModule(require_prop_types());
  var styles49 = {
    root: {
      display: "flex",
      flexWrap: "wrap",
      overflowY: "auto",
      listStyle: "none",
      padding: 0,
      WebkitOverflowScrolling: "touch"
    }
  };
  var GridList = React55.forwardRef(function GridList3(props, ref) {
    var _props$cellHeight = props.cellHeight, cellHeight = _props$cellHeight === void 0 ? 180 : _props$cellHeight, children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 2 : _props$cols, _props$component = props.component, Component7 = _props$component === void 0 ? "ul" : _props$component, _props$spacing = props.spacing, spacing3 = _props$spacing === void 0 ? 4 : _props$spacing, style13 = props.style, other = _objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "spacing", "style"]);
    return React55.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref,
      style: _extends({
        margin: -spacing3 / 2
      }, style13)
    }, other), React55.Children.map(children, function(child) {
      if (!React55.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is6.isFragment(child)) {
          console.error(["Material-UI: The GridList component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var childCols = child.props.cols || 1;
      var childRows = child.props.rows || 1;
      return React55.cloneElement(child, {
        style: _extends({
          width: "".concat(100 / cols * childCols, "%"),
          height: cellHeight === "auto" ? "auto" : cellHeight * childRows + spacing3,
          padding: spacing3 / 2
        }, child.props.style)
      });
    }));
  });
  GridList.propTypes = {
    cellHeight: prop_types51.default.oneOfType([prop_types51.default.number, prop_types51.default.oneOf(["auto"])]),
    children: prop_types51.default.node.isRequired,
    classes: prop_types51.default.object.isRequired,
    className: prop_types51.default.string,
    cols: prop_types51.default.number,
    component: prop_types51.default.elementType,
    spacing: prop_types51.default.number,
    style: prop_types51.default.object
  };
  const GridList_default = withStyles_default(styles49, {
    name: "MuiGridList"
  })(GridList);

  // node_modules/@material-ui/core/esm/GridListTile/GridListTile.js
  const React56 = __toModule(require_react());
  const prop_types52 = __toModule(require_prop_types());
  var styles50 = {
    root: {
      boxSizing: "border-box",
      flexShrink: 0
    },
    tile: {
      position: "relative",
      display: "block",
      height: "100%",
      overflow: "hidden"
    },
    imgFullHeight: {
      height: "100%",
      transform: "translateX(-50%)",
      position: "relative",
      left: "50%"
    },
    imgFullWidth: {
      width: "100%",
      position: "relative",
      transform: "translateY(-50%)",
      top: "50%"
    }
  };
  var fit = function fit2(imgEl, classes) {
    if (!imgEl || !imgEl.complete) {
      return;
    }
    if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {
      var _imgEl$classList, _imgEl$classList2;
      (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _toConsumableArray(classes.imgFullWidth.split(" ")));
      (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _toConsumableArray(classes.imgFullHeight.split(" ")));
    } else {
      var _imgEl$classList3, _imgEl$classList4;
      (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _toConsumableArray(classes.imgFullHeight.split(" ")));
      (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _toConsumableArray(classes.imgFullWidth.split(" ")));
    }
  };
  function ensureImageCover(imgEl, classes) {
    if (!imgEl) {
      return;
    }
    if (imgEl.complete) {
      fit(imgEl, classes);
    } else {
      imgEl.addEventListener("load", function() {
        fit(imgEl, classes);
      });
    }
  }
  var GridListTile = React56.forwardRef(function GridListTile3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 1 : _props$cols, _props$component = props.component, Component7 = _props$component === void 0 ? "li" : _props$component, _props$rows = props.rows, rows = _props$rows === void 0 ? 1 : _props$rows, other = _objectWithoutProperties(props, ["children", "classes", "className", "cols", "component", "rows"]);
    var imgRef = React56.useRef(null);
    React56.useEffect(function() {
      ensureImageCover(imgRef.current, classes);
    });
    React56.useEffect(function() {
      var handleResize = debounce2(function() {
        fit(imgRef.current, classes);
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [classes]);
    return React56.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other), React56.createElement("div", {
      className: classes.tile
    }, React56.Children.map(children, function(child) {
      if (!React56.isValidElement(child)) {
        return null;
      }
      if (child.type === "img" || isMuiElement2(child, ["Image"])) {
        return React56.cloneElement(child, {
          ref: imgRef
        });
      }
      return child;
    })));
  });
  GridListTile.propTypes = {
    children: prop_types52.default.node,
    classes: prop_types52.default.object.isRequired,
    className: prop_types52.default.string,
    cols: prop_types52.default.number,
    component: prop_types52.default.elementType,
    rows: prop_types52.default.number
  };
  const GridListTile_default = withStyles_default(styles50, {
    name: "MuiGridListTile"
  })(GridListTile);

  // node_modules/@material-ui/core/esm/GridListTileBar/GridListTileBar.js
  const React57 = __toModule(require_react());
  const prop_types53 = __toModule(require_prop_types());
  var styles51 = function styles131(theme) {
    return {
      root: {
        position: "absolute",
        left: 0,
        right: 0,
        height: 48,
        background: "rgba(0, 0, 0, 0.5)",
        display: "flex",
        alignItems: "center",
        fontFamily: theme.typography.fontFamily
      },
      titlePositionBottom: {
        bottom: 0
      },
      titlePositionTop: {
        top: 0
      },
      rootSubtitle: {
        height: 68
      },
      titleWrap: {
        flexGrow: 1,
        marginLeft: 16,
        marginRight: 16,
        color: theme.palette.common.white,
        overflow: "hidden"
      },
      titleWrapActionPosLeft: {
        marginLeft: 0
      },
      titleWrapActionPosRight: {
        marginRight: 0
      },
      title: {
        fontSize: theme.typography.pxToRem(16),
        lineHeight: "24px",
        textOverflow: "ellipsis",
        overflow: "hidden",
        whiteSpace: "nowrap"
      },
      subtitle: {
        fontSize: theme.typography.pxToRem(12),
        lineHeight: 1,
        textOverflow: "ellipsis",
        overflow: "hidden",
        whiteSpace: "nowrap"
      },
      actionIcon: {},
      actionIconActionPosLeft: {
        order: -1
      }
    };
  };
  var GridListTileBar = React57.forwardRef(function GridListTileBar3(props, ref) {
    var actionIcon = props.actionIcon, _props$actionPosition = props.actionPosition, actionPosition = _props$actionPosition === void 0 ? "right" : _props$actionPosition, classes = props.classes, className = props.className, subtitle = props.subtitle, title = props.title, _props$titlePosition = props.titlePosition, titlePosition = _props$titlePosition === void 0 ? "bottom" : _props$titlePosition, other = _objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "titlePosition"]);
    var actionPos = actionIcon && actionPosition;
    return React57.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, titlePosition === "top" ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle),
      ref
    }, other), React57.createElement("div", {
      className: clsx_m_default(classes.titleWrap, {
        left: classes.titleWrapActionPosLeft,
        right: classes.titleWrapActionPosRight
      }[actionPos])
    }, React57.createElement("div", {
      className: classes.title
    }, title), subtitle ? React57.createElement("div", {
      className: classes.subtitle
    }, subtitle) : null), actionIcon ? React57.createElement("div", {
      className: clsx_m_default(classes.actionIcon, actionPos === "left" && classes.actionIconActionPosLeft)
    }, actionIcon) : null);
  });
  GridListTileBar.propTypes = {
    actionIcon: prop_types53.default.node,
    actionPosition: prop_types53.default.oneOf(["left", "right"]),
    classes: prop_types53.default.object,
    className: prop_types53.default.string,
    subtitle: prop_types53.default.node,
    title: prop_types53.default.node,
    titlePosition: prop_types53.default.oneOf(["bottom", "top"])
  };
  const GridListTileBar_default = withStyles_default(styles51, {
    name: "MuiGridListTileBar"
  })(GridListTileBar);

  // node_modules/@material-ui/core/esm/Grow/Grow.js
  const React58 = __toModule(require_react());
  const prop_types54 = __toModule(require_prop_types());
  function getScale(value) {
    return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
  }
  var styles52 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var Grow = React58.forwardRef(function Grow6(props, ref) {
    var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style13 = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? "auto" : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var timer = React58.useRef();
    var autoTimeout = React58.useRef();
    var theme = useTheme2();
    var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React58.useRef(null);
    var foreignRef = useForkRef2(children.ref, ref);
    var handleRef = useForkRef2(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref6 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref24 = _slicedToArray(_ref6, 2), node = _ref24[0], isAppearing = _ref24[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      reflow(node);
      var _getTransitionProps = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "enter"
      }), transitionDuration = _getTransitionProps.duration, delay = _getTransitionProps.delay;
      var duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay
      })].join(",");
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var _getTransitionProps2 = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "exit"
      }), transitionDuration = _getTransitionProps2.duration, delay = _getTransitionProps2.delay;
      var duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay: delay || duration2 * 0.333
      })].join(",");
      node.style.opacity = "0";
      node.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    var addEndListener = function addEndListener2(nodeOrNext, maybeNext) {
      var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
      if (timeout === "auto") {
        timer.current = setTimeout(next, autoTimeout.current || 0);
      }
    };
    React58.useEffect(function() {
      return function() {
        clearTimeout(timer.current);
      };
    }, []);
    return React58.createElement(TransitionComponent, _extends({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener,
      timeout: timeout === "auto" ? null : timeout
    }, other), function(state, childProps) {
      return React58.cloneElement(children, _extends({
        style: _extends({
          opacity: 0,
          transform: getScale(0.75),
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles52[state], style13, children.props.style),
        ref: handleRef
      }, childProps));
    });
  });
  Grow.propTypes = {
    children: prop_types54.default.element,
    disableStrictModeCompat: prop_types54.default.bool,
    in: prop_types54.default.bool,
    onEnter: prop_types54.default.func,
    onEntered: prop_types54.default.func,
    onEntering: prop_types54.default.func,
    onExit: prop_types54.default.func,
    onExited: prop_types54.default.func,
    onExiting: prop_types54.default.func,
    style: prop_types54.default.object,
    timeout: prop_types54.default.oneOfType([prop_types54.default.oneOf(["auto"]), prop_types54.default.number, prop_types54.default.shape({
      appear: prop_types54.default.number,
      enter: prop_types54.default.number,
      exit: prop_types54.default.number
    })])
  };
  Grow.muiSupportAuto = true;
  const Grow_default = Grow;

  // node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js
  const React156 = __toModule(require_react());
  function useMediaQuery2(queryInput) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var theme = useTheme10();
    var props = getThemeProps({
      theme,
      name: "MuiUseMediaQuery",
      props: {}
    });
    if (true) {
      if (typeof queryInput === "function" && theme === null) {
        console.error(["Material-UI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    var query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    var supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    var _props$options = _extends({}, props, options), _props$options$defaul = _props$options.defaultMatches, defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul, _props$options$matchM = _props$options.matchMedia, matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM, _props$options$noSsr = _props$options.noSsr, noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr, _props$options$ssrMat = _props$options.ssrMatchMedia, ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;
    var _React$useState = React156.useState(function() {
      if (noSsr && supportMatchMedia) {
        return matchMedia(query).matches;
      }
      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      }
      return defaultMatches;
    }), match = _React$useState[0], setMatch = _React$useState[1];
    React156.useEffect(function() {
      var active = true;
      if (!supportMatchMedia) {
        return void 0;
      }
      var queryList = matchMedia(query);
      var updateMatch = function updateMatch2() {
        if (active) {
          setMatch(queryList.matches);
        }
      };
      updateMatch();
      queryList.addListener(updateMatch);
      return function() {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia, supportMatchMedia]);
    if (true) {
      React156.useDebugValue({
        query,
        match
      });
    }
    return match;
  }

  // node_modules/@material-ui/core/esm/withWidth/withWidth.js
  const React166 = __toModule(require_react());
  const prop_types133 = __toModule(require_prop_types());
  const hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  var isWidthUp = function isWidthUp2(breakpoint, width2) {
    var inclusive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (inclusive) {
      return keys.indexOf(breakpoint) <= keys.indexOf(width2);
    }
    return keys.indexOf(breakpoint) < keys.indexOf(width2);
  };
  var isWidthDown = function isWidthDown2(breakpoint, width2) {
    var inclusive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (inclusive) {
      return keys.indexOf(width2) <= keys.indexOf(breakpoint);
    }
    return keys.indexOf(width2) < keys.indexOf(breakpoint);
  };
  var useEnhancedEffect11 = typeof window === "undefined" ? React166.useEffect : React166.useLayoutEffect;
  var withWidth4 = function withWidth5() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return function(Component7) {
      var _options$withTheme = options.withTheme, withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme, _options$noSSR = options.noSSR, noSSR = _options$noSSR === void 0 ? false : _options$noSSR, initialWidthOption = options.initialWidth;
      function WithWidth(props) {
        var contextTheme = useTheme2();
        var theme = props.theme || contextTheme;
        var _getThemeProps = getThemeProps({
          theme,
          name: "MuiWithWidth",
          props: _extends({}, props)
        }), initialWidth = _getThemeProps.initialWidth, width2 = _getThemeProps.width, other = _objectWithoutProperties(_getThemeProps, ["initialWidth", "width"]);
        var _React$useState = React166.useState(false), mountedState = _React$useState[0], setMountedState = _React$useState[1];
        useEnhancedEffect11(function() {
          setMountedState(true);
        }, []);
        var keys2 = theme.breakpoints.keys.slice().reverse();
        var widthComputed = keys2.reduce(function(output, key3) {
          var matches = useMediaQuery2(theme.breakpoints.up(key3));
          return !output && matches ? key3 : output;
        }, null);
        var more = _extends({
          width: width2 || (mountedState || noSSR ? widthComputed : void 0) || initialWidth || initialWidthOption
        }, withThemeOption ? {
          theme
        } : {}, other);
        if (more.width === void 0) {
          return null;
        }
        return React166.createElement(Component7, more);
      }
      WithWidth.propTypes = {
        initialWidth: prop_types133.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
        theme: prop_types133.default.object,
        width: prop_types133.default.oneOf(["xs", "sm", "md", "lg", "xl"])
      };
      if (true) {
        WithWidth.displayName = "WithWidth(".concat(getDisplayName(Component7), ")");
      }
      hoist_non_react_statics.default(WithWidth, Component7);
      return WithWidth;
    };
  };
  const withWidth_default = withWidth4;

  // node_modules/@material-ui/core/esm/Hidden/HiddenJs.js
  const prop_types57 = __toModule(require_prop_types());
  function HiddenJs2(props) {
    var children = props.children, only = props.only, width2 = props.width;
    var theme = useTheme2();
    var visible = true;
    if (only) {
      if (Array.isArray(only)) {
        for (var i = 0; i < only.length; i += 1) {
          var breakpoint = only[i];
          if (width2 === breakpoint) {
            visible = false;
            break;
          }
        }
      } else if (only && width2 === only) {
        visible = false;
      }
    }
    if (visible) {
      for (var _i = 0; _i < theme.breakpoints.keys.length; _i += 1) {
        var _breakpoint = theme.breakpoints.keys[_i];
        var breakpointUp = props["".concat(_breakpoint, "Up")];
        var breakpointDown = props["".concat(_breakpoint, "Down")];
        if (breakpointUp && isWidthUp(_breakpoint, width2) || breakpointDown && isWidthDown(_breakpoint, width2)) {
          visible = false;
          break;
        }
      }
    }
    if (!visible) {
      return null;
    }
    return children;
  }
  HiddenJs2.propTypes = {
    children: prop_types57.default.node,
    className: prop_types57.default.string,
    implementation: prop_types57.default.oneOf(["js", "css"]),
    initialWidth: prop_types57.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
    lgDown: prop_types57.default.bool,
    lgUp: prop_types57.default.bool,
    mdDown: prop_types57.default.bool,
    mdUp: prop_types57.default.bool,
    only: prop_types57.default.oneOfType([prop_types57.default.oneOf(["xs", "sm", "md", "lg", "xl"]), prop_types57.default.arrayOf(prop_types57.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    smDown: prop_types57.default.bool,
    smUp: prop_types57.default.bool,
    width: prop_types57.default.string.isRequired,
    xlDown: prop_types57.default.bool,
    xlUp: prop_types57.default.bool,
    xsDown: prop_types57.default.bool,
    xsUp: prop_types57.default.bool
  };
  if (true) {
    HiddenJs2.propTypes = exactProp(HiddenJs2.propTypes);
  }
  const HiddenJs_default = withWidth_default()(HiddenJs2);

  // node_modules/@material-ui/core/esm/Hidden/HiddenCss.js
  const React60 = __toModule(require_react());
  const prop_types56 = __toModule(require_prop_types());
  var styles53 = function styles131(theme) {
    var hidden = {
      display: "none"
    };
    return theme.breakpoints.keys.reduce(function(acc, key3) {
      acc["only".concat(capitalize2(key3))] = _defineProperty({}, theme.breakpoints.only(key3), hidden);
      acc["".concat(key3, "Up")] = _defineProperty({}, theme.breakpoints.up(key3), hidden);
      acc["".concat(key3, "Down")] = _defineProperty({}, theme.breakpoints.down(key3), hidden);
      return acc;
    }, {});
  };
  function HiddenCss2(props) {
    var children = props.children, classes = props.classes, className = props.className, only = props.only, other = _objectWithoutProperties(props, ["children", "classes", "className", "only"]);
    var theme = useTheme2();
    if (true) {
      var unknownProps = Object.keys(other).filter(function(propName) {
        var isUndeclaredBreakpoint = !theme.breakpoints.keys.some(function(breakpoint2) {
          return "".concat(breakpoint2, "Up") === propName || "".concat(breakpoint2, "Down") === propName;
        });
        return isUndeclaredBreakpoint;
      });
      if (unknownProps.length > 0) {
        console.error('Material-UI: Unsupported props received by `<Hidden implementation="css" />`: '.concat(unknownProps.join(", "), ". Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?"));
      }
    }
    var clsx108 = [];
    if (className) {
      clsx108.push(className);
    }
    for (var i = 0; i < theme.breakpoints.keys.length; i += 1) {
      var breakpoint = theme.breakpoints.keys[i];
      var breakpointUp = props["".concat(breakpoint, "Up")];
      var breakpointDown = props["".concat(breakpoint, "Down")];
      if (breakpointUp) {
        clsx108.push(classes["".concat(breakpoint, "Up")]);
      }
      if (breakpointDown) {
        clsx108.push(classes["".concat(breakpoint, "Down")]);
      }
    }
    if (only) {
      var onlyBreakpoints = Array.isArray(only) ? only : [only];
      onlyBreakpoints.forEach(function(breakpoint2) {
        clsx108.push(classes["only".concat(capitalize2(breakpoint2))]);
      });
    }
    return React60.createElement("div", {
      className: clsx108.join(" ")
    }, children);
  }
  HiddenCss2.propTypes = {
    children: prop_types56.default.node,
    classes: prop_types56.default.object.isRequired,
    className: prop_types56.default.string,
    implementation: prop_types56.default.oneOf(["js", "css"]),
    lgDown: prop_types56.default.bool,
    lgUp: prop_types56.default.bool,
    mdDown: prop_types56.default.bool,
    mdUp: prop_types56.default.bool,
    only: prop_types56.default.oneOfType([prop_types56.default.oneOf(["xs", "sm", "md", "lg", "xl"]), prop_types56.default.arrayOf(prop_types56.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    smDown: prop_types56.default.bool,
    smUp: prop_types56.default.bool,
    xlDown: prop_types56.default.bool,
    xlUp: prop_types56.default.bool,
    xsDown: prop_types56.default.bool,
    xsUp: prop_types56.default.bool
  };
  const HiddenCss_default = withStyles_default(styles53, {
    name: "PrivateHiddenCss"
  })(HiddenCss2);

  // node_modules/@material-ui/core/esm/Hidden/Hidden.js
  const React59 = __toModule(require_react());
  const prop_types55 = __toModule(require_prop_types());
  function Hidden(props) {
    var _props$implementation = props.implementation, implementation = _props$implementation === void 0 ? "js" : _props$implementation, _props$lgDown = props.lgDown, lgDown = _props$lgDown === void 0 ? false : _props$lgDown, _props$lgUp = props.lgUp, lgUp = _props$lgUp === void 0 ? false : _props$lgUp, _props$mdDown = props.mdDown, mdDown = _props$mdDown === void 0 ? false : _props$mdDown, _props$mdUp = props.mdUp, mdUp = _props$mdUp === void 0 ? false : _props$mdUp, _props$smDown = props.smDown, smDown = _props$smDown === void 0 ? false : _props$smDown, _props$smUp = props.smUp, smUp = _props$smUp === void 0 ? false : _props$smUp, _props$xlDown = props.xlDown, xlDown = _props$xlDown === void 0 ? false : _props$xlDown, _props$xlUp = props.xlUp, xlUp = _props$xlUp === void 0 ? false : _props$xlUp, _props$xsDown = props.xsDown, xsDown = _props$xsDown === void 0 ? false : _props$xsDown, _props$xsUp = props.xsUp, xsUp = _props$xsUp === void 0 ? false : _props$xsUp, other = _objectWithoutProperties(props, ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"]);
    if (implementation === "js") {
      return React59.createElement(HiddenJs_default, _extends({
        lgDown,
        lgUp,
        mdDown,
        mdUp,
        smDown,
        smUp,
        xlDown,
        xlUp,
        xsDown,
        xsUp
      }, other));
    }
    return React59.createElement(HiddenCss_default, _extends({
      lgDown,
      lgUp,
      mdDown,
      mdUp,
      smDown,
      smUp,
      xlDown,
      xlUp,
      xsDown,
      xsUp
    }, other));
  }
  Hidden.propTypes = {
    children: prop_types55.default.node,
    className: prop_types55.default.string,
    implementation: prop_types55.default.oneOf(["js", "css"]),
    initialWidth: prop_types55.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
    lgDown: prop_types55.default.bool,
    lgUp: prop_types55.default.bool,
    mdDown: prop_types55.default.bool,
    mdUp: prop_types55.default.bool,
    only: prop_types55.default.oneOfType([prop_types55.default.oneOf(["xs", "sm", "md", "lg", "xl"]), prop_types55.default.arrayOf(prop_types55.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    smDown: prop_types55.default.bool,
    smUp: prop_types55.default.bool,
    xlDown: prop_types55.default.bool,
    xlUp: prop_types55.default.bool,
    xsDown: prop_types55.default.bool,
    xsUp: prop_types55.default.bool
  };
  const Hidden_default = Hidden;

  // node_modules/@material-ui/core/esm/Icon/Icon.js
  const React61 = __toModule(require_react());
  const prop_types58 = __toModule(require_prop_types());
  var styles54 = function styles131(theme) {
    return {
      root: {
        userSelect: "none",
        fontSize: theme.typography.pxToRem(24),
        width: "1em",
        height: "1em",
        overflow: "hidden",
        flexShrink: 0
      },
      colorPrimary: {
        color: theme.palette.primary.main
      },
      colorSecondary: {
        color: theme.palette.secondary.main
      },
      colorAction: {
        color: theme.palette.action.active
      },
      colorError: {
        color: theme.palette.error.main
      },
      colorDisabled: {
        color: theme.palette.action.disabled
      },
      fontSizeInherit: {
        fontSize: "inherit"
      },
      fontSizeSmall: {
        fontSize: theme.typography.pxToRem(20)
      },
      fontSizeLarge: {
        fontSize: theme.typography.pxToRem(36)
      }
    };
  };
  var Icon = React61.forwardRef(function Icon3(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component7 = _props$component === void 0 ? "span" : _props$component, _props$fontSize = props.fontSize, fontSize2 = _props$fontSize === void 0 ? "default" : _props$fontSize, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "fontSize"]);
    return React61.createElement(Component7, _extends({
      className: clsx_m_default("material-icons", classes.root, className, color2 !== "inherit" && classes["color".concat(capitalize2(color2))], fontSize2 !== "default" && classes["fontSize".concat(capitalize2(fontSize2))]),
      "aria-hidden": true,
      ref
    }, other));
  });
  Icon.propTypes = {
    children: prop_types58.default.node,
    classes: prop_types58.default.object.isRequired,
    className: prop_types58.default.string,
    color: prop_types58.default.oneOf(["inherit", "primary", "secondary", "action", "error", "disabled"]),
    component: prop_types58.default.elementType,
    fontSize: prop_types58.default.oneOf(["inherit", "default", "small", "large"])
  };
  Icon.muiName = "Icon";
  const Icon_default = withStyles_default(styles54, {
    name: "MuiIcon"
  })(Icon);

  // node_modules/@material-ui/core/esm/Input/Input.js
  const React63 = __toModule(require_react());
  const prop_types60 = __toModule(require_prop_types());
  var styles56 = function styles131(theme) {
    var light2 = theme.palette.type === "light";
    var bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    return {
      root: {
        position: "relative"
      },
      formControl: {
        "label + &": {
          marginTop: 16
        }
      },
      focused: {},
      disabled: {},
      colorSecondary: {
        "&$underline:after": {
          borderBottomColor: theme.palette.secondary.main
        }
      },
      underline: {
        "&:after": {
          borderBottom: "2px solid ".concat(theme.palette.primary.main),
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme.transitions.create("transform", {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        "&$focused:after": {
          transform: "scaleX(1)"
        },
        "&$error:after": {
          borderBottomColor: theme.palette.error.main,
          transform: "scaleX(1)"
        },
        "&:before": {
          borderBottom: "1px solid ".concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme.transitions.create("border-bottom-color", {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        "&:hover:not($disabled):before": {
          borderBottom: "2px solid ".concat(theme.palette.text.primary),
          "@media (hover: none)": {
            borderBottom: "1px solid ".concat(bottomLineColor)
          }
        },
        "&$disabled:before": {
          borderBottomStyle: "dotted"
        }
      },
      error: {},
      marginDense: {},
      multiline: {},
      fullWidth: {},
      input: {},
      inputMarginDense: {},
      inputMultiline: {},
      inputTypeSearch: {}
    };
  };
  var Input = React63.forwardRef(function Input6(props, ref) {
    var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
    return React63.createElement(InputBase_default, _extends({
      classes: _extends({}, classes, {
        root: clsx_m_default(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  Input.propTypes = {
    autoComplete: prop_types60.default.string,
    autoFocus: prop_types60.default.bool,
    classes: prop_types60.default.object,
    color: prop_types60.default.oneOf(["primary", "secondary"]),
    defaultValue: prop_types60.default.any,
    disabled: prop_types60.default.bool,
    disableUnderline: prop_types60.default.bool,
    endAdornment: prop_types60.default.node,
    error: prop_types60.default.bool,
    fullWidth: prop_types60.default.bool,
    id: prop_types60.default.string,
    inputComponent: prop_types60.default.elementType,
    inputProps: prop_types60.default.object,
    inputRef: refType_default,
    margin: prop_types60.default.oneOf(["dense", "none"]),
    multiline: prop_types60.default.bool,
    name: prop_types60.default.string,
    onChange: prop_types60.default.func,
    placeholder: prop_types60.default.string,
    readOnly: prop_types60.default.bool,
    required: prop_types60.default.bool,
    rows: prop_types60.default.oneOfType([prop_types60.default.number, prop_types60.default.string]),
    rowsMax: prop_types60.default.oneOfType([prop_types60.default.number, prop_types60.default.string]),
    startAdornment: prop_types60.default.node,
    type: prop_types60.default.string,
    value: prop_types60.default.any
  };
  Input.muiName = "Input";
  const Input_default = withStyles_default(styles56, {
    name: "MuiInput"
  })(Input);

  // node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js
  const React64 = __toModule(require_react());
  const prop_types61 = __toModule(require_prop_types());
  var styles57 = {
    root: {
      display: "flex",
      height: "0.01em",
      maxHeight: "2em",
      alignItems: "center",
      whiteSpace: "nowrap"
    },
    filled: {
      "&$positionStart:not($hiddenLabel)": {
        marginTop: 16
      }
    },
    positionStart: {
      marginRight: 8
    },
    positionEnd: {
      marginLeft: 8
    },
    disablePointerEvents: {
      pointerEvents: "none"
    },
    hiddenLabel: {},
    marginDense: {}
  };
  var InputAdornment = React64.forwardRef(function InputAdornment3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disablePointer = props.disablePointerEvents, disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, position2 = props.position, variantProp = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);
    var muiFormControl = useFormControl() || {};
    var variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("Material-UI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    return React64.createElement(FormControlContext_default.Provider, {
      value: null
    }, React64.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === "filled" && classes.filled, {
        start: classes.positionStart,
        end: classes.positionEnd
      }[position2], muiFormControl.margin === "dense" && classes.marginDense),
      ref
    }, other), typeof children === "string" && !disableTypography ? React64.createElement(Typography_default, {
      color: "textSecondary"
    }, children) : children));
  });
  InputAdornment.propTypes = {
    children: prop_types61.default.node.isRequired,
    classes: prop_types61.default.object.isRequired,
    className: prop_types61.default.string,
    component: prop_types61.default.elementType,
    disablePointerEvents: prop_types61.default.bool,
    disableTypography: prop_types61.default.bool,
    muiFormControl: prop_types61.default.object,
    position: prop_types61.default.oneOf(["start", "end"]),
    variant: prop_types61.default.oneOf(["standard", "outlined", "filled"])
  };
  const InputAdornment_default = withStyles_default(styles57, {
    name: "MuiInputAdornment"
  })(InputAdornment);

  // node_modules/@material-ui/core/esm/InputLabel/InputLabel.js
  const React66 = __toModule(require_react());
  const prop_types63 = __toModule(require_prop_types());
  var styles59 = function styles131(theme) {
    return {
      root: {
        display: "block",
        transformOrigin: "top left"
      },
      focused: {},
      disabled: {},
      error: {},
      required: {},
      asterisk: {},
      formControl: {
        position: "absolute",
        left: 0,
        top: 0,
        transform: "translate(0, 24px) scale(1)"
      },
      marginDense: {
        transform: "translate(0, 21px) scale(1)"
      },
      shrink: {
        transform: "translate(0, 1.5px) scale(0.75)",
        transformOrigin: "top left"
      },
      animated: {
        transition: theme.transitions.create(["color", "transform"], {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        })
      },
      filled: {
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(12px, 20px) scale(1)",
        "&$marginDense": {
          transform: "translate(12px, 17px) scale(1)"
        },
        "&$shrink": {
          transform: "translate(12px, 10px) scale(0.75)",
          "&$marginDense": {
            transform: "translate(12px, 7px) scale(0.75)"
          }
        }
      },
      outlined: {
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(14px, 20px) scale(1)",
        "&$marginDense": {
          transform: "translate(14px, 12px) scale(1)"
        },
        "&$shrink": {
          transform: "translate(14px, -6px) scale(0.75)"
        }
      }
    };
  };
  var InputLabel = React66.forwardRef(function InputLabel4(props, ref) {
    var classes = props.classes, className = props.className, _props$disableAnimati = props.disableAnimation, disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati, margin = props.margin, shrinkProp = props.shrink, variant = props.variant, other = _objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "shrink", "variant"]);
    var muiFormControl = useFormControl3();
    var shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["margin", "variant"]
    });
    return React66.createElement(FormLabel_default, _extends({
      "data-shrink": shrink,
      className: clsx_m_default(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === "dense" && classes.marginDense, {
        filled: classes.filled,
        outlined: classes.outlined
      }[fcs.variant]),
      classes: {
        focused: classes.focused,
        disabled: classes.disabled,
        error: classes.error,
        required: classes.required,
        asterisk: classes.asterisk
      },
      ref
    }, other));
  });
  InputLabel.propTypes = {
    children: prop_types63.default.node,
    classes: prop_types63.default.object,
    className: prop_types63.default.string,
    color: prop_types63.default.oneOf(["primary", "secondary"]),
    disableAnimation: prop_types63.default.bool,
    disabled: prop_types63.default.bool,
    error: prop_types63.default.bool,
    focused: prop_types63.default.bool,
    margin: prop_types63.default.oneOf(["dense"]),
    required: prop_types63.default.bool,
    shrink: prop_types63.default.bool,
    variant: prop_types63.default.oneOf(["filled", "outlined", "standard"])
  };
  const InputLabel_default = withStyles_default(styles59, {
    name: "MuiInputLabel"
  })(InputLabel);

  // node_modules/@material-ui/core/esm/LinearProgress/LinearProgress.js
  const React67 = __toModule(require_react());
  const prop_types64 = __toModule(require_prop_types());
  var TRANSITION_DURATION = 4;
  var styles60 = function styles131(theme) {
    var getColor = function getColor2(color2) {
      return theme.palette.type === "light" ? lighten(color2, 0.62) : darken(color2, 0.5);
    };
    var backgroundPrimary = getColor(theme.palette.primary.main);
    var backgroundSecondary = getColor(theme.palette.secondary.main);
    return {
      root: {
        position: "relative",
        overflow: "hidden",
        height: 4,
        "@media print": {
          colorAdjust: "exact"
        }
      },
      colorPrimary: {
        backgroundColor: backgroundPrimary
      },
      colorSecondary: {
        backgroundColor: backgroundSecondary
      },
      determinate: {},
      indeterminate: {},
      buffer: {
        backgroundColor: "transparent"
      },
      query: {
        transform: "rotate(180deg)"
      },
      dashed: {
        position: "absolute",
        marginTop: 0,
        height: "100%",
        width: "100%",
        animation: "$buffer 3s infinite linear"
      },
      dashedColorPrimary: {
        backgroundImage: "radial-gradient(".concat(backgroundPrimary, " 0%, ").concat(backgroundPrimary, " 16%, transparent 42%)"),
        backgroundSize: "10px 10px",
        backgroundPosition: "0 -23px"
      },
      dashedColorSecondary: {
        backgroundImage: "radial-gradient(".concat(backgroundSecondary, " 0%, ").concat(backgroundSecondary, " 16%, transparent 42%)"),
        backgroundSize: "10px 10px",
        backgroundPosition: "0 -23px"
      },
      bar: {
        width: "100%",
        position: "absolute",
        left: 0,
        bottom: 0,
        top: 0,
        transition: "transform 0.2s linear",
        transformOrigin: "left"
      },
      barColorPrimary: {
        backgroundColor: theme.palette.primary.main
      },
      barColorSecondary: {
        backgroundColor: theme.palette.secondary.main
      },
      bar1Indeterminate: {
        width: "auto",
        animation: "$indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite"
      },
      bar1Determinate: {
        transition: "transform .".concat(TRANSITION_DURATION, "s linear")
      },
      bar1Buffer: {
        zIndex: 1,
        transition: "transform .".concat(TRANSITION_DURATION, "s linear")
      },
      bar2Indeterminate: {
        width: "auto",
        animation: "$indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite"
      },
      bar2Buffer: {
        transition: "transform .".concat(TRANSITION_DURATION, "s linear")
      },
      "@keyframes indeterminate1": {
        "0%": {
          left: "-35%",
          right: "100%"
        },
        "60%": {
          left: "100%",
          right: "-90%"
        },
        "100%": {
          left: "100%",
          right: "-90%"
        }
      },
      "@keyframes indeterminate2": {
        "0%": {
          left: "-200%",
          right: "100%"
        },
        "60%": {
          left: "107%",
          right: "-8%"
        },
        "100%": {
          left: "107%",
          right: "-8%"
        }
      },
      "@keyframes buffer": {
        "0%": {
          opacity: 1,
          backgroundPosition: "0 -23px"
        },
        "50%": {
          opacity: 0,
          backgroundPosition: "0 -23px"
        },
        "100%": {
          opacity: 1,
          backgroundPosition: "-200px -23px"
        }
      }
    };
  };
  var LinearProgress = React67.forwardRef(function LinearProgress4(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, value = props.value, valueBuffer = props.valueBuffer, _props$variant = props.variant, variant = _props$variant === void 0 ? "indeterminate" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "value", "valueBuffer", "variant"]);
    var theme = useTheme2();
    var rootProps = {};
    var inlineStyles = {
      bar1: {},
      bar2: {}
    };
    if (variant === "determinate" || variant === "buffer") {
      if (value !== void 0) {
        rootProps["aria-valuenow"] = Math.round(value);
        rootProps["aria-valuemin"] = 0;
        rootProps["aria-valuemax"] = 100;
        var transform3 = value - 100;
        if (theme.direction === "rtl") {
          transform3 = -transform3;
        }
        inlineStyles.bar1.transform = "translateX(".concat(transform3, "%)");
      } else if (true) {
        console.error("Material-UI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
      }
    }
    if (variant === "buffer") {
      if (valueBuffer !== void 0) {
        var _transform = (valueBuffer || 0) - 100;
        if (theme.direction === "rtl") {
          _transform = -_transform;
        }
        inlineStyles.bar2.transform = "translateX(".concat(_transform, "%)");
      } else if (true) {
        console.error("Material-UI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
      }
    }
    return React67.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes["color".concat(capitalize2(color2))], className, {
        determinate: classes.determinate,
        indeterminate: classes.indeterminate,
        buffer: classes.buffer,
        query: classes.query
      }[variant]),
      role: "progressbar"
    }, rootProps, {
      ref
    }, other), variant === "buffer" ? React67.createElement("div", {
      className: clsx_m_default(classes.dashed, classes["dashedColor".concat(capitalize2(color2))])
    }) : null, React67.createElement("div", {
      className: clsx_m_default(classes.bar, classes["barColor".concat(capitalize2(color2))], (variant === "indeterminate" || variant === "query") && classes.bar1Indeterminate, {
        determinate: classes.bar1Determinate,
        buffer: classes.bar1Buffer
      }[variant]),
      style: inlineStyles.bar1
    }), variant === "determinate" ? null : React67.createElement("div", {
      className: clsx_m_default(classes.bar, (variant === "indeterminate" || variant === "query") && classes.bar2Indeterminate, variant === "buffer" ? [classes["color".concat(capitalize2(color2))], classes.bar2Buffer] : classes["barColor".concat(capitalize2(color2))]),
      style: inlineStyles.bar2
    }));
  });
  LinearProgress.propTypes = {
    classes: prop_types64.default.object,
    className: prop_types64.default.string,
    color: prop_types64.default.oneOf(["primary", "secondary"]),
    value: prop_types64.default.number,
    valueBuffer: prop_types64.default.number,
    variant: prop_types64.default.oneOf(["buffer", "determinate", "indeterminate", "query"])
  };
  const LinearProgress_default = withStyles_default(styles60, {
    name: "MuiLinearProgress"
  })(LinearProgress);

  // node_modules/@material-ui/core/esm/Link/Link.js
  const React68 = __toModule(require_react());
  const prop_types65 = __toModule(require_prop_types());
  var styles61 = {
    root: {},
    underlineNone: {
      textDecoration: "none"
    },
    underlineHover: {
      textDecoration: "none",
      "&:hover": {
        textDecoration: "underline"
      }
    },
    underlineAlways: {
      textDecoration: "underline"
    },
    button: {
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      "-moz-appearance": "none",
      "-webkit-appearance": "none",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      "&$focusVisible": {
        outline: "auto"
      }
    },
    focusVisible: {}
  };
  var Link = React68.forwardRef(function Link5(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "a" : _props$component, onBlur = props.onBlur, onFocus = props.onFocus, TypographyClasses = props.TypographyClasses, _props$underline = props.underline, underline = _props$underline === void 0 ? "hover" : _props$underline, _props$variant = props.variant, variant = _props$variant === void 0 ? "inherit" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);
    var _useIsFocusVisible = useIsFocusVisible2(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    var _React$useState = React68.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    var handlerRef = useForkRef2(ref, focusVisibleRef);
    var handleBlur = function handleBlur2(event) {
      if (focusVisible) {
        onBlurVisible();
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    };
    var handleFocus = function handleFocus2(event) {
      if (isFocusVisible2(event)) {
        setFocusVisible(true);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    return React68.createElement(Typography_default, _extends({
      className: clsx_m_default(classes.root, classes["underline".concat(capitalize2(underline))], className, focusVisible && classes.focusVisible, component === "button" && classes.button),
      classes: TypographyClasses,
      color: color2,
      component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref: handlerRef,
      variant
    }, other));
  });
  Link.propTypes = {
    children: prop_types65.default.node.isRequired,
    classes: prop_types65.default.object.isRequired,
    className: prop_types65.default.string,
    color: prop_types65.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
    component: elementTypeAcceptingRef_default,
    onBlur: prop_types65.default.func,
    onFocus: prop_types65.default.func,
    TypographyClasses: prop_types65.default.object,
    underline: prop_types65.default.oneOf(["none", "hover", "always"]),
    variant: prop_types65.default.string
  };
  const Link_default = withStyles_default(styles61, {
    name: "MuiLink"
  })(Link);

  // node_modules/@material-ui/core/esm/List/ListContext.js
  const React70 = __toModule(require_react());
  var ListContext2 = React70.createContext({});
  if (true) {
    ListContext2.displayName = "ListContext";
  }
  const ListContext_default = ListContext2;

  // node_modules/@material-ui/core/esm/List/List.js
  const React69 = __toModule(require_react());
  const prop_types66 = __toModule(require_prop_types());
  var styles62 = {
    root: {
      listStyle: "none",
      margin: 0,
      padding: 0,
      position: "relative"
    },
    padding: {
      paddingTop: 8,
      paddingBottom: 8
    },
    dense: {},
    subheader: {
      paddingTop: 0
    }
  };
  var List = React69.forwardRef(function List4(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "ul" : _props$component, _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disablePadding = props.disablePadding, disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding, subheader = props.subheader, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);
    var context2 = React69.useMemo(function() {
      return {
        dense
      };
    }, [dense]);
    return React69.createElement(ListContext_default.Provider, {
      value: context2
    }, React69.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
      ref
    }, other), subheader, children));
  });
  List.propTypes = {
    children: prop_types66.default.node,
    classes: prop_types66.default.object.isRequired,
    className: prop_types66.default.string,
    component: prop_types66.default.elementType,
    dense: prop_types66.default.bool,
    disablePadding: prop_types66.default.bool,
    subheader: prop_types66.default.node
  };
  const List_default = withStyles_default(styles62, {
    name: "MuiList"
  })(List);

  // node_modules/@material-ui/core/esm/ListItem/ListItem.js
  const React71 = __toModule(require_react());
  const prop_types67 = __toModule(require_prop_types());
  const ReactDOM3 = __toModule(require_react_dom());
  var styles63 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        justifyContent: "flex-start",
        alignItems: "center",
        position: "relative",
        textDecoration: "none",
        width: "100%",
        boxSizing: "border-box",
        textAlign: "left",
        paddingTop: 8,
        paddingBottom: 8,
        "&$focusVisible": {
          backgroundColor: theme.palette.action.selected
        },
        "&$selected, &$selected:hover": {
          backgroundColor: theme.palette.action.selected
        },
        "&$disabled": {
          opacity: 0.5
        }
      },
      container: {
        position: "relative"
      },
      focusVisible: {},
      dense: {
        paddingTop: 4,
        paddingBottom: 4
      },
      alignItemsFlexStart: {
        alignItems: "flex-start"
      },
      disabled: {},
      divider: {
        borderBottom: "1px solid ".concat(theme.palette.divider),
        backgroundClip: "padding-box"
      },
      gutters: {
        paddingLeft: 16,
        paddingRight: 16
      },
      button: {
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.shortest
        }),
        "&:hover": {
          textDecoration: "none",
          backgroundColor: theme.palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      secondaryAction: {
        paddingRight: 48
      },
      selected: {}
    };
  };
  var useEnhancedEffect3 = typeof window === "undefined" ? React71.useEffect : React71.useLayoutEffect;
  var ListItem = React71.forwardRef(function ListItem4(props, ref) {
    var _props$alignItems = props.alignItems, alignItems2 = _props$alignItems === void 0 ? "center" : _props$alignItems, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$button = props.button, button = _props$button === void 0 ? false : _props$button, childrenProp = props.children, classes = props.classes, className = props.className, componentProp = props.component, _props$ContainerCompo = props.ContainerComponent, ContainerComponent = _props$ContainerCompo === void 0 ? "li" : _props$ContainerCompo, _props$ContainerProps = props.ContainerProps;
    _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;
    var ContainerClassName = _props$ContainerProps.className, ContainerProps = _objectWithoutProperties(_props$ContainerProps, ["className"]), _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$divider = props.divider, divider = _props$divider === void 0 ? false : _props$divider, focusVisibleClassName = props.focusVisibleClassName, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = _objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);
    var context2 = React71.useContext(ListContext_default);
    var childContext = {
      dense: dense || context2.dense || false,
      alignItems: alignItems2
    };
    var listItemRef = React71.useRef(null);
    useEnhancedEffect3(function() {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("Material-UI: Unable to set focus to a ListItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    var children = React71.Children.toArray(childrenProp);
    var hasSecondaryAction = children.length && isMuiElement2(children[children.length - 1], ["ListItemSecondaryAction"]);
    var handleOwnRef = React71.useCallback(function(instance) {
      listItemRef.current = ReactDOM3.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef2(handleOwnRef, ref);
    var componentProps = _extends({
      className: clsx_m_default(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems2 !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
      disabled
    }, other);
    var Component7 = componentProp || "li";
    if (button) {
      componentProps.component = componentProp || "div";
      componentProps.focusVisibleClassName = clsx_m_default(classes.focusVisible, focusVisibleClassName);
      Component7 = ButtonBase_default;
    }
    if (hasSecondaryAction) {
      Component7 = !componentProps.component && !componentProp ? "div" : Component7;
      if (ContainerComponent === "li") {
        if (Component7 === "li") {
          Component7 = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return React71.createElement(ListContext_default.Provider, {
        value: childContext
      }, React71.createElement(ContainerComponent, _extends({
        className: clsx_m_default(classes.container, ContainerClassName),
        ref: handleRef
      }, ContainerProps), React71.createElement(Component7, componentProps, children), children.pop()));
    }
    return React71.createElement(ListContext_default.Provider, {
      value: childContext
    }, React71.createElement(Component7, _extends({
      ref: handleRef
    }, componentProps), children));
  });
  ListItem.propTypes = {
    alignItems: prop_types67.default.oneOf(["flex-start", "center"]),
    autoFocus: prop_types67.default.bool,
    button: prop_types67.default.bool,
    children: chainPropTypes(prop_types67.default.node, function(props) {
      var children = React71.Children.toArray(props.children);
      var secondaryActionIndex = -1;
      for (var i = children.length - 1; i >= 0; i -= 1) {
        var child = children[i];
        if (isMuiElement2(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("Material-UI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    classes: prop_types67.default.object.isRequired,
    className: prop_types67.default.string,
    component: prop_types67.default.elementType,
    ContainerComponent: prop_types67.default.elementType,
    ContainerProps: prop_types67.default.object,
    dense: prop_types67.default.bool,
    disabled: prop_types67.default.bool,
    disableGutters: prop_types67.default.bool,
    divider: prop_types67.default.bool,
    focusVisibleClassName: prop_types67.default.string,
    selected: prop_types67.default.bool
  };
  const ListItem_default = withStyles_default(styles63, {
    name: "MuiListItem"
  })(ListItem);

  // node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js
  const React72 = __toModule(require_react());
  const prop_types68 = __toModule(require_prop_types());
  var styles64 = {
    root: {
      minWidth: 56,
      flexShrink: 0
    },
    alignItemsFlexStart: {
      marginTop: 8
    }
  };
  var ListItemAvatar = React72.forwardRef(function ListItemAvatar3(props, ref) {
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    var context2 = React72.useContext(ListContext_default);
    return React72.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, context2.alignItems === "flex-start" && classes.alignItemsFlexStart),
      ref
    }, other));
  });
  ListItemAvatar.propTypes = {
    children: prop_types68.default.element.isRequired,
    classes: prop_types68.default.object,
    className: prop_types68.default.string
  };
  const ListItemAvatar_default = withStyles_default(styles64, {
    name: "MuiListItemAvatar"
  })(ListItemAvatar);

  // node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js
  const React73 = __toModule(require_react());
  const prop_types69 = __toModule(require_prop_types());
  var styles65 = function styles131(theme) {
    return {
      root: {
        minWidth: 56,
        color: theme.palette.action.active,
        flexShrink: 0,
        display: "inline-flex"
      },
      alignItemsFlexStart: {
        marginTop: 8
      }
    };
  };
  var ListItemIcon = React73.forwardRef(function ListItemIcon3(props, ref) {
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    var context2 = React73.useContext(ListContext_default);
    return React73.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, context2.alignItems === "flex-start" && classes.alignItemsFlexStart),
      ref
    }, other));
  });
  ListItemIcon.propTypes = {
    children: prop_types69.default.node,
    classes: prop_types69.default.object,
    className: prop_types69.default.string
  };
  const ListItemIcon_default = withStyles_default(styles65, {
    name: "MuiListItemIcon"
  })(ListItemIcon);

  // node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js
  const React74 = __toModule(require_react());
  const prop_types70 = __toModule(require_prop_types());
  var styles66 = {
    root: {
      position: "absolute",
      right: 16,
      top: "50%",
      transform: "translateY(-50%)"
    }
  };
  var ListItemSecondaryAction = React74.forwardRef(function ListItemSecondaryAction3(props, ref) {
    var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
    return React74.createElement("div", _extends({
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  ListItemSecondaryAction.propTypes = {
    children: prop_types70.default.node,
    classes: prop_types70.default.object,
    className: prop_types70.default.string
  };
  ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
  const ListItemSecondaryAction_default = withStyles_default(styles66, {
    name: "MuiListItemSecondaryAction"
  })(ListItemSecondaryAction);

  // node_modules/@material-ui/core/esm/ListItemText/ListItemText.js
  const React75 = __toModule(require_react());
  const prop_types71 = __toModule(require_prop_types());
  var styles67 = {
    root: {
      flex: "1 1 auto",
      minWidth: 0,
      marginTop: 4,
      marginBottom: 4
    },
    multiline: {
      marginTop: 6,
      marginBottom: 6
    },
    dense: {},
    inset: {
      paddingLeft: 56
    },
    primary: {},
    secondary: {}
  };
  var ListItemText = React75.forwardRef(function ListItemText3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, primaryProp = props.primary, primaryTypographyProps = props.primaryTypographyProps, secondaryProp = props.secondary, secondaryTypographyProps = props.secondaryTypographyProps, other = _objectWithoutProperties(props, ["children", "classes", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"]);
    var _React$useContext = React75.useContext(ListContext_default), dense = _React$useContext.dense;
    var primary = primaryProp != null ? primaryProp : children;
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = React75.createElement(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: "span",
        display: "block"
      }, primaryTypographyProps), primary);
    }
    var secondary = secondaryProp;
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = React75.createElement(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "textSecondary",
        display: "block"
      }, secondaryTypographyProps), secondary);
    }
    return React75.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),
      ref
    }, other), primary, secondary);
  });
  ListItemText.propTypes = {
    children: prop_types71.default.node,
    classes: prop_types71.default.object,
    className: prop_types71.default.string,
    disableTypography: prop_types71.default.bool,
    inset: prop_types71.default.bool,
    primary: prop_types71.default.node,
    primaryTypographyProps: prop_types71.default.object,
    secondary: prop_types71.default.node,
    secondaryTypographyProps: prop_types71.default.object
  };
  const ListItemText_default = withStyles_default(styles67, {
    name: "MuiListItemText"
  })(ListItemText);

  // node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js
  const React76 = __toModule(require_react());
  const prop_types72 = __toModule(require_prop_types());
  var styles68 = function styles131(theme) {
    return {
      root: {
        boxSizing: "border-box",
        lineHeight: "48px",
        listStyle: "none",
        color: theme.palette.text.secondary,
        fontFamily: theme.typography.fontFamily,
        fontWeight: theme.typography.fontWeightMedium,
        fontSize: theme.typography.pxToRem(14)
      },
      colorPrimary: {
        color: theme.palette.primary.main
      },
      colorInherit: {
        color: "inherit"
      },
      gutters: {
        paddingLeft: 16,
        paddingRight: 16
      },
      inset: {
        paddingLeft: 72
      },
      sticky: {
        position: "sticky",
        top: 0,
        zIndex: 1,
        backgroundColor: "inherit"
      }
    };
  };
  var ListSubheader = React76.forwardRef(function ListSubheader3(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, Component7 = _props$component === void 0 ? "li" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$disableSticky = props.disableSticky, disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);
    return React76.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, color2 !== "default" && classes["color".concat(capitalize2(color2))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
      ref
    }, other));
  });
  ListSubheader.propTypes = {
    children: prop_types72.default.node,
    classes: prop_types72.default.object.isRequired,
    className: prop_types72.default.string,
    color: prop_types72.default.oneOf(["default", "primary", "inherit"]),
    component: prop_types72.default.elementType,
    disableGutters: prop_types72.default.bool,
    disableSticky: prop_types72.default.bool,
    inset: prop_types72.default.bool
  };
  const ListSubheader_default = withStyles_default(styles68, {
    name: "MuiListSubheader"
  })(ListSubheader);

  // node_modules/@material-ui/core/esm/Popover/Popover.js
  const React89 = __toModule(require_react());
  const prop_types85 = __toModule(require_prop_types());
  const ReactDOM7 = __toModule(require_react_dom());
  function getOffsetTop(rect, vertical) {
    var offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    var offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map(function(n) {
      return typeof n === "number" ? "".concat(n, "px") : n;
    }).join(" ");
  }
  function getScrollParent(parent, child) {
    var element = child;
    var scrollTop = 0;
    while (element && element !== parent) {
      element = element.parentElement;
      scrollTop += element.scrollTop;
    }
    return scrollTop;
  }
  function getAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var styles79 = {
    root: {},
    paper: {
      position: "absolute",
      overflowY: "auto",
      overflowX: "hidden",
      minWidth: 16,
      minHeight: 16,
      maxWidth: "calc(100% - 32px)",
      maxHeight: "calc(100% - 32px)",
      outline: 0
    }
  };
  var Popover2 = React89.forwardRef(function Popover4(props, ref) {
    var action = props.action, anchorEl = props.anchorEl, _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: "top",
      horizontal: "left"
    } : _props$anchorOrigin, anchorPosition = props.anchorPosition, _props$anchorReferenc = props.anchorReference, anchorReference = _props$anchorReferenc === void 0 ? "anchorEl" : _props$anchorReferenc, children = props.children, classes = props.classes, className = props.className, containerProp = props.container, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 8 : _props$elevation, getContentAnchorEl = props.getContentAnchorEl, _props$marginThreshol = props.marginThreshold, marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, _props$transformOrigi = props.transformOrigin, transformOrigin = _props$transformOrigi === void 0 ? {
      vertical: "top",
      horizontal: "left"
    } : _props$transformOrigi, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Grow_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDurationProp = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, _props$TransitionProp = props.TransitionProps, TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp, other = _objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "className", "container", "elevation", "getContentAnchorEl", "marginThreshold", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);
    var paperRef = React89.useRef();
    var getAnchorOffset = React89.useCallback(function(contentAnchorOffset) {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('Material-UI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      var resolvedAnchorEl = getAnchorEl(anchorEl);
      var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument2(paperRef.current).body;
      var anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        var box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : "center";
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    var getContentAnchorOffset = React89.useCallback(function(element) {
      var contentAnchorOffset = 0;
      if (getContentAnchorEl && anchorReference === "anchorEl") {
        var contentAnchorEl = getContentAnchorEl(element);
        if (contentAnchorEl && element.contains(contentAnchorEl)) {
          var scrollTop = getScrollParent(element, contentAnchorEl);
          contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
        }
        if (true) {
          if (anchorOrigin.vertical !== "top") {
            console.error(["Material-UI: You can not change the default `anchorOrigin.vertical` value ", "when also providing the `getContentAnchorEl` prop to the popover component.", "Only use one of the two props.", "Set `getContentAnchorEl` to `null | undefined` or leave `anchorOrigin.vertical` unchanged."].join("\n"));
          }
        }
      }
      return contentAnchorOffset;
    }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]);
    var getTransformOrigin = React89.useCallback(function(elemRect) {
      var contentAnchorOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    var getPositioningStyle = React89.useCallback(function(element) {
      var contentAnchorOffset = getContentAnchorOffset(element);
      var elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      var anchorOffset = getAnchorOffset(contentAnchorOffset);
      var top2 = anchorOffset.top - elemTransformOrigin.vertical;
      var left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      var bottom2 = top2 + elemRect.height;
      var right2 = left2 + elemRect.width;
      var containerWindow = ownerWindow2(getAnchorEl(anchorEl));
      var heightThreshold = containerWindow.innerHeight - marginThreshold;
      var widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top2 < marginThreshold) {
        var diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom2 > heightThreshold) {
        var _diff = bottom2 - heightThreshold;
        top2 -= _diff;
        elemTransformOrigin.vertical += _diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["Material-UI: The popover component is too tall.", "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left2 < marginThreshold) {
        var _diff2 = left2 - marginThreshold;
        left2 -= _diff2;
        elemTransformOrigin.horizontal += _diff2;
      } else if (right2 > widthThreshold) {
        var _diff3 = right2 - widthThreshold;
        left2 -= _diff3;
        elemTransformOrigin.horizontal += _diff3;
      }
      return {
        top: "".concat(Math.round(top2), "px"),
        left: "".concat(Math.round(left2), "px"),
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
    var setPositioningStyles = React89.useCallback(function() {
      var element = paperRef.current;
      if (!element) {
        return;
      }
      var positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);
    var handleEntering = function handleEntering2(element, isAppearing) {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    var handlePaperRef = React89.useCallback(function(instance) {
      paperRef.current = ReactDOM7.findDOMNode(instance);
    }, []);
    React89.useEffect(function() {
      if (open) {
        setPositioningStyles();
      }
    });
    React89.useImperativeHandle(action, function() {
      return open ? {
        updatePosition: function updatePosition() {
          setPositioningStyles();
        }
      } : null;
    }, [open, setPositioningStyles]);
    React89.useEffect(function() {
      if (!open) {
        return void 0;
      }
      var handleResize = debounce2(function() {
        setPositioningStyles();
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [open, setPositioningStyles]);
    var transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    var container = containerProp || (anchorEl ? ownerDocument2(getAnchorEl(anchorEl)).body : void 0);
    return React89.createElement(Modal_default, _extends({
      container,
      open,
      ref,
      BackdropProps: {
        invisible: true
      },
      className: clsx_m_default(classes.root, className)
    }, other), React89.createElement(TransitionComponent, _extends({
      appear: true,
      in: open,
      onEnter,
      onEntered,
      onExit,
      onExited,
      onExiting,
      timeout: transitionDuration
    }, TransitionProps, {
      onEntering: createChainedFunction2(handleEntering, TransitionProps.onEntering)
    }), React89.createElement(Paper_default, _extends({
      elevation,
      ref: handlePaperRef
    }, PaperProps, {
      className: clsx_m_default(classes.paper, PaperProps.className)
    }), children)));
  });
  Popover2.propTypes = {
    action: refType_default,
    anchorEl: chainPropTypes(prop_types85.default.oneOfType([HTMLElementType, prop_types85.default.func]), function(props) {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        var resolvedAnchorEl = getAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join("\n"));
        }
      }
      return null;
    }),
    anchorOrigin: prop_types85.default.shape({
      horizontal: prop_types85.default.oneOfType([prop_types85.default.oneOf(["center", "left", "right"]), prop_types85.default.number]).isRequired,
      vertical: prop_types85.default.oneOfType([prop_types85.default.oneOf(["bottom", "center", "top"]), prop_types85.default.number]).isRequired
    }),
    anchorPosition: prop_types85.default.shape({
      left: prop_types85.default.number.isRequired,
      top: prop_types85.default.number.isRequired
    }),
    anchorReference: prop_types85.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    children: prop_types85.default.node,
    classes: prop_types85.default.object,
    className: prop_types85.default.string,
    container: prop_types85.default.oneOfType([HTMLElementType, prop_types85.default.instanceOf(React89.Component), prop_types85.default.func]),
    elevation: prop_types85.default.number,
    getContentAnchorEl: prop_types85.default.func,
    marginThreshold: prop_types85.default.number,
    onClose: prop_types85.default.func,
    onEnter: prop_types85.default.func,
    onEntered: prop_types85.default.func,
    onEntering: prop_types85.default.func,
    onExit: prop_types85.default.func,
    onExited: prop_types85.default.func,
    onExiting: prop_types85.default.func,
    open: prop_types85.default.bool.isRequired,
    PaperProps: prop_types85.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    transformOrigin: prop_types85.default.shape({
      horizontal: prop_types85.default.oneOfType([prop_types85.default.oneOf(["center", "left", "right"]), prop_types85.default.number]).isRequired,
      vertical: prop_types85.default.oneOfType([prop_types85.default.oneOf(["bottom", "center", "top"]), prop_types85.default.number]).isRequired
    }),
    TransitionComponent: prop_types85.default.elementType,
    transitionDuration: prop_types85.default.oneOfType([prop_types85.default.oneOf(["auto"]), prop_types85.default.number, prop_types85.default.shape({
      appear: prop_types85.default.number,
      enter: prop_types85.default.number,
      exit: prop_types85.default.number
    })]),
    TransitionProps: prop_types85.default.object
  };
  const Popover_default = withStyles_default(styles79, {
    name: "MuiPopover"
  })(Popover2);

  // node_modules/@material-ui/core/esm/MenuList/MenuList.js
  const React79 = __toModule(require_react());
  const react_is8 = __toModule(require_react_is());
  const prop_types75 = __toModule(require_prop_types());
  const ReactDOM5 = __toModule(require_react_dom());
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    var text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    var wrappedOnce = false;
    var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return;
      }
    }
  }
  var useEnhancedEffect4 = typeof window === "undefined" ? React79.useEffect : React79.useLayoutEffect;
  var MenuList2 = React79.forwardRef(function MenuList4(props, ref) {
    var actions = props.actions, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$autoFocusItem = props.autoFocusItem, autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem, children = props.children, className = props.className, _props$disabledItemsF = props.disabledItemsFocusable, disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF, _props$disableListWra = props.disableListWrap, disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra, onKeyDown = props.onKeyDown, _props$variant = props.variant, variant = _props$variant === void 0 ? "selectedMenu" : _props$variant, other = _objectWithoutProperties(props, ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"]);
    var listRef = React79.useRef(null);
    var textCriteriaRef = React79.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect4(function() {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React79.useImperativeHandle(actions, function() {
      return {
        adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
          var noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            var scrollbarSize = "".concat(getScrollbarSize2(true), "px");
            listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
            listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
          }
          return listRef.current;
        }
      };
    }, []);
    var handleKeyDown2 = function handleKeyDown3(event) {
      var list = listRef.current;
      var key3 = event.key;
      var currentFocus = ownerDocument2(list).activeElement;
      if (key3 === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key3 === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key3 === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key3 === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key3.length === 1) {
        var criteria = textCriteriaRef.current;
        var lowerKey = key3.toLowerCase();
        var currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    var handleOwnRef = React79.useCallback(function(instance) {
      listRef.current = ReactDOM5.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef2(handleOwnRef, ref);
    var activeItemIndex = -1;
    React79.Children.forEach(children, function(child, index3) {
      if (!React79.isValidElement(child)) {
        return;
      }
      if (true) {
        if (react_is8.isFragment(child)) {
          console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index3;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index3;
        }
      }
    });
    var items = React79.Children.map(children, function(child, index3) {
      if (index3 === activeItemIndex) {
        var newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return React79.cloneElement(child, newChildProps);
      }
      return child;
    });
    return React79.createElement(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other), items);
  });
  MenuList2.propTypes = {
    autoFocus: prop_types75.default.bool,
    autoFocusItem: prop_types75.default.bool,
    children: prop_types75.default.node,
    className: prop_types75.default.string,
    disabledItemsFocusable: prop_types75.default.bool,
    disableListWrap: prop_types75.default.bool,
    onKeyDown: prop_types75.default.func,
    variant: prop_types75.default.oneOf(["menu", "selectedMenu"])
  };
  const MenuList_default = MenuList2;

  // node_modules/@material-ui/core/esm/Menu/Menu.js
  const React77 = __toModule(require_react());
  const react_is7 = __toModule(require_react_is());
  const prop_types73 = __toModule(require_prop_types());
  const ReactDOM4 = __toModule(require_react_dom());
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var styles69 = {
    paper: {
      maxHeight: "calc(100% - 96px)",
      WebkitOverflowScrolling: "touch"
    },
    list: {
      outline: 0
    }
  };
  var Menu = React77.forwardRef(function Menu4(props, ref) {
    var _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, children = props.children, classes = props.classes, _props$disableAutoFoc = props.disableAutoFocusItem, disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$MenuListProps = props.MenuListProps, MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps, onClose = props.onClose, onEntering = props.onEntering, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, PopoverClasses = props.PopoverClasses, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? "selectedMenu" : _props$variant, other = _objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "variant"]);
    var theme = useTheme2();
    var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    var menuListActionsRef = React77.useRef(null);
    var contentAnchorRef = React77.useRef(null);
    var getContentAnchorEl = function getContentAnchorEl2() {
      return contentAnchorRef.current;
    };
    var handleEntering = function handleEntering2(element, isAppearing) {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    var handleListKeyDown = function handleListKeyDown2(event) {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    var activeItemIndex = -1;
    React77.Children.map(children, function(child, index3) {
      if (!React77.isValidElement(child)) {
        return;
      }
      if (true) {
        if (react_is7.isFragment(child)) {
          console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant !== "menu" && child.props.selected) {
          activeItemIndex = index3;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index3;
        }
      }
    });
    var items = React77.Children.map(children, function(child, index3) {
      if (index3 === activeItemIndex) {
        return React77.cloneElement(child, {
          ref: function ref2(instance) {
            contentAnchorRef.current = ReactDOM4.findDOMNode(instance);
            setRef2(child.ref, instance);
          }
        });
      }
      return child;
    });
    return React77.createElement(Popover_default, _extends({
      getContentAnchorEl,
      classes: PopoverClasses,
      onClose,
      onEntering: handleEntering,
      anchorOrigin: theme.direction === "rtl" ? RTL_ORIGIN : LTR_ORIGIN,
      transformOrigin: theme.direction === "rtl" ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({}, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      open,
      ref,
      transitionDuration
    }, other), React77.createElement(MenuList_default, _extends({
      onKeyDown: handleListKeyDown,
      actions: menuListActionsRef,
      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
      autoFocusItem,
      variant
    }, MenuListProps, {
      className: clsx_m_default(classes.list, MenuListProps.className)
    }), items));
  });
  Menu.propTypes = {
    anchorEl: prop_types73.default.oneOfType([HTMLElementType, prop_types73.default.func]),
    autoFocus: prop_types73.default.bool,
    children: prop_types73.default.node,
    classes: prop_types73.default.object,
    disableAutoFocusItem: prop_types73.default.bool,
    MenuListProps: prop_types73.default.object,
    onClose: prop_types73.default.func,
    onEnter: prop_types73.default.func,
    onEntered: prop_types73.default.func,
    onEntering: prop_types73.default.func,
    onExit: prop_types73.default.func,
    onExited: prop_types73.default.func,
    onExiting: prop_types73.default.func,
    open: prop_types73.default.bool.isRequired,
    PaperProps: prop_types73.default.object,
    PopoverClasses: prop_types73.default.object,
    transitionDuration: prop_types73.default.oneOfType([prop_types73.default.oneOf(["auto"]), prop_types73.default.number, prop_types73.default.shape({
      appear: prop_types73.default.number,
      enter: prop_types73.default.number,
      exit: prop_types73.default.number
    })]),
    variant: prop_types73.default.oneOf(["menu", "selectedMenu"])
  };
  const Menu_default = withStyles_default(styles69, {
    name: "MuiMenu"
  })(Menu);

  // node_modules/@material-ui/core/esm/MenuItem/MenuItem.js
  const React78 = __toModule(require_react());
  const prop_types74 = __toModule(require_prop_types());
  var styles70 = function styles131(theme) {
    return {
      root: _extends({}, theme.typography.body1, _defineProperty({
        minHeight: 48,
        paddingTop: 6,
        paddingBottom: 6,
        boxSizing: "border-box",
        width: "auto",
        overflow: "hidden",
        whiteSpace: "nowrap"
      }, theme.breakpoints.up("sm"), {
        minHeight: "auto"
      })),
      gutters: {},
      selected: {},
      dense: _extends({}, theme.typography.body2, {
        minHeight: "auto"
      })
    };
  };
  var MenuItem = React78.forwardRef(function MenuItem4(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "li" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, ListItemClasses = props.ListItemClasses, _props$role = props.role, role = _props$role === void 0 ? "menuitem" : _props$role, selected = props.selected, tabIndexProp = props.tabIndex, other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "ListItemClasses", "role", "selected", "tabIndex"]);
    var tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return React78.createElement(ListItem_default, _extends({
      button: true,
      role,
      tabIndex,
      component,
      selected,
      disableGutters,
      classes: _extends({
        dense: classes.dense
      }, ListItemClasses),
      className: clsx_m_default(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
      ref
    }, other));
  });
  MenuItem.propTypes = {
    children: prop_types74.default.node,
    classes: prop_types74.default.object.isRequired,
    className: prop_types74.default.string,
    component: prop_types74.default.elementType,
    dense: prop_types74.default.bool,
    disabled: prop_types74.default.bool,
    disableGutters: prop_types74.default.bool,
    ListItemClasses: prop_types74.default.object,
    role: prop_types74.default.string,
    selected: prop_types74.default.bool,
    tabIndex: prop_types74.default.number
  };
  const MenuItem_default = withStyles_default(styles70, {
    name: "MuiMenuItem"
  })(MenuItem);

  // node_modules/@material-ui/core/esm/MobileStepper/MobileStepper.js
  const React80 = __toModule(require_react());
  const prop_types76 = __toModule(require_prop_types());
  var styles71 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "center",
        background: theme.palette.background.default,
        padding: 8
      },
      positionBottom: {
        position: "fixed",
        bottom: 0,
        left: 0,
        right: 0,
        zIndex: theme.zIndex.mobileStepper
      },
      positionTop: {
        position: "fixed",
        top: 0,
        left: 0,
        right: 0,
        zIndex: theme.zIndex.mobileStepper
      },
      positionStatic: {},
      dots: {
        display: "flex",
        flexDirection: "row"
      },
      dot: {
        backgroundColor: theme.palette.action.disabled,
        borderRadius: "50%",
        width: 8,
        height: 8,
        margin: "0 2px"
      },
      dotActive: {
        backgroundColor: theme.palette.primary.main
      },
      progress: {
        width: "50%"
      }
    };
  };
  var MobileStepper = React80.forwardRef(function MobileStepper3(props, ref) {
    var _props$activeStep = props.activeStep, activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep, backButton = props.backButton, classes = props.classes, className = props.className, LinearProgressProps = props.LinearProgressProps, nextButton = props.nextButton, _props$position = props.position, position2 = _props$position === void 0 ? "bottom" : _props$position, steps = props.steps, _props$variant = props.variant, variant = _props$variant === void 0 ? "dots" : _props$variant, other = _objectWithoutProperties(props, ["activeStep", "backButton", "classes", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"]);
    return React80.createElement(Paper_default, _extends({
      square: true,
      elevation: 0,
      className: clsx_m_default(classes.root, classes["position".concat(capitalize2(position2))], className),
      ref
    }, other), backButton, variant === "text" && React80.createElement(React80.Fragment, null, activeStep + 1, " / ", steps), variant === "dots" && React80.createElement("div", {
      className: classes.dots
    }, _toConsumableArray(new Array(steps)).map(function(_, index3) {
      return React80.createElement("div", {
        key: index3,
        className: clsx_m_default(classes.dot, index3 === activeStep && classes.dotActive)
      });
    })), variant === "progress" && React80.createElement(LinearProgress_default, _extends({
      className: classes.progress,
      variant: "determinate",
      value: Math.ceil(activeStep / (steps - 1) * 100)
    }, LinearProgressProps)), nextButton);
  });
  MobileStepper.propTypes = {
    activeStep: prop_types76.default.number,
    backButton: prop_types76.default.node,
    classes: prop_types76.default.object,
    className: prop_types76.default.string,
    LinearProgressProps: prop_types76.default.object,
    nextButton: prop_types76.default.node,
    position: prop_types76.default.oneOf(["bottom", "static", "top"]),
    steps: prop_types76.default.number.isRequired,
    variant: prop_types76.default.oneOf(["dots", "progress", "text"])
  };
  const MobileStepper_default = withStyles_default(styles71, {
    name: "MuiMobileStepper"
  })(MobileStepper);

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js
  const React84 = __toModule(require_react());
  const prop_types80 = __toModule(require_prop_types());
  var NativeSelectInput2 = React84.forwardRef(function NativeSelectInput4(props, ref) {
    var classes = props.classes, className = props.className, disabled = props.disabled, IconComponent = props.IconComponent, inputRef = props.inputRef, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);
    return React84.createElement(React84.Fragment, null, React84.createElement("select", _extends({
      className: clsx_m_default(classes.root, classes.select, classes[variant], className, disabled && classes.disabled),
      disabled,
      ref: inputRef || ref
    }, other)), props.multiple ? null : React84.createElement(IconComponent, {
      className: clsx_m_default(classes.icon, classes["icon".concat(capitalize2(variant))], disabled && classes.disabled)
    }));
  });
  NativeSelectInput2.propTypes = {
    children: prop_types80.default.node,
    classes: prop_types80.default.object.isRequired,
    className: prop_types80.default.string,
    disabled: prop_types80.default.bool,
    IconComponent: prop_types80.default.elementType.isRequired,
    inputRef: refType_default,
    multiple: prop_types80.default.bool,
    name: prop_types80.default.string,
    onChange: prop_types80.default.func,
    value: prop_types80.default.any,
    variant: prop_types80.default.oneOf(["standard", "outlined", "filled"])
  };
  const NativeSelectInput_default = NativeSelectInput2;

  // node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js
  const React142 = __toModule(require_react());
  const ArrowDropDown_default = createSvgIcon2(React142.createElement("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelect.js
  const React83 = __toModule(require_react());
  const prop_types79 = __toModule(require_prop_types());
  var styles75 = function styles131(theme) {
    return {
      root: {},
      select: {
        "-moz-appearance": "none",
        "-webkit-appearance": "none",
        userSelect: "none",
        borderRadius: 0,
        minWidth: 16,
        cursor: "pointer",
        "&:focus": {
          backgroundColor: theme.palette.type === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)",
          borderRadius: 0
        },
        "&::-ms-expand": {
          display: "none"
        },
        "&$disabled": {
          cursor: "default"
        },
        "&[multiple]": {
          height: "auto"
        },
        "&:not([multiple]) option, &:not([multiple]) optgroup": {
          backgroundColor: theme.palette.background.paper
        },
        "&&": {
          paddingRight: 24
        }
      },
      filled: {
        "&&": {
          paddingRight: 32
        }
      },
      outlined: {
        borderRadius: theme.shape.borderRadius,
        "&&": {
          paddingRight: 32
        }
      },
      selectMenu: {
        height: "auto",
        minHeight: "1.1876em",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      disabled: {},
      icon: {
        position: "absolute",
        right: 0,
        top: "calc(50% - 12px)",
        pointerEvents: "none",
        color: theme.palette.action.active,
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      },
      iconOpen: {
        transform: "rotate(180deg)"
      },
      iconFilled: {
        right: 7
      },
      iconOutlined: {
        right: 7
      },
      nativeInput: {
        bottom: 0,
        left: 0,
        position: "absolute",
        opacity: 0,
        pointerEvents: "none",
        width: "100%"
      }
    };
  };
  var defaultInput = React83.createElement(Input_default, null);
  var NativeSelect = React83.forwardRef(function NativeSelect4(props, ref) {
    var children = props.children, classes = props.classes, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDropDown_default : _props$IconComponent, _props$input = props.input, input = _props$input === void 0 ? defaultInput : _props$input, inputProps = props.inputProps, variant = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);
    var muiFormControl = useFormControl3();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    return React83.cloneElement(input, _extends({
      inputComponent: NativeSelectInput_default,
      inputProps: _extends({
        children,
        classes,
        IconComponent,
        variant: fcs.variant,
        type: void 0
      }, inputProps, input ? input.props.inputProps : {}),
      ref
    }, other));
  });
  NativeSelect.propTypes = {
    children: prop_types79.default.node,
    classes: prop_types79.default.object,
    IconComponent: prop_types79.default.elementType,
    input: prop_types79.default.element,
    inputProps: prop_types79.default.object,
    onChange: prop_types79.default.func,
    value: prop_types79.default.any,
    variant: prop_types79.default.oneOf(["filled", "outlined", "standard"])
  };
  NativeSelect.muiName = "Select";
  const NativeSelect_default = withStyles_default(styles75, {
    name: "MuiNativeSelect"
  })(NativeSelect);

  // node_modules/@material-ui/core/esm/NoSsr/NoSsr.js
  const React85 = __toModule(require_react());
  const prop_types81 = __toModule(require_prop_types());
  var useEnhancedEffect5 = typeof window !== "undefined" && true ? React85.useLayoutEffect : React85.useEffect;
  function NoSsr(props) {
    var children = props.children, _props$defer = props.defer, defer = _props$defer === void 0 ? false : _props$defer, _props$fallback = props.fallback, fallback = _props$fallback === void 0 ? null : _props$fallback;
    var _React$useState = React85.useState(false), mountedState = _React$useState[0], setMountedState = _React$useState[1];
    useEnhancedEffect5(function() {
      if (!defer) {
        setMountedState(true);
      }
    }, [defer]);
    React85.useEffect(function() {
      if (defer) {
        setMountedState(true);
      }
    }, [defer]);
    return React85.createElement(React85.Fragment, null, mountedState ? children : fallback);
  }
  NoSsr.propTypes = {
    children: prop_types81.default.node,
    defer: prop_types81.default.bool,
    fallback: prop_types81.default.node
  };
  if (true) {
    NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
  }
  const NoSsr_default = NoSsr;

  // node_modules/@material-ui/core/esm/OutlinedInput/NotchedOutline.js
  const React86 = __toModule(require_react());
  const prop_types82 = __toModule(require_prop_types());
  var styles76 = function styles131(theme) {
    return {
      root: {
        position: "absolute",
        bottom: 0,
        right: 0,
        top: -5,
        left: 0,
        margin: 0,
        padding: "0 8px",
        pointerEvents: "none",
        borderRadius: "inherit",
        borderStyle: "solid",
        borderWidth: 1,
        overflow: "hidden"
      },
      legend: {
        textAlign: "left",
        padding: 0,
        lineHeight: "11px",
        transition: theme.transitions.create("width", {
          duration: 150,
          easing: theme.transitions.easing.easeOut
        })
      },
      legendLabelled: {
        display: "block",
        width: "auto",
        textAlign: "left",
        padding: 0,
        height: 11,
        fontSize: "0.75em",
        visibility: "hidden",
        maxWidth: 0.01,
        transition: theme.transitions.create("max-width", {
          duration: 50,
          easing: theme.transitions.easing.easeOut
        }),
        "& > span": {
          paddingLeft: 5,
          paddingRight: 5,
          display: "inline-block"
        }
      },
      legendNotched: {
        maxWidth: 1e3,
        transition: theme.transitions.create("max-width", {
          duration: 100,
          easing: theme.transitions.easing.easeOut,
          delay: 50
        })
      }
    };
  };
  var NotchedOutline = React86.forwardRef(function NotchedOutline3(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, label = props.label, labelWidthProp = props.labelWidth, notched = props.notched, style13 = props.style, other = _objectWithoutProperties(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);
    var theme = useTheme2();
    var align = theme.direction === "rtl" ? "right" : "left";
    if (label !== void 0) {
      return React86.createElement("fieldset", _extends({
        "aria-hidden": true,
        className: clsx_m_default(classes.root, className),
        ref,
        style: style13
      }, other), React86.createElement("legend", {
        className: clsx_m_default(classes.legendLabelled, notched && classes.legendNotched)
      }, label ? React86.createElement("span", null, label) : React86.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&#8203;"
        }
      })));
    }
    var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
    return React86.createElement("fieldset", _extends({
      "aria-hidden": true,
      style: _extends(_defineProperty({}, "padding".concat(capitalize2(align)), 8), style13),
      className: clsx_m_default(classes.root, className),
      ref
    }, other), React86.createElement("legend", {
      className: classes.legend,
      style: {
        width: notched ? labelWidth : 0.01
      }
    }, React86.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    })));
  });
  NotchedOutline.propTypes = {
    children: prop_types82.default.node,
    classes: prop_types82.default.object,
    className: prop_types82.default.string,
    label: prop_types82.default.node,
    labelWidth: prop_types82.default.number.isRequired,
    notched: prop_types82.default.bool.isRequired,
    style: prop_types82.default.object
  };
  const NotchedOutline_default = withStyles_default(styles76, {
    name: "PrivateNotchedOutline"
  })(NotchedOutline);

  // node_modules/@material-ui/core/esm/OutlinedInput/OutlinedInput.js
  const React87 = __toModule(require_react());
  const prop_types83 = __toModule(require_prop_types());
  var styles77 = function styles131(theme) {
    var borderColor2 = theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      root: {
        position: "relative",
        borderRadius: theme.shape.borderRadius,
        "&:hover $notchedOutline": {
          borderColor: theme.palette.text.primary
        },
        "@media (hover: none)": {
          "&:hover $notchedOutline": {
            borderColor: borderColor2
          }
        },
        "&$focused $notchedOutline": {
          borderColor: theme.palette.primary.main,
          borderWidth: 2
        },
        "&$error $notchedOutline": {
          borderColor: theme.palette.error.main
        },
        "&$disabled $notchedOutline": {
          borderColor: theme.palette.action.disabled
        }
      },
      colorSecondary: {
        "&$focused $notchedOutline": {
          borderColor: theme.palette.secondary.main
        }
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 14
      },
      adornedEnd: {
        paddingRight: 14
      },
      error: {},
      marginDense: {},
      multiline: {
        padding: "18.5px 14px",
        "&$marginDense": {
          paddingTop: 10.5,
          paddingBottom: 10.5
        }
      },
      notchedOutline: {
        borderColor: borderColor2
      },
      input: {
        padding: "18.5px 14px",
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme.palette.type === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme.palette.type === "light" ? null : "#fff",
          caretColor: theme.palette.type === "light" ? null : "#fff",
          borderRadius: "inherit"
        }
      },
      inputMarginDense: {
        paddingTop: 10.5,
        paddingBottom: 10.5
      },
      inputMultiline: {
        padding: 0
      },
      inputAdornedStart: {
        paddingLeft: 0
      },
      inputAdornedEnd: {
        paddingRight: 0
      }
    };
  };
  var OutlinedInput = React87.forwardRef(function OutlinedInput5(props, ref) {
    var classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, label = props.label, _props$labelWidth = props.labelWidth, labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, notched = props.notched, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "label", "labelWidth", "multiline", "notched", "type"]);
    return React87.createElement(InputBase_default, _extends({
      renderSuffix: function renderSuffix(state) {
        return React87.createElement(NotchedOutline_default, {
          className: classes.notchedOutline,
          label,
          labelWidth,
          notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        });
      },
      classes: _extends({}, classes, {
        root: clsx_m_default(classes.root, classes.underline),
        notchedOutline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  OutlinedInput.propTypes = {
    autoComplete: prop_types83.default.string,
    autoFocus: prop_types83.default.bool,
    classes: prop_types83.default.object,
    color: prop_types83.default.oneOf(["primary", "secondary"]),
    defaultValue: prop_types83.default.any,
    disabled: prop_types83.default.bool,
    endAdornment: prop_types83.default.node,
    error: prop_types83.default.bool,
    fullWidth: prop_types83.default.bool,
    id: prop_types83.default.string,
    inputComponent: prop_types83.default.elementType,
    inputProps: prop_types83.default.object,
    inputRef: refType_default,
    label: prop_types83.default.node,
    labelWidth: prop_types83.default.number,
    margin: prop_types83.default.oneOf(["dense", "none"]),
    multiline: prop_types83.default.bool,
    name: prop_types83.default.string,
    notched: prop_types83.default.bool,
    onChange: prop_types83.default.func,
    placeholder: prop_types83.default.string,
    readOnly: prop_types83.default.bool,
    required: prop_types83.default.bool,
    rows: prop_types83.default.oneOfType([prop_types83.default.number, prop_types83.default.string]),
    rowsMax: prop_types83.default.oneOfType([prop_types83.default.number, prop_types83.default.string]),
    startAdornment: prop_types83.default.node,
    type: prop_types83.default.string,
    value: prop_types83.default.any
  };
  OutlinedInput.muiName = "Input";
  const OutlinedInput_default = withStyles_default(styles77, {
    name: "MuiOutlinedInput"
  })(OutlinedInput);

  // node_modules/popper.js/dist/esm/popper.js
  var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && typeof navigator !== "undefined";
  var timeoutDuration = function() {
    var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
      if (isBrowser2 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
        return 1;
      }
    }
    return 0;
  }();
  function microtaskDebounce(fn) {
    var called = false;
    return function() {
      if (called) {
        return;
      }
      called = true;
      window.Promise.resolve().then(function() {
        called = false;
        fn();
      });
    };
  }
  function taskDebounce(fn) {
    var scheduled = false;
    return function() {
      if (!scheduled) {
        scheduled = true;
        setTimeout(function() {
          scheduled = false;
          fn();
        }, timeoutDuration);
      }
    };
  }
  var supportsMicroTasks = isBrowser2 && window.Promise;
  var debounce9 = supportsMicroTasks ? microtaskDebounce : taskDebounce;
  function isFunction(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
  }
  function getStyleComputedProperty(element, property) {
    if (element.nodeType !== 1) {
      return [];
    }
    var window2 = element.ownerDocument.defaultView;
    var css4 = window2.getComputedStyle(element, null);
    return property ? css4[property] : css4;
  }
  function getParentNode(element) {
    if (element.nodeName === "HTML") {
      return element;
    }
    return element.parentNode || element.host;
  }
  function getScrollParent2(element) {
    if (!element) {
      return document.body;
    }
    switch (element.nodeName) {
      case "HTML":
      case "BODY":
        return element.ownerDocument.body;
      case "#document":
        return element.body;
    }
    var _getStyleComputedProp = getStyleComputedProperty(element), overflow2 = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
    if (/(auto|scroll|overlay)/.test(overflow2 + overflowY + overflowX)) {
      return element;
    }
    return getScrollParent2(getParentNode(element));
  }
  function getReferenceNode(reference) {
    return reference && reference.referenceNode ? reference.referenceNode : reference;
  }
  var isIE11 = isBrowser2 && !!(window.MSInputMethodContext && document.documentMode);
  var isIE10 = isBrowser2 && /MSIE 10/.test(navigator.userAgent);
  function isIE(version) {
    if (version === 11) {
      return isIE11;
    }
    if (version === 10) {
      return isIE10;
    }
    return isIE11 || isIE10;
  }
  function getOffsetParent(element) {
    if (!element) {
      return document.documentElement;
    }
    var noOffsetParent = isIE(10) ? document.body : null;
    var offsetParent = element.offsetParent || null;
    while (offsetParent === noOffsetParent && element.nextElementSibling) {
      offsetParent = (element = element.nextElementSibling).offsetParent;
    }
    var nodeName = offsetParent && offsetParent.nodeName;
    if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
      return element ? element.ownerDocument.documentElement : document.documentElement;
    }
    if (["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, "position") === "static") {
      return getOffsetParent(offsetParent);
    }
    return offsetParent;
  }
  function isOffsetContainer(element) {
    var nodeName = element.nodeName;
    if (nodeName === "BODY") {
      return false;
    }
    return nodeName === "HTML" || getOffsetParent(element.firstElementChild) === element;
  }
  function getRoot(node) {
    if (node.parentNode !== null) {
      return getRoot(node.parentNode);
    }
    return node;
  }
  function findCommonOffsetParent(element1, element2) {
    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
      return document.documentElement;
    }
    var order2 = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
    var start = order2 ? element1 : element2;
    var end = order2 ? element2 : element1;
    var range = document.createRange();
    range.setStart(start, 0);
    range.setEnd(end, 0);
    var commonAncestorContainer = range.commonAncestorContainer;
    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
      if (isOffsetContainer(commonAncestorContainer)) {
        return commonAncestorContainer;
      }
      return getOffsetParent(commonAncestorContainer);
    }
    var element1root = getRoot(element1);
    if (element1root.host) {
      return findCommonOffsetParent(element1root.host, element2);
    } else {
      return findCommonOffsetParent(element1, getRoot(element2).host);
    }
  }
  function getScroll(element) {
    var side = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "top";
    var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
    var nodeName = element.nodeName;
    if (nodeName === "BODY" || nodeName === "HTML") {
      var html2 = element.ownerDocument.documentElement;
      var scrollingElement = element.ownerDocument.scrollingElement || html2;
      return scrollingElement[upperSide];
    }
    return element[upperSide];
  }
  function includeScroll(rect, element) {
    var subtract = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var scrollTop = getScroll(element, "top");
    var scrollLeft2 = getScroll(element, "left");
    var modifier = subtract ? -1 : 1;
    rect.top += scrollTop * modifier;
    rect.bottom += scrollTop * modifier;
    rect.left += scrollLeft2 * modifier;
    rect.right += scrollLeft2 * modifier;
    return rect;
  }
  function getBordersSize(styles131, axis) {
    var sideA = axis === "x" ? "Left" : "Top";
    var sideB = sideA === "Left" ? "Right" : "Bottom";
    return parseFloat(styles131["border" + sideA + "Width"]) + parseFloat(styles131["border" + sideB + "Width"]);
  }
  function getSize(axis, body2, html2, computedStyle) {
    return Math.max(body2["offset" + axis], body2["scroll" + axis], html2["client" + axis], html2["offset" + axis], html2["scroll" + axis], isIE(10) ? parseInt(html2["offset" + axis]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Top" : "Left")]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Bottom" : "Right")]) : 0);
  }
  function getWindowSizes(document2) {
    var body2 = document2.body;
    var html2 = document2.documentElement;
    var computedStyle = isIE(10) && getComputedStyle(html2);
    return {
      height: getSize("Height", body2, html2, computedStyle),
      width: getSize("Width", body2, html2, computedStyle)
    };
  }
  var classCallCheck4 = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var createClass5 = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var defineProperty18 = function(obj, key3, value) {
    if (key3 in obj) {
      Object.defineProperty(obj, key3, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key3] = value;
    }
    return obj;
  };
  var _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key3 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key3)) {
          target[key3] = source[key3];
        }
      }
    }
    return target;
  };
  function getClientRect(offsets) {
    return _extends2({}, offsets, {
      right: offsets.left + offsets.width,
      bottom: offsets.top + offsets.height
    });
  }
  function getBoundingClientRect(element) {
    var rect = {};
    try {
      if (isIE(10)) {
        rect = element.getBoundingClientRect();
        var scrollTop = getScroll(element, "top");
        var scrollLeft2 = getScroll(element, "left");
        rect.top += scrollTop;
        rect.left += scrollLeft2;
        rect.bottom += scrollTop;
        rect.right += scrollLeft2;
      } else {
        rect = element.getBoundingClientRect();
      }
    } catch (e) {
    }
    var result = {
      left: rect.left,
      top: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };
    var sizes = element.nodeName === "HTML" ? getWindowSizes(element.ownerDocument) : {};
    var width2 = sizes.width || element.clientWidth || result.width;
    var height2 = sizes.height || element.clientHeight || result.height;
    var horizScrollbar = element.offsetWidth - width2;
    var vertScrollbar = element.offsetHeight - height2;
    if (horizScrollbar || vertScrollbar) {
      var styles131 = getStyleComputedProperty(element);
      horizScrollbar -= getBordersSize(styles131, "x");
      vertScrollbar -= getBordersSize(styles131, "y");
      result.width -= horizScrollbar;
      result.height -= vertScrollbar;
    }
    return getClientRect(result);
  }
  function getOffsetRectRelativeToArbitraryNode(children, parent) {
    var fixedPosition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var isIE102 = isIE(10);
    var isHTML = parent.nodeName === "HTML";
    var childrenRect = getBoundingClientRect(children);
    var parentRect = getBoundingClientRect(parent);
    var scrollParent = getScrollParent2(children);
    var styles131 = getStyleComputedProperty(parent);
    var borderTopWidth = parseFloat(styles131.borderTopWidth);
    var borderLeftWidth = parseFloat(styles131.borderLeftWidth);
    if (fixedPosition && isHTML) {
      parentRect.top = Math.max(parentRect.top, 0);
      parentRect.left = Math.max(parentRect.left, 0);
    }
    var offsets = getClientRect({
      top: childrenRect.top - parentRect.top - borderTopWidth,
      left: childrenRect.left - parentRect.left - borderLeftWidth,
      width: childrenRect.width,
      height: childrenRect.height
    });
    offsets.marginTop = 0;
    offsets.marginLeft = 0;
    if (!isIE102 && isHTML) {
      var marginTop = parseFloat(styles131.marginTop);
      var marginLeft = parseFloat(styles131.marginLeft);
      offsets.top -= borderTopWidth - marginTop;
      offsets.bottom -= borderTopWidth - marginTop;
      offsets.left -= borderLeftWidth - marginLeft;
      offsets.right -= borderLeftWidth - marginLeft;
      offsets.marginTop = marginTop;
      offsets.marginLeft = marginLeft;
    }
    if (isIE102 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== "BODY") {
      offsets = includeScroll(offsets, parent);
    }
    return offsets;
  }
  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
    var excludeScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var html2 = element.ownerDocument.documentElement;
    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html2);
    var width2 = Math.max(html2.clientWidth, window.innerWidth || 0);
    var height2 = Math.max(html2.clientHeight, window.innerHeight || 0);
    var scrollTop = !excludeScroll ? getScroll(html2) : 0;
    var scrollLeft2 = !excludeScroll ? getScroll(html2, "left") : 0;
    var offset2 = {
      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
      left: scrollLeft2 - relativeOffset.left + relativeOffset.marginLeft,
      width: width2,
      height: height2
    };
    return getClientRect(offset2);
  }
  function isFixed(element) {
    var nodeName = element.nodeName;
    if (nodeName === "BODY" || nodeName === "HTML") {
      return false;
    }
    if (getStyleComputedProperty(element, "position") === "fixed") {
      return true;
    }
    var parentNode = getParentNode(element);
    if (!parentNode) {
      return false;
    }
    return isFixed(parentNode);
  }
  function getFixedPositionOffsetParent(element) {
    if (!element || !element.parentElement || isIE()) {
      return document.documentElement;
    }
    var el2 = element.parentElement;
    while (el2 && getStyleComputedProperty(el2, "transform") === "none") {
      el2 = el2.parentElement;
    }
    return el2 || document.documentElement;
  }
  function getBoundaries(popper2, reference, padding, boundariesElement) {
    var fixedPosition = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    var boundaries = {top: 0, left: 0};
    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper2) : findCommonOffsetParent(popper2, getReferenceNode(reference));
    if (boundariesElement === "viewport") {
      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
    } else {
      var boundariesNode = void 0;
      if (boundariesElement === "scrollParent") {
        boundariesNode = getScrollParent2(getParentNode(reference));
        if (boundariesNode.nodeName === "BODY") {
          boundariesNode = popper2.ownerDocument.documentElement;
        }
      } else if (boundariesElement === "window") {
        boundariesNode = popper2.ownerDocument.documentElement;
      } else {
        boundariesNode = boundariesElement;
      }
      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
      if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
        var _getWindowSizes = getWindowSizes(popper2.ownerDocument), height2 = _getWindowSizes.height, width2 = _getWindowSizes.width;
        boundaries.top += offsets.top - offsets.marginTop;
        boundaries.bottom = height2 + offsets.top;
        boundaries.left += offsets.left - offsets.marginLeft;
        boundaries.right = width2 + offsets.left;
      } else {
        boundaries = offsets;
      }
    }
    padding = padding || 0;
    var isPaddingNumber = typeof padding === "number";
    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
    return boundaries;
  }
  function getArea(_ref6) {
    var width2 = _ref6.width, height2 = _ref6.height;
    return width2 * height2;
  }
  function computeAutoPlacement(placement, refRect, popper2, reference, boundariesElement) {
    var padding = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
    if (placement.indexOf("auto") === -1) {
      return placement;
    }
    var boundaries = getBoundaries(popper2, reference, padding, boundariesElement);
    var rects = {
      top: {
        width: boundaries.width,
        height: refRect.top - boundaries.top
      },
      right: {
        width: boundaries.right - refRect.right,
        height: boundaries.height
      },
      bottom: {
        width: boundaries.width,
        height: boundaries.bottom - refRect.bottom
      },
      left: {
        width: refRect.left - boundaries.left,
        height: boundaries.height
      }
    };
    var sortedAreas = Object.keys(rects).map(function(key3) {
      return _extends2({
        key: key3
      }, rects[key3], {
        area: getArea(rects[key3])
      });
    }).sort(function(a, b) {
      return b.area - a.area;
    });
    var filteredAreas = sortedAreas.filter(function(_ref24) {
      var width2 = _ref24.width, height2 = _ref24.height;
      return width2 >= popper2.clientWidth && height2 >= popper2.clientHeight;
    });
    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
    var variation = placement.split("-")[1];
    return computedPlacement + (variation ? "-" + variation : "");
  }
  function getReferenceOffsets(state, popper2, reference) {
    var fixedPosition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper2) : findCommonOffsetParent(popper2, getReferenceNode(reference));
    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
  }
  function getOuterSizes(element) {
    var window2 = element.ownerDocument.defaultView;
    var styles131 = window2.getComputedStyle(element);
    var x = parseFloat(styles131.marginTop || 0) + parseFloat(styles131.marginBottom || 0);
    var y = parseFloat(styles131.marginLeft || 0) + parseFloat(styles131.marginRight || 0);
    var result = {
      width: element.offsetWidth + y,
      height: element.offsetHeight + x
    };
    return result;
  }
  function getOppositePlacement(placement) {
    var hash = {left: "right", right: "left", bottom: "top", top: "bottom"};
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }
  function getPopperOffsets(popper2, referenceOffsets, placement) {
    placement = placement.split("-")[0];
    var popperRect = getOuterSizes(popper2);
    var popperOffsets = {
      width: popperRect.width,
      height: popperRect.height
    };
    var isHoriz = ["right", "left"].indexOf(placement) !== -1;
    var mainSide = isHoriz ? "top" : "left";
    var secondarySide = isHoriz ? "left" : "top";
    var measurement = isHoriz ? "height" : "width";
    var secondaryMeasurement = !isHoriz ? "height" : "width";
    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
    if (placement === secondarySide) {
      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
    } else {
      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
    }
    return popperOffsets;
  }
  function find(arr, check) {
    if (Array.prototype.find) {
      return arr.find(check);
    }
    return arr.filter(check)[0];
  }
  function findIndex(arr, prop, value) {
    if (Array.prototype.findIndex) {
      return arr.findIndex(function(cur) {
        return cur[prop] === value;
      });
    }
    var match = find(arr, function(obj) {
      return obj[prop] === value;
    });
    return arr.indexOf(match);
  }
  function runModifiers(modifiers2, data, ends) {
    var modifiersToRun = ends === void 0 ? modifiers2 : modifiers2.slice(0, findIndex(modifiers2, "name", ends));
    modifiersToRun.forEach(function(modifier) {
      if (modifier["function"]) {
        console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
      }
      var fn = modifier["function"] || modifier.fn;
      if (modifier.enabled && isFunction(fn)) {
        data.offsets.popper = getClientRect(data.offsets.popper);
        data.offsets.reference = getClientRect(data.offsets.reference);
        data = fn(data, modifier);
      }
    });
    return data;
  }
  function update2() {
    if (this.state.isDestroyed) {
      return;
    }
    var data = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: false,
      offsets: {}
    };
    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
    data.originalPlacement = data.placement;
    data.positionFixed = this.options.positionFixed;
    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
    data.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute";
    data = runModifiers(this.modifiers, data);
    if (!this.state.isCreated) {
      this.state.isCreated = true;
      this.options.onCreate(data);
    } else {
      this.options.onUpdate(data);
    }
  }
  function isModifierEnabled(modifiers2, modifierName) {
    return modifiers2.some(function(_ref6) {
      var name = _ref6.name, enabled = _ref6.enabled;
      return enabled && name === modifierName;
    });
  }
  function getSupportedPropertyName(property) {
    var prefixes = [false, "ms", "Webkit", "Moz", "O"];
    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
    for (var i = 0; i < prefixes.length; i++) {
      var prefix3 = prefixes[i];
      var toCheck = prefix3 ? "" + prefix3 + upperProp : property;
      if (typeof document.body.style[toCheck] !== "undefined") {
        return toCheck;
      }
    }
    return null;
  }
  function destroy() {
    this.state.isDestroyed = true;
    if (isModifierEnabled(this.modifiers, "applyStyle")) {
      this.popper.removeAttribute("x-placement");
      this.popper.style.position = "";
      this.popper.style.top = "";
      this.popper.style.left = "";
      this.popper.style.right = "";
      this.popper.style.bottom = "";
      this.popper.style.willChange = "";
      this.popper.style[getSupportedPropertyName("transform")] = "";
    }
    this.disableEventListeners();
    if (this.options.removeOnDestroy) {
      this.popper.parentNode.removeChild(this.popper);
    }
    return this;
  }
  function getWindow(element) {
    var ownerDocument13 = element.ownerDocument;
    return ownerDocument13 ? ownerDocument13.defaultView : window;
  }
  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
    var isBody = scrollParent.nodeName === "BODY";
    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
    target.addEventListener(event, callback, {passive: true});
    if (!isBody) {
      attachToScrollParents(getScrollParent2(target.parentNode), event, callback, scrollParents);
    }
    scrollParents.push(target);
  }
  function setupEventListeners(reference, options, state, updateBound) {
    state.updateBound = updateBound;
    getWindow(reference).addEventListener("resize", state.updateBound, {passive: true});
    var scrollElement = getScrollParent2(reference);
    attachToScrollParents(scrollElement, "scroll", state.updateBound, state.scrollParents);
    state.scrollElement = scrollElement;
    state.eventsEnabled = true;
    return state;
  }
  function enableEventListeners() {
    if (!this.state.eventsEnabled) {
      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
    }
  }
  function removeEventListeners(reference, state) {
    getWindow(reference).removeEventListener("resize", state.updateBound);
    state.scrollParents.forEach(function(target) {
      target.removeEventListener("scroll", state.updateBound);
    });
    state.updateBound = null;
    state.scrollParents = [];
    state.scrollElement = null;
    state.eventsEnabled = false;
    return state;
  }
  function disableEventListeners() {
    if (this.state.eventsEnabled) {
      cancelAnimationFrame(this.scheduleUpdate);
      this.state = removeEventListeners(this.reference, this.state);
    }
  }
  function isNumeric(n) {
    return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
  }
  function setStyles(element, styles131) {
    Object.keys(styles131).forEach(function(prop) {
      var unit = "";
      if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && isNumeric(styles131[prop])) {
        unit = "px";
      }
      element.style[prop] = styles131[prop] + unit;
    });
  }
  function setAttributes(element, attributes) {
    Object.keys(attributes).forEach(function(prop) {
      var value = attributes[prop];
      if (value !== false) {
        element.setAttribute(prop, attributes[prop]);
      } else {
        element.removeAttribute(prop);
      }
    });
  }
  function applyStyle(data) {
    setStyles(data.instance.popper, data.styles);
    setAttributes(data.instance.popper, data.attributes);
    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }
    return data;
  }
  function applyStyleOnLoad(reference, popper2, options, modifierOptions, state) {
    var referenceOffsets = getReferenceOffsets(state, popper2, reference, options.positionFixed);
    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper2, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
    popper2.setAttribute("x-placement", placement);
    setStyles(popper2, {position: options.positionFixed ? "fixed" : "absolute"});
    return options;
  }
  function getRoundedOffsets(data, shouldRound) {
    var _data$offsets = data.offsets, popper2 = _data$offsets.popper, reference = _data$offsets.reference;
    var round3 = Math.round, floor = Math.floor;
    var noRound = function noRound2(v) {
      return v;
    };
    var referenceWidth = round3(reference.width);
    var popperWidth = round3(popper2.width);
    var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
    var isVariation = data.placement.indexOf("-") !== -1;
    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round3 : floor;
    var verticalToInteger = !shouldRound ? noRound : round3;
    return {
      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper2.left - 1 : popper2.left),
      top: verticalToInteger(popper2.top),
      bottom: verticalToInteger(popper2.bottom),
      right: horizontalToInteger(popper2.right)
    };
  }
  var isFirefox = isBrowser2 && /Firefox/i.test(navigator.userAgent);
  function computeStyle(data, options) {
    var x = options.x, y = options.y;
    var popper2 = data.offsets.popper;
    var legacyGpuAccelerationOption = find(data.instance.modifiers, function(modifier) {
      return modifier.name === "applyStyle";
    }).gpuAcceleration;
    if (legacyGpuAccelerationOption !== void 0) {
      console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
    }
    var gpuAcceleration = legacyGpuAccelerationOption !== void 0 ? legacyGpuAccelerationOption : options.gpuAcceleration;
    var offsetParent = getOffsetParent(data.instance.popper);
    var offsetParentRect = getBoundingClientRect(offsetParent);
    var styles131 = {
      position: popper2.position
    };
    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
    var sideA = x === "bottom" ? "top" : "bottom";
    var sideB = y === "right" ? "left" : "right";
    var prefixedProperty = getSupportedPropertyName("transform");
    var left2 = void 0, top2 = void 0;
    if (sideA === "bottom") {
      if (offsetParent.nodeName === "HTML") {
        top2 = -offsetParent.clientHeight + offsets.bottom;
      } else {
        top2 = -offsetParentRect.height + offsets.bottom;
      }
    } else {
      top2 = offsets.top;
    }
    if (sideB === "right") {
      if (offsetParent.nodeName === "HTML") {
        left2 = -offsetParent.clientWidth + offsets.right;
      } else {
        left2 = -offsetParentRect.width + offsets.right;
      }
    } else {
      left2 = offsets.left;
    }
    if (gpuAcceleration && prefixedProperty) {
      styles131[prefixedProperty] = "translate3d(" + left2 + "px, " + top2 + "px, 0)";
      styles131[sideA] = 0;
      styles131[sideB] = 0;
      styles131.willChange = "transform";
    } else {
      var invertTop = sideA === "bottom" ? -1 : 1;
      var invertLeft = sideB === "right" ? -1 : 1;
      styles131[sideA] = top2 * invertTop;
      styles131[sideB] = left2 * invertLeft;
      styles131.willChange = sideA + ", " + sideB;
    }
    var attributes = {
      "x-placement": data.placement
    };
    data.attributes = _extends2({}, attributes, data.attributes);
    data.styles = _extends2({}, styles131, data.styles);
    data.arrowStyles = _extends2({}, data.offsets.arrow, data.arrowStyles);
    return data;
  }
  function isModifierRequired(modifiers2, requestingName, requestedName) {
    var requesting = find(modifiers2, function(_ref6) {
      var name = _ref6.name;
      return name === requestingName;
    });
    var isRequired = !!requesting && modifiers2.some(function(modifier) {
      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
    });
    if (!isRequired) {
      var _requesting = "`" + requestingName + "`";
      var requested = "`" + requestedName + "`";
      console.warn(requested + " modifier is required by " + _requesting + " modifier in order to work, be sure to include it before " + _requesting + "!");
    }
    return isRequired;
  }
  function arrow(data, options) {
    var _data$offsets$arrow;
    if (!isModifierRequired(data.instance.modifiers, "arrow", "keepTogether")) {
      return data;
    }
    var arrowElement = options.element;
    if (typeof arrowElement === "string") {
      arrowElement = data.instance.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return data;
      }
    } else {
      if (!data.instance.popper.contains(arrowElement)) {
        console.warn("WARNING: `arrow.element` must be child of its popper element!");
        return data;
      }
    }
    var placement = data.placement.split("-")[0];
    var _data$offsets = data.offsets, popper2 = _data$offsets.popper, reference = _data$offsets.reference;
    var isVertical = ["left", "right"].indexOf(placement) !== -1;
    var len = isVertical ? "height" : "width";
    var sideCapitalized = isVertical ? "Top" : "Left";
    var side = sideCapitalized.toLowerCase();
    var altSide = isVertical ? "left" : "top";
    var opSide = isVertical ? "bottom" : "right";
    var arrowElementSize = getOuterSizes(arrowElement)[len];
    if (reference[opSide] - arrowElementSize < popper2[side]) {
      data.offsets.popper[side] -= popper2[side] - (reference[opSide] - arrowElementSize);
    }
    if (reference[side] + arrowElementSize > popper2[opSide]) {
      data.offsets.popper[side] += reference[side] + arrowElementSize - popper2[opSide];
    }
    data.offsets.popper = getClientRect(data.offsets.popper);
    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
    var css4 = getStyleComputedProperty(data.instance.popper);
    var popperMarginSide = parseFloat(css4["margin" + sideCapitalized]);
    var popperBorderSide = parseFloat(css4["border" + sideCapitalized + "Width"]);
    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
    sideValue = Math.max(Math.min(popper2[len] - arrowElementSize, sideValue), 0);
    data.arrowElement = arrowElement;
    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty18(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty18(_data$offsets$arrow, altSide, ""), _data$offsets$arrow);
    return data;
  }
  function getOppositeVariation(variation) {
    if (variation === "end") {
      return "start";
    } else if (variation === "start") {
      return "end";
    }
    return variation;
  }
  var placements = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"];
  var validPlacements = placements.slice(3);
  function clockwise(placement) {
    var counter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var index3 = validPlacements.indexOf(placement);
    var arr = validPlacements.slice(index3 + 1).concat(validPlacements.slice(0, index3));
    return counter ? arr.reverse() : arr;
  }
  var BEHAVIORS = {
    FLIP: "flip",
    CLOCKWISE: "clockwise",
    COUNTERCLOCKWISE: "counterclockwise"
  };
  function flip(data, options) {
    if (isModifierEnabled(data.instance.modifiers, "inner")) {
      return data;
    }
    if (data.flipped && data.placement === data.originalPlacement) {
      return data;
    }
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
    var placement = data.placement.split("-")[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split("-")[1] || "";
    var flipOrder = [];
    switch (options.behavior) {
      case BEHAVIORS.FLIP:
        flipOrder = [placement, placementOpposite];
        break;
      case BEHAVIORS.CLOCKWISE:
        flipOrder = clockwise(placement);
        break;
      case BEHAVIORS.COUNTERCLOCKWISE:
        flipOrder = clockwise(placement, true);
        break;
      default:
        flipOrder = options.behavior;
    }
    flipOrder.forEach(function(step, index3) {
      if (placement !== step || flipOrder.length === index3 + 1) {
        return data;
      }
      placement = data.placement.split("-")[0];
      placementOpposite = getOppositePlacement(placement);
      var popperOffsets = data.offsets.popper;
      var refOffsets = data.offsets.reference;
      var floor = Math.floor;
      var overlapsRef = placement === "left" && floor(popperOffsets.right) > floor(refOffsets.left) || placement === "right" && floor(popperOffsets.left) < floor(refOffsets.right) || placement === "top" && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === "bottom" && floor(popperOffsets.top) < floor(refOffsets.bottom);
      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
      var overflowsBoundaries = placement === "left" && overflowsLeft || placement === "right" && overflowsRight || placement === "top" && overflowsTop || placement === "bottom" && overflowsBottom;
      var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === "start" && overflowsLeft || isVertical && variation === "end" && overflowsRight || !isVertical && variation === "start" && overflowsTop || !isVertical && variation === "end" && overflowsBottom);
      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === "start" && overflowsRight || isVertical && variation === "end" && overflowsLeft || !isVertical && variation === "start" && overflowsBottom || !isVertical && variation === "end" && overflowsTop);
      var flippedVariation = flippedVariationByRef || flippedVariationByContent;
      if (overlapsRef || overflowsBoundaries || flippedVariation) {
        data.flipped = true;
        if (overlapsRef || overflowsBoundaries) {
          placement = flipOrder[index3 + 1];
        }
        if (flippedVariation) {
          variation = getOppositeVariation(variation);
        }
        data.placement = placement + (variation ? "-" + variation : "");
        data.offsets.popper = _extends2({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
        data = runModifiers(data.instance.modifiers, data, "flip");
      }
    });
    return data;
  }
  function keepTogether(data) {
    var _data$offsets = data.offsets, popper2 = _data$offsets.popper, reference = _data$offsets.reference;
    var placement = data.placement.split("-")[0];
    var floor = Math.floor;
    var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
    var side = isVertical ? "right" : "bottom";
    var opSide = isVertical ? "left" : "top";
    var measurement = isVertical ? "width" : "height";
    if (popper2[side] < floor(reference[opSide])) {
      data.offsets.popper[opSide] = floor(reference[opSide]) - popper2[measurement];
    }
    if (popper2[opSide] > floor(reference[side])) {
      data.offsets.popper[opSide] = floor(reference[side]);
    }
    return data;
  }
  function toValue(str, measurement, popperOffsets, referenceOffsets) {
    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
    var value = +split[1];
    var unit = split[2];
    if (!value) {
      return str;
    }
    if (unit.indexOf("%") === 0) {
      var element = void 0;
      switch (unit) {
        case "%p":
          element = popperOffsets;
          break;
        case "%":
        case "%r":
        default:
          element = referenceOffsets;
      }
      var rect = getClientRect(element);
      return rect[measurement] / 100 * value;
    } else if (unit === "vh" || unit === "vw") {
      var size = void 0;
      if (unit === "vh") {
        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      } else {
        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      }
      return size / 100 * value;
    } else {
      return value;
    }
  }
  function parseOffset(offset2, popperOffsets, referenceOffsets, basePlacement) {
    var offsets = [0, 0];
    var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;
    var fragments = offset2.split(/(\+|\-)/).map(function(frag) {
      return frag.trim();
    });
    var divider = fragments.indexOf(find(fragments, function(frag) {
      return frag.search(/,|\s/) !== -1;
    }));
    if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
      console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
    }
    var splitRegex = /\s*,\s*|\s+/;
    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
    ops = ops.map(function(op, index3) {
      var measurement = (index3 === 1 ? !useHeight : useHeight) ? "height" : "width";
      var mergeWithPrevious = false;
      return op.reduce(function(a, b) {
        if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
          a[a.length - 1] = b;
          mergeWithPrevious = true;
          return a;
        } else if (mergeWithPrevious) {
          a[a.length - 1] += b;
          mergeWithPrevious = false;
          return a;
        } else {
          return a.concat(b);
        }
      }, []).map(function(str) {
        return toValue(str, measurement, popperOffsets, referenceOffsets);
      });
    });
    ops.forEach(function(op, index3) {
      op.forEach(function(frag, index22) {
        if (isNumeric(frag)) {
          offsets[index3] += frag * (op[index22 - 1] === "-" ? -1 : 1);
        }
      });
    });
    return offsets;
  }
  function offset(data, _ref6) {
    var offset2 = _ref6.offset;
    var placement = data.placement, _data$offsets = data.offsets, popper2 = _data$offsets.popper, reference = _data$offsets.reference;
    var basePlacement = placement.split("-")[0];
    var offsets = void 0;
    if (isNumeric(+offset2)) {
      offsets = [+offset2, 0];
    } else {
      offsets = parseOffset(offset2, popper2, reference, basePlacement);
    }
    if (basePlacement === "left") {
      popper2.top += offsets[0];
      popper2.left -= offsets[1];
    } else if (basePlacement === "right") {
      popper2.top += offsets[0];
      popper2.left += offsets[1];
    } else if (basePlacement === "top") {
      popper2.left += offsets[0];
      popper2.top -= offsets[1];
    } else if (basePlacement === "bottom") {
      popper2.left += offsets[0];
      popper2.top += offsets[1];
    }
    data.popper = popper2;
    return data;
  }
  function preventOverflow(data, options) {
    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
    if (data.instance.reference === boundariesElement) {
      boundariesElement = getOffsetParent(boundariesElement);
    }
    var transformProp = getSupportedPropertyName("transform");
    var popperStyles = data.instance.popper.style;
    var top2 = popperStyles.top, left2 = popperStyles.left, transform3 = popperStyles[transformProp];
    popperStyles.top = "";
    popperStyles.left = "";
    popperStyles[transformProp] = "";
    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
    popperStyles.top = top2;
    popperStyles.left = left2;
    popperStyles[transformProp] = transform3;
    options.boundaries = boundaries;
    var order2 = options.priority;
    var popper2 = data.offsets.popper;
    var check = {
      primary: function primary(placement) {
        var value = popper2[placement];
        if (popper2[placement] < boundaries[placement] && !options.escapeWithReference) {
          value = Math.max(popper2[placement], boundaries[placement]);
        }
        return defineProperty18({}, placement, value);
      },
      secondary: function secondary(placement) {
        var mainSide = placement === "right" ? "left" : "top";
        var value = popper2[mainSide];
        if (popper2[placement] > boundaries[placement] && !options.escapeWithReference) {
          value = Math.min(popper2[mainSide], boundaries[placement] - (placement === "right" ? popper2.width : popper2.height));
        }
        return defineProperty18({}, mainSide, value);
      }
    };
    order2.forEach(function(placement) {
      var side = ["left", "top"].indexOf(placement) !== -1 ? "primary" : "secondary";
      popper2 = _extends2({}, popper2, check[side](placement));
    });
    data.offsets.popper = popper2;
    return data;
  }
  function shift(data) {
    var placement = data.placement;
    var basePlacement = placement.split("-")[0];
    var shiftvariation = placement.split("-")[1];
    if (shiftvariation) {
      var _data$offsets = data.offsets, reference = _data$offsets.reference, popper2 = _data$offsets.popper;
      var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
      var side = isVertical ? "left" : "top";
      var measurement = isVertical ? "width" : "height";
      var shiftOffsets = {
        start: defineProperty18({}, side, reference[side]),
        end: defineProperty18({}, side, reference[side] + reference[measurement] - popper2[measurement])
      };
      data.offsets.popper = _extends2({}, popper2, shiftOffsets[shiftvariation]);
    }
    return data;
  }
  function hide(data) {
    if (!isModifierRequired(data.instance.modifiers, "hide", "preventOverflow")) {
      return data;
    }
    var refRect = data.offsets.reference;
    var bound = find(data.instance.modifiers, function(modifier) {
      return modifier.name === "preventOverflow";
    }).boundaries;
    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
      if (data.hide === true) {
        return data;
      }
      data.hide = true;
      data.attributes["x-out-of-boundaries"] = "";
    } else {
      if (data.hide === false) {
        return data;
      }
      data.hide = false;
      data.attributes["x-out-of-boundaries"] = false;
    }
    return data;
  }
  function inner(data) {
    var placement = data.placement;
    var basePlacement = placement.split("-")[0];
    var _data$offsets = data.offsets, popper2 = _data$offsets.popper, reference = _data$offsets.reference;
    var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;
    var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;
    popper2[isHoriz ? "left" : "top"] = reference[basePlacement] - (subtractLength ? popper2[isHoriz ? "width" : "height"] : 0);
    data.placement = getOppositePlacement(placement);
    data.offsets.popper = getClientRect(popper2);
    return data;
  }
  var modifiers = {
    shift: {
      order: 100,
      enabled: true,
      fn: shift
    },
    offset: {
      order: 200,
      enabled: true,
      fn: offset,
      offset: 0
    },
    preventOverflow: {
      order: 300,
      enabled: true,
      fn: preventOverflow,
      priority: ["left", "right", "top", "bottom"],
      padding: 5,
      boundariesElement: "scrollParent"
    },
    keepTogether: {
      order: 400,
      enabled: true,
      fn: keepTogether
    },
    arrow: {
      order: 500,
      enabled: true,
      fn: arrow,
      element: "[x-arrow]"
    },
    flip: {
      order: 600,
      enabled: true,
      fn: flip,
      behavior: "flip",
      padding: 5,
      boundariesElement: "viewport",
      flipVariations: false,
      flipVariationsByContent: false
    },
    inner: {
      order: 700,
      enabled: false,
      fn: inner
    },
    hide: {
      order: 800,
      enabled: true,
      fn: hide
    },
    computeStyle: {
      order: 850,
      enabled: true,
      fn: computeStyle,
      gpuAcceleration: true,
      x: "bottom",
      y: "right"
    },
    applyStyle: {
      order: 900,
      enabled: true,
      fn: applyStyle,
      onLoad: applyStyleOnLoad,
      gpuAcceleration: void 0
    }
  };
  var Defaults = {
    placement: "bottom",
    positionFixed: false,
    eventsEnabled: true,
    removeOnDestroy: false,
    onCreate: function onCreate() {
    },
    onUpdate: function onUpdate() {
    },
    modifiers
  };
  var Popper4 = function() {
    function Popper5(reference, popper2) {
      var _this = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      classCallCheck4(this, Popper5);
      this.scheduleUpdate = function() {
        return requestAnimationFrame(_this.update);
      };
      this.update = debounce9(this.update.bind(this));
      this.options = _extends2({}, Popper5.Defaults, options);
      this.state = {
        isDestroyed: false,
        isCreated: false,
        scrollParents: []
      };
      this.reference = reference && reference.jquery ? reference[0] : reference;
      this.popper = popper2 && popper2.jquery ? popper2[0] : popper2;
      this.options.modifiers = {};
      Object.keys(_extends2({}, Popper5.Defaults.modifiers, options.modifiers)).forEach(function(name) {
        _this.options.modifiers[name] = _extends2({}, Popper5.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
      });
      this.modifiers = Object.keys(this.options.modifiers).map(function(name) {
        return _extends2({
          name
        }, _this.options.modifiers[name]);
      }).sort(function(a, b) {
        return a.order - b.order;
      });
      this.modifiers.forEach(function(modifierOptions) {
        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
        }
      });
      this.update();
      var eventsEnabled = this.options.eventsEnabled;
      if (eventsEnabled) {
        this.enableEventListeners();
      }
      this.state.eventsEnabled = eventsEnabled;
    }
    createClass5(Popper5, [{
      key: "update",
      value: function update$$1() {
        return update2.call(this);
      }
    }, {
      key: "destroy",
      value: function destroy$$1() {
        return destroy.call(this);
      }
    }, {
      key: "enableEventListeners",
      value: function enableEventListeners$$1() {
        return enableEventListeners.call(this);
      }
    }, {
      key: "disableEventListeners",
      value: function disableEventListeners$$1() {
        return disableEventListeners.call(this);
      }
    }]);
    return Popper5;
  }();
  Popper4.Utils = (typeof window !== "undefined" ? window : global).PopperUtils;
  Popper4.placements = placements;
  Popper4.Defaults = Defaults;
  const popper_default = Popper4;

  // node_modules/@material-ui/core/esm/Popper/Popper.js
  const React90 = __toModule(require_react());
  const prop_types86 = __toModule(require_prop_types());
  function flipPlacement(placement, theme) {
    var direction = theme && theme.direction || "ltr";
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function getAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useEnhancedEffect6 = typeof window !== "undefined" ? React90.useLayoutEffect : React90.useEffect;
  var defaultPopperOptions = {};
  var Popper = React90.forwardRef(function Popper5(props, ref) {
    var anchorEl = props.anchorEl, children = props.children, container = props.container, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, _props$keepMounted = props.keepMounted, keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted, modifiers2 = props.modifiers, open = props.open, _props$placement = props.placement, initialPlacement = _props$placement === void 0 ? "bottom" : _props$placement, _props$popperOptions = props.popperOptions, popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions, popperRefProp = props.popperRef, style13 = props.style, _props$transition = props.transition, transition2 = _props$transition === void 0 ? false : _props$transition, other = _objectWithoutProperties(props, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"]);
    var tooltipRef = React90.useRef(null);
    var ownRef = useForkRef2(tooltipRef, ref);
    var popperRef = React90.useRef(null);
    var handlePopperRef = useForkRef2(popperRef, popperRefProp);
    var handlePopperRefRef = React90.useRef(handlePopperRef);
    useEnhancedEffect6(function() {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React90.useImperativeHandle(popperRefProp, function() {
      return popperRef.current;
    }, []);
    var _React$useState = React90.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
    var theme = useTheme10();
    var rtlPlacement = flipPlacement(initialPlacement, theme);
    var _React$useState2 = React90.useState(rtlPlacement), placement = _React$useState2[0], setPlacement = _React$useState2[1];
    React90.useEffect(function() {
      if (popperRef.current) {
        popperRef.current.update();
      }
    });
    var handleOpen = React90.useCallback(function() {
      if (!tooltipRef.current || !anchorEl || !open) {
        return;
      }
      if (popperRef.current) {
        popperRef.current.destroy();
        handlePopperRefRef.current(null);
      }
      var handlePopperUpdate = function handlePopperUpdate2(data) {
        setPlacement(data.placement);
      };
      var resolvedAnchorEl = getAnchorEl2(anchorEl);
      if (true) {
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      var popper2 = new popper_default(getAnchorEl2(anchorEl), tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: _extends({}, disablePortal ? {} : {
          preventOverflow: {
            boundariesElement: "window"
          }
        }, modifiers2, popperOptions.modifiers),
        onCreate: createChainedFunction2(handlePopperUpdate, popperOptions.onCreate),
        onUpdate: createChainedFunction2(handlePopperUpdate, popperOptions.onUpdate)
      }));
      handlePopperRefRef.current(popper2);
    }, [anchorEl, disablePortal, modifiers2, open, rtlPlacement, popperOptions]);
    var handleRef = React90.useCallback(function(node) {
      setRef2(ownRef, node);
      handleOpen();
    }, [ownRef, handleOpen]);
    var handleEnter = function handleEnter2() {
      setExited(false);
    };
    var handleClose = function handleClose2() {
      if (!popperRef.current) {
        return;
      }
      popperRef.current.destroy();
      handlePopperRefRef.current(null);
    };
    var handleExited = function handleExited2() {
      setExited(true);
      handleClose();
    };
    React90.useEffect(function() {
      return function() {
        handleClose();
      };
    }, []);
    React90.useEffect(function() {
      if (!open && !transition2) {
        handleClose();
      }
    }, [open, transition2]);
    if (!keepMounted && !open && (!transition2 || exited)) {
      return null;
    }
    var childProps = {
      placement
    };
    if (transition2) {
      childProps.TransitionProps = {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      };
    }
    return React90.createElement(Portal_default, {
      disablePortal,
      container
    }, React90.createElement("div", _extends({
      ref: handleRef,
      role: "tooltip"
    }, other, {
      style: _extends({
        position: "fixed",
        top: 0,
        left: 0,
        display: !open && keepMounted && !transition2 ? "none" : null
      }, style13)
    }), typeof children === "function" ? children(childProps) : children));
  });
  Popper.propTypes = {
    anchorEl: chainPropTypes(prop_types86.default.oneOfType([HTMLElementType, prop_types86.default.object, prop_types86.default.func]), function(props) {
      if (props.open) {
        var resolvedAnchorEl = getAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.clientWidth !== "number" || typeof resolvedAnchorEl.clientHeight !== "number" || typeof resolvedAnchorEl.getBoundingClientRect !== "function") {
          return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a referenceObject ", "(https://popper.js.org/docs/v1/#referenceObject)."].join("\n"));
        }
      }
      return null;
    }),
    children: prop_types86.default.oneOfType([prop_types86.default.node, prop_types86.default.func]).isRequired,
    container: prop_types86.default.oneOfType([HTMLElementType, prop_types86.default.instanceOf(React90.Component), prop_types86.default.func]),
    disablePortal: prop_types86.default.bool,
    keepMounted: prop_types86.default.bool,
    modifiers: prop_types86.default.object,
    open: prop_types86.default.bool.isRequired,
    placement: prop_types86.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    popperOptions: prop_types86.default.object,
    popperRef: refType_default,
    style: prop_types86.default.object,
    transition: prop_types86.default.bool
  };
  const Popper_default = Popper;

  // node_modules/@material-ui/core/esm/internal/svg-icons/RadioButtonUnchecked.js
  const React153 = __toModule(require_react());
  const RadioButtonUnchecked_default = createSvgIcon2(React153.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "RadioButtonUnchecked");

  // node_modules/@material-ui/core/esm/internal/svg-icons/RadioButtonChecked.js
  const React152 = __toModule(require_react());
  const RadioButtonChecked_default = createSvgIcon2(React152.createElement("path", {
    d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
  }), "RadioButtonChecked");

  // node_modules/@material-ui/core/esm/Radio/RadioButtonIcon.js
  const React93 = __toModule(require_react());
  const prop_types89 = __toModule(require_prop_types());
  var styles82 = function styles131(theme) {
    return {
      root: {
        position: "relative",
        display: "flex",
        "&$checked $layer": {
          transform: "scale(1)",
          transition: theme.transitions.create("transform", {
            easing: theme.transitions.easing.easeOut,
            duration: theme.transitions.duration.shortest
          })
        }
      },
      layer: {
        left: 0,
        position: "absolute",
        transform: "scale(0)",
        transition: theme.transitions.create("transform", {
          easing: theme.transitions.easing.easeIn,
          duration: theme.transitions.duration.shortest
        })
      },
      checked: {}
    };
  };
  function RadioButtonIcon2(props) {
    var checked = props.checked, classes = props.classes, fontSize2 = props.fontSize;
    return React93.createElement("div", {
      className: clsx_m_default(classes.root, checked && classes.checked)
    }, React93.createElement(RadioButtonUnchecked_default, {
      fontSize: fontSize2
    }), React93.createElement(RadioButtonChecked_default, {
      fontSize: fontSize2,
      className: classes.layer
    }));
  }
  RadioButtonIcon2.propTypes = {
    checked: prop_types89.default.bool,
    classes: prop_types89.default.object.isRequired,
    fontSize: prop_types89.default.oneOf(["small", "default"])
  };
  const RadioButtonIcon_default = withStyles_default(styles82, {
    name: "PrivateRadioButtonIcon"
  })(RadioButtonIcon2);

  // node_modules/@material-ui/core/esm/RadioGroup/RadioGroupContext.js
  const React95 = __toModule(require_react());
  var RadioGroupContext2 = React95.createContext();
  if (true) {
    RadioGroupContext2.displayName = "RadioGroupContext";
  }
  const RadioGroupContext_default = RadioGroupContext2;

  // node_modules/@material-ui/core/esm/RadioGroup/useRadioGroup.js
  const React96 = __toModule(require_react());
  function useRadioGroup2() {
    return React96.useContext(RadioGroupContext_default);
  }

  // node_modules/@material-ui/core/esm/Radio/Radio.js
  const React92 = __toModule(require_react());
  const prop_types88 = __toModule(require_prop_types());
  var styles81 = function styles131(theme) {
    return {
      root: {
        color: theme.palette.text.secondary
      },
      checked: {},
      disabled: {},
      colorPrimary: {
        "&$checked": {
          color: theme.palette.primary.main,
          "&:hover": {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      },
      colorSecondary: {
        "&$checked": {
          color: theme.palette.secondary.main,
          "&:hover": {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }
    };
  };
  var defaultCheckedIcon2 = React92.createElement(RadioButtonIcon_default, {
    checked: true
  });
  var defaultIcon2 = React92.createElement(RadioButtonIcon_default, null);
  var Radio = React92.forwardRef(function Radio3(props, ref) {
    var checkedProp = props.checked, classes = props.classes, _props$color = props.color, color2 = _props$color === void 0 ? "secondary" : _props$color, nameProp = props.name, onChangeProp = props.onChange, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["checked", "classes", "color", "name", "onChange", "size"]);
    var radioGroup = useRadioGroup2();
    var checked = checkedProp;
    var onChange = createChainedFunction2(onChangeProp, radioGroup && radioGroup.onChange);
    var name = nameProp;
    if (radioGroup) {
      if (typeof checked === "undefined") {
        checked = radioGroup.value === props.value;
      }
      if (typeof name === "undefined") {
        name = radioGroup.name;
      }
    }
    return React92.createElement(SwitchBase_default, _extends({
      color: color2,
      type: "radio",
      icon: React92.cloneElement(defaultIcon2, {
        fontSize: size === "small" ? "small" : "default"
      }),
      checkedIcon: React92.cloneElement(defaultCheckedIcon2, {
        fontSize: size === "small" ? "small" : "default"
      }),
      classes: {
        root: clsx_m_default(classes.root, classes["color".concat(capitalize2(color2))]),
        checked: classes.checked,
        disabled: classes.disabled
      },
      name,
      checked,
      onChange,
      ref
    }, other));
  });
  Radio.propTypes = {
    checked: prop_types88.default.bool,
    checkedIcon: prop_types88.default.node,
    classes: prop_types88.default.object,
    color: prop_types88.default.oneOf(["default", "primary", "secondary"]),
    disabled: prop_types88.default.bool,
    disableRipple: prop_types88.default.bool,
    icon: prop_types88.default.node,
    id: prop_types88.default.string,
    inputProps: prop_types88.default.object,
    inputRef: refType_default,
    name: prop_types88.default.string,
    onChange: prop_types88.default.func,
    required: prop_types88.default.bool,
    size: prop_types88.default.oneOf(["medium", "small"]),
    value: prop_types88.default.any
  };
  const Radio_default = withStyles_default(styles81, {
    name: "MuiRadio"
  })(Radio);

  // node_modules/@material-ui/core/esm/RadioGroup/RadioGroup.js
  const React94 = __toModule(require_react());
  const prop_types90 = __toModule(require_prop_types());
  var RadioGroup = React94.forwardRef(function RadioGroup3(props, ref) {
    var actions = props.actions, children = props.children, nameProp = props.name, valueProp = props.value, onChange = props.onChange, other = _objectWithoutProperties(props, ["actions", "children", "name", "value", "onChange"]);
    var rootRef = React94.useRef(null);
    var _useControlled = useControlled2({
      controlled: valueProp,
      default: props.defaultValue,
      name: "RadioGroup"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), value = _useControlled2[0], setValue = _useControlled2[1];
    React94.useImperativeHandle(actions, function() {
      return {
        focus: function focus() {
          var input = rootRef.current.querySelector("input:not(:disabled):checked");
          if (!input) {
            input = rootRef.current.querySelector("input:not(:disabled)");
          }
          if (input) {
            input.focus();
          }
        }
      };
    }, []);
    var handleRef = useForkRef2(ref, rootRef);
    var handleChange = function handleChange2(event) {
      setValue(event.target.value);
      if (onChange) {
        onChange(event, event.target.value);
      }
    };
    var name = useId(nameProp);
    return React94.createElement(RadioGroupContext_default.Provider, {
      value: {
        name,
        onChange: handleChange,
        value
      }
    }, React94.createElement(FormGroup_default, _extends({
      role: "radiogroup",
      ref: handleRef
    }, other), children));
  });
  RadioGroup.propTypes = {
    children: prop_types90.default.node,
    defaultValue: prop_types90.default.oneOfType([prop_types90.default.arrayOf(prop_types90.default.string), prop_types90.default.number, prop_types90.default.string]),
    name: prop_types90.default.string,
    onChange: prop_types90.default.func,
    value: prop_types90.default.any
  };
  const RadioGroup_default = RadioGroup;

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inherits.js
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
  function _possibleConstructorReturn(self2, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }

  // node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }

  // node_modules/@material-ui/core/esm/RootRef/RootRef.js
  const React97 = __toModule(require_react());
  const ReactDOM9 = __toModule(require_react_dom());
  const prop_types91 = __toModule(require_prop_types());
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var RootRef = function(_React$Component) {
    _inherits(RootRef3, _React$Component);
    var _super = _createSuper(RootRef3);
    function RootRef3() {
      _classCallCheck(this, RootRef3);
      return _super.apply(this, arguments);
    }
    _createClass(RootRef3, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.ref = ReactDOM9.findDOMNode(this);
        setRef2(this.props.rootRef, this.ref);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var ref = ReactDOM9.findDOMNode(this);
        if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
          if (prevProps.rootRef !== this.props.rootRef) {
            setRef2(prevProps.rootRef, null);
          }
          this.ref = ref;
          setRef2(this.props.rootRef, this.ref);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.ref = null;
        setRef2(this.props.rootRef, null);
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return RootRef3;
  }(React97.Component);
  RootRef.propTypes = {
    children: prop_types91.default.element.isRequired,
    rootRef: refType_default.isRequired
  };
  if (true) {
    RootRef.propTypes = exactProp(RootRef.propTypes);
  }
  const RootRef_default = RootRef;

  // node_modules/@material-ui/core/esm/Select/SelectInput.js
  const React99 = __toModule(require_react());
  const react_is9 = __toModule(require_react_is());
  const prop_types93 = __toModule(require_prop_types());
  function areEqualValues(a, b) {
    if (_typeof(b) === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty(display2) {
    return display2 == null || typeof display2 === "string" && !display2.trim();
  }
  var SelectInput2 = React99.forwardRef(function SelectInput3(props, ref) {
    var ariaLabel = props["aria-label"], autoFocus = props.autoFocus, autoWidth = props.autoWidth, children = props.children, classes = props.classes, className = props.className, defaultValue = props.defaultValue, disabled = props.disabled, displayEmpty = props.displayEmpty, IconComponent = props.IconComponent, inputRefProp = props.inputRef, labelId = props.labelId, _props$MenuProps = props.MenuProps, MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps, multiple = props.multiple, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClose = props.onClose, onFocus = props.onFocus, onOpen = props.onOpen, openProp = props.open, readOnly = props.readOnly, renderValue = props.renderValue, _props$SelectDisplayP = props.SelectDisplayProps, SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP, tabIndexProp = props.tabIndex, type = props.type, valueProp = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);
    var _useControlled = useControlled2({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), value = _useControlled2[0], setValue = _useControlled2[1];
    var inputRef = React99.useRef(null);
    var _React$useState = React99.useState(null), displayNode = _React$useState[0], setDisplayNode = _React$useState[1];
    var _React$useRef = React99.useRef(openProp != null), isOpenControlled = _React$useRef.current;
    var _React$useState2 = React99.useState(), menuMinWidthState = _React$useState2[0], setMenuMinWidthState = _React$useState2[1];
    var _React$useState3 = React99.useState(false), openState = _React$useState3[0], setOpenState = _React$useState3[1];
    var handleRef = useForkRef2(ref, inputRefProp);
    React99.useImperativeHandle(handleRef, function() {
      return {
        focus: function focus() {
          displayNode.focus();
        },
        node: inputRef.current,
        value
      };
    }, [displayNode, value]);
    React99.useEffect(function() {
      if (autoFocus && displayNode) {
        displayNode.focus();
      }
    }, [autoFocus, displayNode]);
    React99.useEffect(function() {
      if (displayNode) {
        var label = ownerDocument2(displayNode).getElementById(labelId);
        if (label) {
          var handler = function handler2() {
            if (getSelection().isCollapsed) {
              displayNode.focus();
            }
          };
          label.addEventListener("click", handler);
          return function() {
            label.removeEventListener("click", handler);
          };
        }
      }
      return void 0;
    }, [labelId, displayNode]);
    var update3 = function update4(open2, event) {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        setOpenState(open2);
      }
    };
    var handleMouseDown = function handleMouseDown2(event) {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayNode.focus();
      update3(true, event);
    };
    var handleClose = function handleClose2(event) {
      update3(false, event);
    };
    var childrenArray = React99.Children.toArray(children);
    var handleChange = function handleChange2(event) {
      var index3 = childrenArray.map(function(child2) {
        return child2.props.value;
      }).indexOf(event.target.value);
      if (index3 === -1) {
        return;
      }
      var child = childrenArray[index3];
      setValue(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    var handleItemClick = function handleItemClick2(child) {
      return function(event) {
        if (!multiple) {
          update3(false, event);
        }
        var newValue;
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          var itemIndex = value.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value === newValue) {
          return;
        }
        setValue(newValue);
        if (onChange) {
          event.persist();
          Object.defineProperty(event, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(event, child);
        }
      };
    };
    var handleKeyDown2 = function handleKeyDown3(event) {
      if (!readOnly) {
        var validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update3(true, event);
        }
      }
    };
    var open = displayNode !== null && (isOpenControlled ? openProp : openState);
    var handleBlur = function handleBlur2(event) {
      if (!open && onBlur) {
        event.persist();
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    var display2;
    var displaySingle;
    var displayMultiple = [];
    var computeDisplay = false;
    var foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display2 = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    var items = childrenArray.map(function(child) {
      if (!React99.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is9.isFragment(child)) {
          console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error("Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`.");
        }
        selected = value.some(function(v) {
          return areEqualValues(v, child.props.value);
        });
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return React99.cloneElement(child, {
        "aria-selected": selected ? "true" : void 0,
        onClick: handleItemClick(child),
        onKeyUp: function onKeyUp(event) {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        "data-value": child.props.value
      });
    });
    if (true) {
      React99.useEffect(function() {
        if (!foundMatch && !multiple && value !== "") {
          var values3 = childrenArray.map(function(child) {
            return child.props.value;
          });
          console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? '(name="'.concat(name, '") ') : "", "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values3.filter(function(x) {
            return x != null;
          }).map(function(x) {
            return "`".concat(x, "`");
          }).join(", ") || '""', ".")].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      display2 = multiple ? displayMultiple.join(", ") : displaySingle;
    }
    var menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = displayNode.clientWidth;
    }
    var tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : void 0);
    return React99.createElement(React99.Fragment, null, React99.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),
      ref: setDisplayNode,
      tabIndex,
      role: "button",
      "aria-disabled": disabled ? "true" : void 0,
      "aria-expanded": open ? "true" : void 0,
      "aria-haspopup": "listbox",
      "aria-label": ariaLabel,
      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
      onKeyDown: handleKeyDown2,
      onMouseDown: disabled || readOnly ? null : handleMouseDown,
      onBlur: handleBlur,
      onFocus
    }, SelectDisplayProps, {
      id: buttonId
    }), isEmpty(display2) ? React99.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    }) : display2), React99.createElement("input", _extends({
      value: Array.isArray(value) ? value.join(",") : value,
      name,
      ref: inputRef,
      "aria-hidden": true,
      onChange: handleChange,
      tabIndex: -1,
      className: classes.nativeInput,
      autoFocus
    }, other)), React99.createElement(IconComponent, {
      className: clsx_m_default(classes.icon, classes["icon".concat(capitalize2(variant))], open && classes.iconOpen, disabled && classes.disabled)
    }), React99.createElement(Menu_default, _extends({
      id: "menu-".concat(name || ""),
      anchorEl: displayNode,
      open,
      onClose: handleClose
    }, MenuProps, {
      MenuListProps: _extends({
        "aria-labelledby": labelId,
        role: "listbox",
        disableListWrap: true
      }, MenuProps.MenuListProps),
      PaperProps: _extends({}, MenuProps.PaperProps, {
        style: _extends({
          minWidth: menuMinWidth
        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
      })
    }), items));
  });
  SelectInput2.propTypes = {
    "aria-label": prop_types93.default.string,
    autoFocus: prop_types93.default.bool,
    autoWidth: prop_types93.default.bool,
    children: prop_types93.default.node,
    classes: prop_types93.default.object.isRequired,
    className: prop_types93.default.string,
    defaultValue: prop_types93.default.any,
    disabled: prop_types93.default.bool,
    displayEmpty: prop_types93.default.bool,
    IconComponent: prop_types93.default.elementType.isRequired,
    inputRef: refType_default,
    labelId: prop_types93.default.string,
    MenuProps: prop_types93.default.object,
    multiple: prop_types93.default.bool,
    name: prop_types93.default.string,
    onBlur: prop_types93.default.func,
    onChange: prop_types93.default.func,
    onClose: prop_types93.default.func,
    onFocus: prop_types93.default.func,
    onOpen: prop_types93.default.func,
    open: prop_types93.default.bool,
    readOnly: prop_types93.default.bool,
    renderValue: prop_types93.default.func,
    SelectDisplayProps: prop_types93.default.object,
    tabIndex: prop_types93.default.oneOfType([prop_types93.default.number, prop_types93.default.string]),
    type: prop_types93.default.any,
    value: prop_types93.default.any,
    variant: prop_types93.default.oneOf(["standard", "outlined", "filled"])
  };
  const SelectInput_default = SelectInput2;

  // node_modules/@material-ui/core/esm/Select/Select.js
  const React98 = __toModule(require_react());
  const prop_types92 = __toModule(require_prop_types());
  var styles84 = styles75;
  var _ref = React98.createElement(Input_default, null);
  var _ref2 = React98.createElement(FilledInput_default, null);
  var Select = React98.forwardRef(function Select5(props, ref) {
    var _props$autoWidth = props.autoWidth, autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth, children = props.children, classes = props.classes, _props$displayEmpty = props.displayEmpty, displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDropDown_default : _props$IconComponent, id = props.id, input = props.input, inputProps = props.inputProps, label = props.label, labelId = props.labelId, _props$labelWidth = props.labelWidth, labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth, MenuProps = props.MenuProps, _props$multiple = props.multiple, multiple = _props$multiple === void 0 ? false : _props$multiple, _props$native = props.native, native = _props$native === void 0 ? false : _props$native, onClose = props.onClose, onOpen = props.onOpen, open = props.open, renderValue = props.renderValue, SelectDisplayProps = props.SelectDisplayProps, _props$variant = props.variant, variantProps = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "labelWidth", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);
    var inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    var muiFormControl = useFormControl3();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    var variant = fcs.variant || variantProps;
    var InputComponent = input || {
      standard: _ref,
      outlined: React98.createElement(OutlinedInput_default, {
        label,
        labelWidth
      }),
      filled: _ref2
    }[variant];
    return React98.cloneElement(InputComponent, _extends({
      inputComponent,
      inputProps: _extends({
        children,
        IconComponent,
        variant,
        type: void 0,
        multiple
      }, native ? {
        id
      } : {
        autoWidth,
        displayEmpty,
        labelId,
        MenuProps,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps: _extends({
          id
        }, SelectDisplayProps)
      }, inputProps, {
        classes: inputProps ? mergeClasses({
          baseClasses: classes,
          newClasses: inputProps.classes,
          Component: Select5
        }) : classes
      }, input ? input.props.inputProps : {}),
      ref
    }, other));
  });
  Select.propTypes = {
    autoWidth: prop_types92.default.bool,
    children: prop_types92.default.node,
    classes: prop_types92.default.object,
    defaultValue: prop_types92.default.any,
    displayEmpty: prop_types92.default.bool,
    IconComponent: prop_types92.default.elementType,
    id: prop_types92.default.string,
    input: prop_types92.default.element,
    inputProps: prop_types92.default.object,
    label: prop_types92.default.node,
    labelId: prop_types92.default.string,
    labelWidth: prop_types92.default.number,
    MenuProps: prop_types92.default.object,
    multiple: prop_types92.default.bool,
    native: prop_types92.default.bool,
    onChange: prop_types92.default.func,
    onClose: prop_types92.default.func,
    onOpen: prop_types92.default.func,
    open: prop_types92.default.bool,
    renderValue: prop_types92.default.func,
    SelectDisplayProps: prop_types92.default.object,
    value: prop_types92.default.any,
    variant: prop_types92.default.oneOf(["filled", "outlined", "standard"])
  };
  Select.muiName = "Select";
  const Select_default = withStyles_default(styles84, {
    name: "MuiSelect"
  })(Select);

  // node_modules/@material-ui/core/esm/Slider/ValueLabel.js
  const React102 = __toModule(require_react());
  var styles86 = function styles131(theme) {
    return {
      thumb: {
        "&$open": {
          "& $offset": {
            transform: "scale(1) translateY(-10px)"
          }
        }
      },
      open: {},
      offset: _extends({
        zIndex: 1
      }, theme.typography.body2, {
        fontSize: theme.typography.pxToRem(12),
        lineHeight: 1.2,
        transition: theme.transitions.create(["transform"], {
          duration: theme.transitions.duration.shortest
        }),
        top: -34,
        transformOrigin: "bottom center",
        transform: "scale(0)",
        position: "absolute"
      }),
      circle: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        width: 32,
        height: 32,
        borderRadius: "50% 50% 50% 0",
        backgroundColor: "currentColor",
        transform: "rotate(-45deg)"
      },
      label: {
        color: theme.palette.primary.contrastText,
        transform: "rotate(45deg)"
      }
    };
  };
  function ValueLabel2(props) {
    var children = props.children, classes = props.classes, className = props.className, open = props.open, value = props.value, valueLabelDisplay = props.valueLabelDisplay;
    if (valueLabelDisplay === "off") {
      return children;
    }
    return React102.cloneElement(children, {
      className: clsx_m_default(children.props.className, (open || valueLabelDisplay === "on") && classes.open, classes.thumb)
    }, React102.createElement("span", {
      className: clsx_m_default(classes.offset, className)
    }, React102.createElement("span", {
      className: classes.circle
    }, React102.createElement("span", {
      className: classes.label
    }, value))));
  }
  const ValueLabel_default = withStyles_default(styles86, {
    name: "PrivateValueLabel"
  })(ValueLabel2);

  // node_modules/@material-ui/core/esm/Slider/Slider.js
  const React101 = __toModule(require_react());
  const prop_types95 = __toModule(require_prop_types());
  function asc(a, b) {
    return a - b;
  }
  function clamp(value, min, max) {
    return Math.min(Math.max(min, value), max);
  }
  function findClosest(values3, currentValue) {
    var _values$reduce = values3.reduce(function(acc, value, index3) {
      var distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index: index3
        };
      }
      return acc;
    }, null), closestIndex = _values$reduce.index;
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      for (var i = 0; i < event.changedTouches.length; i += 1) {
        var touch = event.changedTouches[i];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
  }
  function percentToValue(percent2, min, max) {
    return (max - min) * percent2 + min;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      var parts = num.toExponential().split("e-");
      var matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    var decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min) {
    var nearest = Math.round((value - min) / step) * step + min;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex(_ref6) {
    var values3 = _ref6.values, source = _ref6.source, newValue = _ref6.newValue, index3 = _ref6.index;
    if (values3[index3] === newValue) {
      return source;
    }
    var output = values3.slice();
    output[index3] = newValue;
    return output;
  }
  function focusThumb(_ref24) {
    var sliderRef = _ref24.sliderRef, activeIndex = _ref24.activeIndex, setActive = _ref24.setActive;
    if (!sliderRef.current.contains(document.activeElement) || Number(document.activeElement.getAttribute("data-index")) !== activeIndex) {
      sliderRef.current.querySelector('[role="slider"][data-index="'.concat(activeIndex, '"]')).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  var axisProps = {
    horizontal: {
      offset: function offset2(percent2) {
        return {
          left: "".concat(percent2, "%")
        };
      },
      leap: function leap(percent2) {
        return {
          width: "".concat(percent2, "%")
        };
      }
    },
    "horizontal-reverse": {
      offset: function offset2(percent2) {
        return {
          right: "".concat(percent2, "%")
        };
      },
      leap: function leap(percent2) {
        return {
          width: "".concat(percent2, "%")
        };
      }
    },
    vertical: {
      offset: function offset2(percent2) {
        return {
          bottom: "".concat(percent2, "%")
        };
      },
      leap: function leap(percent2) {
        return {
          height: "".concat(percent2, "%")
        };
      }
    }
  };
  var Identity = function Identity2(x) {
    return x;
  };
  var styles85 = function styles131(theme) {
    return {
      root: {
        height: 2,
        width: "100%",
        boxSizing: "content-box",
        padding: "13px 0",
        display: "inline-block",
        position: "relative",
        cursor: "pointer",
        touchAction: "none",
        color: theme.palette.primary.main,
        WebkitTapHighlightColor: "transparent",
        "&$disabled": {
          pointerEvents: "none",
          cursor: "default",
          color: theme.palette.grey[400]
        },
        "&$vertical": {
          width: 2,
          height: "100%",
          padding: "0 13px"
        },
        "@media (pointer: coarse)": {
          padding: "20px 0",
          "&$vertical": {
            padding: "0 20px"
          }
        },
        "@media print": {
          colorAdjust: "exact"
        }
      },
      colorPrimary: {},
      colorSecondary: {
        color: theme.palette.secondary.main
      },
      marked: {
        marginBottom: 20,
        "&$vertical": {
          marginBottom: "auto",
          marginRight: 20
        }
      },
      vertical: {},
      disabled: {},
      rail: {
        display: "block",
        position: "absolute",
        width: "100%",
        height: 2,
        borderRadius: 1,
        backgroundColor: "currentColor",
        opacity: 0.38,
        "$vertical &": {
          height: "100%",
          width: 2
        }
      },
      track: {
        display: "block",
        position: "absolute",
        height: 2,
        borderRadius: 1,
        backgroundColor: "currentColor",
        "$vertical &": {
          width: 2
        }
      },
      trackFalse: {
        "& $track": {
          display: "none"
        }
      },
      trackInverted: {
        "& $track": {
          backgroundColor: theme.palette.type === "light" ? lighten(theme.palette.primary.main, 0.62) : darken(theme.palette.primary.main, 0.5)
        },
        "& $rail": {
          opacity: 1
        }
      },
      thumb: {
        position: "absolute",
        width: 12,
        height: 12,
        marginLeft: -6,
        marginTop: -5,
        boxSizing: "border-box",
        borderRadius: "50%",
        outline: 0,
        backgroundColor: "currentColor",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        transition: theme.transitions.create(["box-shadow"], {
          duration: theme.transitions.duration.shortest
        }),
        "&::after": {
          position: "absolute",
          content: '""',
          borderRadius: "50%",
          left: -15,
          top: -15,
          right: -15,
          bottom: -15
        },
        "&$focusVisible,&:hover": {
          boxShadow: "0px 0px 0px 8px ".concat(fade(theme.palette.primary.main, 0.16)),
          "@media (hover: none)": {
            boxShadow: "none"
          }
        },
        "&$active": {
          boxShadow: "0px 0px 0px 14px ".concat(fade(theme.palette.primary.main, 0.16))
        },
        "&$disabled": {
          width: 8,
          height: 8,
          marginLeft: -4,
          marginTop: -3,
          "&:hover": {
            boxShadow: "none"
          }
        },
        "$vertical &": {
          marginLeft: -5,
          marginBottom: -6
        },
        "$vertical &$disabled": {
          marginLeft: -3,
          marginBottom: -4
        }
      },
      thumbColorPrimary: {},
      thumbColorSecondary: {
        "&$focusVisible,&:hover": {
          boxShadow: "0px 0px 0px 8px ".concat(fade(theme.palette.secondary.main, 0.16))
        },
        "&$active": {
          boxShadow: "0px 0px 0px 14px ".concat(fade(theme.palette.secondary.main, 0.16))
        }
      },
      active: {},
      focusVisible: {},
      valueLabel: {
        left: "calc(-50% - 4px)"
      },
      mark: {
        position: "absolute",
        width: 2,
        height: 2,
        borderRadius: 1,
        backgroundColor: "currentColor"
      },
      markActive: {
        backgroundColor: theme.palette.background.paper,
        opacity: 0.8
      },
      markLabel: _extends({}, theme.typography.body2, {
        color: theme.palette.text.secondary,
        position: "absolute",
        top: 26,
        transform: "translateX(-50%)",
        whiteSpace: "nowrap",
        "$vertical &": {
          top: "auto",
          left: 26,
          transform: "translateY(50%)"
        },
        "@media (pointer: coarse)": {
          top: 40,
          "$vertical &": {
            left: 31
          }
        }
      }),
      markLabelActive: {
        color: theme.palette.text.primary
      }
    };
  };
  var Slider = React101.forwardRef(function Slider3(props, ref) {
    var ariaLabel = props["aria-label"], ariaLabelledby = props["aria-labelledby"], ariaValuetext = props["aria-valuetext"], classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, Component7 = _props$component === void 0 ? "span" : _props$component, defaultValue = props.defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, getAriaLabel = props.getAriaLabel, getAriaValueText = props.getAriaValueText, _props$marks = props.marks, marksProp = _props$marks === void 0 ? false : _props$marks, _props$max = props.max, max = _props$max === void 0 ? 100 : _props$max, _props$min = props.min, min = _props$min === void 0 ? 0 : _props$min, name = props.name, onChange = props.onChange, onChangeCommitted = props.onChangeCommitted, onMouseDown = props.onMouseDown, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$scale = props.scale, scale = _props$scale === void 0 ? Identity : _props$scale, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, _props$ThumbComponent = props.ThumbComponent, ThumbComponent = _props$ThumbComponent === void 0 ? "span" : _props$ThumbComponent, _props$track = props.track, track = _props$track === void 0 ? "normal" : _props$track, valueProp = props.value, _props$ValueLabelComp = props.ValueLabelComponent, ValueLabelComponent = _props$ValueLabelComp === void 0 ? ValueLabel_default : _props$ValueLabelComp, _props$valueLabelDisp = props.valueLabelDisplay, valueLabelDisplay = _props$valueLabelDisp === void 0 ? "off" : _props$valueLabelDisp, _props$valueLabelForm = props.valueLabelFormat, valueLabelFormat = _props$valueLabelForm === void 0 ? Identity : _props$valueLabelForm, other = _objectWithoutProperties(props, ["aria-label", "aria-labelledby", "aria-valuetext", "classes", "className", "color", "component", "defaultValue", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "ThumbComponent", "track", "value", "ValueLabelComponent", "valueLabelDisplay", "valueLabelFormat"]);
    var theme = useTheme2();
    var touchId = React101.useRef();
    var _React$useState = React101.useState(-1), active = _React$useState[0], setActive = _React$useState[1];
    var _React$useState2 = React101.useState(-1), open = _React$useState2[0], setOpen = _React$useState2[1];
    var _useControlled = useControlled2({
      controlled: valueProp,
      default: defaultValue,
      name: "Slider"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), valueDerived = _useControlled2[0], setValueState = _useControlled2[1];
    var range = Array.isArray(valueDerived);
    var values3 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values3 = values3.map(function(value) {
      return clamp(value, min, max);
    });
    var marks = marksProp === true && step !== null ? _toConsumableArray(Array(Math.floor((max - min) / step) + 1)).map(function(_, index3) {
      return {
        value: min + step * index3
      };
    }) : marksProp || [];
    var _useIsFocusVisible = useIsFocusVisible2(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    var _React$useState3 = React101.useState(-1), focusVisible = _React$useState3[0], setFocusVisible = _React$useState3[1];
    var sliderRef = React101.useRef();
    var handleFocusRef = useForkRef2(focusVisibleRef, sliderRef);
    var handleRef = useForkRef2(ref, handleFocusRef);
    var handleFocus = useEventCallback2(function(event) {
      var index3 = Number(event.currentTarget.getAttribute("data-index"));
      if (isFocusVisible2(event)) {
        setFocusVisible(index3);
      }
      setOpen(index3);
    });
    var handleBlur = useEventCallback2(function() {
      if (focusVisible !== -1) {
        setFocusVisible(-1);
        onBlurVisible();
      }
      setOpen(-1);
    });
    var handleMouseOver = useEventCallback2(function(event) {
      var index3 = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index3);
    });
    var handleMouseLeave = useEventCallback2(function() {
      setOpen(-1);
    });
    var isRtl = theme.direction === "rtl";
    var handleKeyDown2 = useEventCallback2(function(event) {
      var index3 = Number(event.currentTarget.getAttribute("data-index"));
      var value = values3[index3];
      var tenPercents = (max - min) / 10;
      var marksValues = marks.map(function(mark) {
        return mark.value;
      });
      var marksIndex = marksValues.indexOf(value);
      var newValue;
      var increaseKey = isRtl ? "ArrowLeft" : "ArrowRight";
      var decreaseKey = isRtl ? "ArrowRight" : "ArrowLeft";
      switch (event.key) {
        case "Home":
          newValue = min;
          break;
        case "End":
          newValue = max;
          break;
        case "PageUp":
          if (step) {
            newValue = value + tenPercents;
          }
          break;
        case "PageDown":
          if (step) {
            newValue = value - tenPercents;
          }
          break;
        case increaseKey:
        case "ArrowUp":
          if (step) {
            newValue = value + step;
          } else {
            newValue = marksValues[marksIndex + 1] || marksValues[marksValues.length - 1];
          }
          break;
        case decreaseKey:
        case "ArrowDown":
          if (step) {
            newValue = value - step;
          } else {
            newValue = marksValues[marksIndex - 1] || marksValues[0];
          }
          break;
        default:
          return;
      }
      event.preventDefault();
      if (step) {
        newValue = roundValueToStep(newValue, step, min);
      }
      newValue = clamp(newValue, min, max);
      if (range) {
        var previousValue = newValue;
        newValue = setValueIndex({
          values: values3,
          source: valueDerived,
          newValue,
          index: index3
        }).sort(asc);
        focusThumb({
          sliderRef,
          activeIndex: newValue.indexOf(previousValue)
        });
      }
      setValueState(newValue);
      setFocusVisible(index3);
      if (onChange) {
        onChange(event, newValue);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    });
    var previousIndex = React101.useRef();
    var axis = orientation;
    if (isRtl && orientation !== "vertical") {
      axis += "-reverse";
    }
    var getFingerNewValue = function getFingerNewValue2(_ref33) {
      var finger = _ref33.finger, _ref3$move = _ref33.move, move = _ref3$move === void 0 ? false : _ref3$move, values22 = _ref33.values, source = _ref33.source;
      var slider = sliderRef.current;
      var _slider$getBoundingCl = slider.getBoundingClientRect(), width2 = _slider$getBoundingCl.width, height2 = _slider$getBoundingCl.height, bottom2 = _slider$getBoundingCl.bottom, left2 = _slider$getBoundingCl.left;
      var percent2;
      if (axis.indexOf("vertical") === 0) {
        percent2 = (bottom2 - finger.y) / height2;
      } else {
        percent2 = (finger.x - left2) / width2;
      }
      if (axis.indexOf("-reverse") !== -1) {
        percent2 = 1 - percent2;
      }
      var newValue;
      newValue = percentToValue(percent2, min, max);
      if (step) {
        newValue = roundValueToStep(newValue, step, min);
      } else {
        var marksValues = marks.map(function(mark) {
          return mark.value;
        });
        var closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = clamp(newValue, min, max);
      var activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values22, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        var previousValue = newValue;
        newValue = setValueIndex({
          values: values22,
          source,
          newValue,
          index: activeIndex
        }).sort(asc);
        activeIndex = newValue.indexOf(previousValue);
        previousIndex.current = activeIndex;
      }
      return {
        newValue,
        activeIndex
      };
    };
    var handleTouchMove = useEventCallback2(function(event) {
      var finger = trackFinger(event, touchId);
      if (!finger) {
        return;
      }
      var _getFingerNewValue = getFingerNewValue({
        finger,
        move: true,
        values: values3,
        source: valueDerived
      }), newValue = _getFingerNewValue.newValue, activeIndex = _getFingerNewValue.activeIndex;
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (onChange) {
        onChange(event, newValue);
      }
    });
    var handleTouchEnd = useEventCallback2(function(event) {
      var finger = trackFinger(event, touchId);
      if (!finger) {
        return;
      }
      var _getFingerNewValue2 = getFingerNewValue({
        finger,
        values: values3,
        source: valueDerived
      }), newValue = _getFingerNewValue2.newValue;
      setActive(-1);
      if (event.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
      touchId.current = void 0;
      var doc = ownerDocument2(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    });
    var handleTouchStart = useEventCallback2(function(event) {
      event.preventDefault();
      var touch = event.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      var finger = trackFinger(event, touchId);
      var _getFingerNewValue3 = getFingerNewValue({
        finger,
        values: values3,
        source: valueDerived
      }), newValue = _getFingerNewValue3.newValue, activeIndex = _getFingerNewValue3.activeIndex;
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (onChange) {
        onChange(event, newValue);
      }
      var doc = ownerDocument2(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove);
      doc.addEventListener("touchend", handleTouchEnd);
    });
    React101.useEffect(function() {
      var slider = sliderRef.current;
      slider.addEventListener("touchstart", handleTouchStart);
      var doc = ownerDocument2(slider);
      return function() {
        slider.removeEventListener("touchstart", handleTouchStart);
        doc.removeEventListener("mousemove", handleTouchMove);
        doc.removeEventListener("mouseup", handleTouchEnd);
        doc.removeEventListener("touchmove", handleTouchMove);
        doc.removeEventListener("touchend", handleTouchEnd);
      };
    }, [handleTouchEnd, handleTouchMove, handleTouchStart]);
    var handleMouseDown = useEventCallback2(function(event) {
      if (onMouseDown) {
        onMouseDown(event);
      }
      event.preventDefault();
      var finger = trackFinger(event, touchId);
      var _getFingerNewValue4 = getFingerNewValue({
        finger,
        values: values3,
        source: valueDerived
      }), newValue = _getFingerNewValue4.newValue, activeIndex = _getFingerNewValue4.activeIndex;
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (onChange) {
        onChange(event, newValue);
      }
      var doc = ownerDocument2(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove);
      doc.addEventListener("mouseup", handleTouchEnd);
    });
    var trackOffset = valueToPercent(range ? values3[0] : min, min, max);
    var trackLeap = valueToPercent(values3[values3.length - 1], min, max) - trackOffset;
    var trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
    return React101.createElement(Component7, _extends({
      ref: handleRef,
      className: clsx_m_default(classes.root, classes["color".concat(capitalize2(color2))], className, disabled && classes.disabled, marks.length > 0 && marks.some(function(mark) {
        return mark.label;
      }) && classes.marked, track === false && classes.trackFalse, orientation === "vertical" && classes.vertical, track === "inverted" && classes.trackInverted),
      onMouseDown: handleMouseDown
    }, other), React101.createElement("span", {
      className: classes.rail
    }), React101.createElement("span", {
      className: classes.track,
      style: trackStyle
    }), React101.createElement("input", {
      value: values3.join(","),
      name,
      type: "hidden"
    }), marks.map(function(mark, index3) {
      var percent2 = valueToPercent(mark.value, min, max);
      var style13 = axisProps[axis].offset(percent2);
      var markActive;
      if (track === false) {
        markActive = values3.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values3[0] && mark.value <= values3[values3.length - 1] : mark.value <= values3[0]) || track === "inverted" && (range ? mark.value <= values3[0] || mark.value >= values3[values3.length - 1] : mark.value >= values3[0]);
      }
      return React101.createElement(React101.Fragment, {
        key: mark.value
      }, React101.createElement("span", {
        style: style13,
        "data-index": index3,
        className: clsx_m_default(classes.mark, markActive && classes.markActive)
      }), mark.label != null ? React101.createElement("span", {
        "aria-hidden": true,
        "data-index": index3,
        style: style13,
        className: clsx_m_default(classes.markLabel, markActive && classes.markLabelActive)
      }, mark.label) : null);
    }), values3.map(function(value, index3) {
      var percent2 = valueToPercent(value, min, max);
      var style13 = axisProps[axis].offset(percent2);
      return React101.createElement(ValueLabelComponent, {
        key: index3,
        valueLabelFormat,
        valueLabelDisplay,
        className: classes.valueLabel,
        value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index3) : valueLabelFormat,
        index: index3,
        open: open === index3 || active === index3 || valueLabelDisplay === "on",
        disabled
      }, React101.createElement(ThumbComponent, {
        className: clsx_m_default(classes.thumb, classes["thumbColor".concat(capitalize2(color2))], active === index3 && classes.active, disabled && classes.disabled, focusVisible === index3 && classes.focusVisible),
        tabIndex: disabled ? null : 0,
        role: "slider",
        style: style13,
        "data-index": index3,
        "aria-label": getAriaLabel ? getAriaLabel(index3) : ariaLabel,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max),
        "aria-valuemin": scale(min),
        "aria-valuenow": scale(value),
        "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index3) : ariaValuetext,
        onKeyDown: handleKeyDown2,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onMouseOver: handleMouseOver,
        onMouseLeave: handleMouseLeave
      }));
    }));
  });
  Slider.propTypes = {
    "aria-label": chainPropTypes(prop_types95.default.string, function(props) {
      var range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("Material-UI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    "aria-labelledby": prop_types95.default.string,
    "aria-valuetext": chainPropTypes(prop_types95.default.string, function(props) {
      var range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("Material-UI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    classes: prop_types95.default.object.isRequired,
    className: prop_types95.default.string,
    color: prop_types95.default.oneOf(["primary", "secondary"]),
    component: prop_types95.default.elementType,
    defaultValue: prop_types95.default.oneOfType([prop_types95.default.number, prop_types95.default.arrayOf(prop_types95.default.number)]),
    disabled: prop_types95.default.bool,
    getAriaLabel: prop_types95.default.func,
    getAriaValueText: prop_types95.default.func,
    marks: prop_types95.default.oneOfType([prop_types95.default.bool, prop_types95.default.array]),
    max: prop_types95.default.number,
    min: prop_types95.default.number,
    name: prop_types95.default.string,
    onChange: prop_types95.default.func,
    onChangeCommitted: prop_types95.default.func,
    onMouseDown: prop_types95.default.func,
    orientation: prop_types95.default.oneOf(["horizontal", "vertical"]),
    scale: prop_types95.default.func,
    step: prop_types95.default.number,
    ThumbComponent: prop_types95.default.elementType,
    track: prop_types95.default.oneOf(["normal", false, "inverted"]),
    value: prop_types95.default.oneOfType([prop_types95.default.number, prop_types95.default.arrayOf(prop_types95.default.number)]),
    ValueLabelComponent: prop_types95.default.elementType,
    valueLabelDisplay: prop_types95.default.oneOf(["on", "auto", "off"]),
    valueLabelFormat: prop_types95.default.oneOfType([prop_types95.default.string, prop_types95.default.func])
  };
  const Slider_default = withStyles_default(styles85, {
    name: "MuiSlider"
  })(Slider);

  // node_modules/@material-ui/core/esm/SnackbarContent/SnackbarContent.js
  const React104 = __toModule(require_react());
  const prop_types97 = __toModule(require_prop_types());
  var styles88 = function styles131(theme) {
    var emphasis = theme.palette.type === "light" ? 0.8 : 0.98;
    var backgroundColor = emphasize(theme.palette.background.default, emphasis);
    return {
      root: _extends({}, theme.typography.body2, _defineProperty({
        color: theme.palette.getContrastText(backgroundColor),
        backgroundColor,
        display: "flex",
        alignItems: "center",
        flexWrap: "wrap",
        padding: "6px 16px",
        borderRadius: theme.shape.borderRadius,
        flexGrow: 1
      }, theme.breakpoints.up("sm"), {
        flexGrow: "initial",
        minWidth: 288
      })),
      message: {
        padding: "8px 0"
      },
      action: {
        display: "flex",
        alignItems: "center",
        marginLeft: "auto",
        paddingLeft: 16,
        marginRight: -8
      }
    };
  };
  var SnackbarContent2 = React104.forwardRef(function SnackbarContent4(props, ref) {
    var action = props.action, classes = props.classes, className = props.className, message = props.message, _props$role = props.role, role = _props$role === void 0 ? "alert" : _props$role, other = _objectWithoutProperties(props, ["action", "classes", "className", "message", "role"]);
    return React104.createElement(Paper_default, _extends({
      role,
      square: true,
      elevation: 6,
      className: clsx_m_default(classes.root, className),
      ref
    }, other), React104.createElement("div", {
      className: classes.message
    }, message), action ? React104.createElement("div", {
      className: classes.action
    }, action) : null);
  });
  SnackbarContent2.propTypes = {
    action: prop_types97.default.node,
    classes: prop_types97.default.object,
    className: prop_types97.default.string,
    message: prop_types97.default.node,
    role: prop_types97.default.string
  };
  const SnackbarContent_default = withStyles_default(styles88, {
    name: "MuiSnackbarContent"
  })(SnackbarContent2);

  // node_modules/@material-ui/core/esm/Snackbar/Snackbar.js
  const React103 = __toModule(require_react());
  const prop_types96 = __toModule(require_prop_types());
  var styles87 = function styles131(theme) {
    var top1 = {
      top: 8
    };
    var bottom1 = {
      bottom: 8
    };
    var right2 = {
      justifyContent: "flex-end"
    };
    var left2 = {
      justifyContent: "flex-start"
    };
    var top3 = {
      top: 24
    };
    var bottom3 = {
      bottom: 24
    };
    var right3 = {
      right: 24
    };
    var left3 = {
      left: 24
    };
    var center = {
      left: "50%",
      right: "auto",
      transform: "translateX(-50%)"
    };
    return {
      root: {
        zIndex: theme.zIndex.snackbar,
        position: "fixed",
        display: "flex",
        left: 8,
        right: 8,
        justifyContent: "center",
        alignItems: "center"
      },
      anchorOriginTopCenter: _extends({}, top1, _defineProperty({}, theme.breakpoints.up("sm"), _extends({}, top3, center))),
      anchorOriginBottomCenter: _extends({}, bottom1, _defineProperty({}, theme.breakpoints.up("sm"), _extends({}, bottom3, center))),
      anchorOriginTopRight: _extends({}, top1, right2, _defineProperty({}, theme.breakpoints.up("sm"), _extends({
        left: "auto"
      }, top3, right3))),
      anchorOriginBottomRight: _extends({}, bottom1, right2, _defineProperty({}, theme.breakpoints.up("sm"), _extends({
        left: "auto"
      }, bottom3, right3))),
      anchorOriginTopLeft: _extends({}, top1, left2, _defineProperty({}, theme.breakpoints.up("sm"), _extends({
        right: "auto"
      }, top3, left3))),
      anchorOriginBottomLeft: _extends({}, bottom1, left2, _defineProperty({}, theme.breakpoints.up("sm"), _extends({
        right: "auto"
      }, bottom3, left3)))
    };
  };
  var Snackbar = React103.forwardRef(function Snackbar3(props, ref) {
    var action = props.action, _props$anchorOrigin = props.anchorOrigin;
    _props$anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: "bottom",
      horizontal: "center"
    } : _props$anchorOrigin;
    var vertical = _props$anchorOrigin.vertical, horizontal = _props$anchorOrigin.horizontal, _props$autoHideDurati = props.autoHideDuration, autoHideDuration = _props$autoHideDurati === void 0 ? null : _props$autoHideDurati, children = props.children, classes = props.classes, className = props.className, ClickAwayListenerProps = props.ClickAwayListenerProps, ContentProps = props.ContentProps, _props$disableWindowB = props.disableWindowBlurListener, disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB, message = props.message, onClose = props.onClose, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, open = props.open, resumeHideDuration = props.resumeHideDuration, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Grow_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    } : _props$transitionDura, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["action", "anchorOrigin", "autoHideDuration", "children", "classes", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"]);
    var timerAutoHide = React103.useRef();
    var _React$useState = React103.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
    var handleClose = useEventCallback2(function() {
      if (onClose) {
        onClose.apply(void 0, arguments);
      }
    });
    var setAutoHideTimer = useEventCallback2(function(autoHideDurationParam) {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }
      clearTimeout(timerAutoHide.current);
      timerAutoHide.current = setTimeout(function() {
        handleClose(null, "timeout");
      }, autoHideDurationParam);
    });
    React103.useEffect(function() {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return function() {
        clearTimeout(timerAutoHide.current);
      };
    }, [open, autoHideDuration, setAutoHideTimer]);
    var handlePause = function handlePause2() {
      clearTimeout(timerAutoHide.current);
    };
    var handleResume = React103.useCallback(function() {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
    var handleMouseEnter = function handleMouseEnter2(event) {
      if (onMouseEnter) {
        onMouseEnter(event);
      }
      handlePause();
    };
    var handleMouseLeave = function handleMouseLeave2(event) {
      if (onMouseLeave) {
        onMouseLeave(event);
      }
      handleResume();
    };
    var handleClickAway = function handleClickAway2(event) {
      if (onClose) {
        onClose(event, "clickaway");
      }
    };
    var handleExited = function handleExited2() {
      setExited(true);
    };
    var handleEnter = function handleEnter2() {
      setExited(false);
    };
    React103.useEffect(function() {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return function() {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, handleResume, open]);
    if (!open && exited) {
      return null;
    }
    return React103.createElement(ClickAwayListener_default, _extends({
      onClickAway: handleClickAway
    }, ClickAwayListenerProps), React103.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes["anchorOrigin".concat(capitalize2(vertical)).concat(capitalize2(horizontal))], className),
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      ref
    }, other), React103.createElement(TransitionComponent, _extends({
      appear: true,
      in: open,
      onEnter: createChainedFunction2(handleEnter, onEnter),
      onEntered,
      onEntering,
      onExit,
      onExited: createChainedFunction2(handleExited, onExited),
      onExiting,
      timeout: transitionDuration,
      direction: vertical === "top" ? "down" : "up"
    }, TransitionProps), children || React103.createElement(SnackbarContent_default, _extends({
      message,
      action
    }, ContentProps)))));
  });
  Snackbar.propTypes = {
    action: prop_types96.default.node,
    anchorOrigin: prop_types96.default.shape({
      horizontal: prop_types96.default.oneOf(["center", "left", "right"]).isRequired,
      vertical: prop_types96.default.oneOf(["bottom", "top"]).isRequired
    }),
    autoHideDuration: prop_types96.default.number,
    children: prop_types96.default.element,
    classes: prop_types96.default.object,
    className: prop_types96.default.string,
    ClickAwayListenerProps: prop_types96.default.object,
    ContentProps: prop_types96.default.object,
    disableWindowBlurListener: prop_types96.default.bool,
    key: prop_types96.default.any,
    message: prop_types96.default.node,
    onClose: prop_types96.default.func,
    onEnter: prop_types96.default.func,
    onEntered: prop_types96.default.func,
    onEntering: prop_types96.default.func,
    onExit: prop_types96.default.func,
    onExited: prop_types96.default.func,
    onExiting: prop_types96.default.func,
    onMouseEnter: prop_types96.default.func,
    onMouseLeave: prop_types96.default.func,
    open: prop_types96.default.bool,
    resumeHideDuration: prop_types96.default.number,
    TransitionComponent: prop_types96.default.elementType,
    transitionDuration: prop_types96.default.oneOfType([prop_types96.default.number, prop_types96.default.shape({
      appear: prop_types96.default.number,
      enter: prop_types96.default.number,
      exit: prop_types96.default.number
    })]),
    TransitionProps: prop_types96.default.object
  };
  const Snackbar_default = withStyles_default(styles87, {
    flip: false,
    name: "MuiSnackbar"
  })(Snackbar);

  // node_modules/@material-ui/core/esm/Step/Step.js
  const React105 = __toModule(require_react());
  const react_is10 = __toModule(require_react_is());
  const prop_types98 = __toModule(require_prop_types());
  var styles89 = {
    root: {},
    horizontal: {
      paddingLeft: 8,
      paddingRight: 8
    },
    vertical: {},
    alternativeLabel: {
      flex: 1,
      position: "relative"
    },
    completed: {}
  };
  var Step = React105.forwardRef(function Step3(props, ref) {
    var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, connectorProp = props.connector, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$expanded = props.expanded, expanded = _props$expanded === void 0 ? false : _props$expanded, index3 = props.index, last = props.last, orientation = props.orientation, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "expanded", "index", "last", "orientation"]);
    var connector = connectorProp ? React105.cloneElement(connectorProp, {
      orientation,
      alternativeLabel,
      index: index3,
      active,
      completed,
      disabled
    }) : null;
    var newChildren = React105.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, completed && classes.completed),
      ref
    }, other), connector && alternativeLabel && index3 !== 0 ? connector : null, React105.Children.map(children, function(child) {
      if (!React105.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is10.isFragment(child)) {
          console.error(["Material-UI: The Step component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return React105.cloneElement(child, _extends({
        active,
        alternativeLabel,
        completed,
        disabled,
        expanded,
        last,
        icon: index3 + 1,
        orientation
      }, child.props));
    }));
    if (connector && !alternativeLabel && index3 !== 0) {
      return React105.createElement(React105.Fragment, null, connector, newChildren);
    }
    return newChildren;
  });
  Step.propTypes = {
    active: prop_types98.default.bool,
    children: prop_types98.default.node,
    classes: prop_types98.default.object,
    className: prop_types98.default.string,
    completed: prop_types98.default.bool,
    disabled: prop_types98.default.bool,
    expanded: prop_types98.default.bool
  };
  const Step_default = withStyles_default(styles89, {
    name: "MuiStep"
  })(Step);

  // node_modules/@material-ui/core/esm/internal/svg-icons/CheckCircle.js
  const React146 = __toModule(require_react());
  const CheckCircle_default = createSvgIcon2(React146.createElement("path", {
    d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
  }), "CheckCircle");

  // node_modules/@material-ui/core/esm/internal/svg-icons/Warning.js
  const React154 = __toModule(require_react());
  const Warning_default = createSvgIcon2(React154.createElement("path", {
    d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
  }), "Warning");

  // node_modules/@material-ui/core/esm/StepIcon/StepIcon.js
  const React109 = __toModule(require_react());
  const prop_types102 = __toModule(require_prop_types());
  const SvgIcon = __toModule(require_SvgIcon());
  var styles93 = function styles131(theme) {
    return {
      root: {
        display: "block",
        color: theme.palette.text.disabled,
        "&$completed": {
          color: theme.palette.primary.main
        },
        "&$active": {
          color: theme.palette.primary.main
        },
        "&$error": {
          color: theme.palette.error.main
        }
      },
      text: {
        fill: theme.palette.primary.contrastText,
        fontSize: theme.typography.caption.fontSize,
        fontFamily: theme.typography.fontFamily
      },
      active: {},
      completed: {},
      error: {}
    };
  };
  var _ref3 = React109.createElement("circle", {
    cx: "12",
    cy: "12",
    r: "12"
  });
  var StepIcon = React109.forwardRef(function StepIcon4(props, ref) {
    var _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, icon = props.icon, _props$active = props.active, active = _props$active === void 0 ? false : _props$active, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, classes = props.classes;
    if (typeof icon === "number" || typeof icon === "string") {
      var className = clsx_m_default(classes.root, active && classes.active, error && classes.error, completed && classes.completed);
      if (error) {
        return React109.createElement(Warning_default, {
          className,
          ref
        });
      }
      if (completed) {
        return React109.createElement(CheckCircle_default, {
          className,
          ref
        });
      }
      return React109.createElement(SvgIcon.default, {
        className,
        ref
      }, _ref3, React109.createElement("text", {
        className: classes.text,
        x: "12",
        y: "16",
        textAnchor: "middle"
      }, icon));
    }
    return icon;
  });
  StepIcon.propTypes = {
    active: prop_types102.default.bool,
    classes: prop_types102.default.object,
    completed: prop_types102.default.bool,
    error: prop_types102.default.bool,
    icon: prop_types102.default.node
  };
  const StepIcon_default = withStyles_default(styles93, {
    name: "MuiStepIcon"
  })(StepIcon);

  // node_modules/@material-ui/core/esm/StepLabel/StepLabel.js
  const React110 = __toModule(require_react());
  const prop_types103 = __toModule(require_prop_types());
  var styles94 = function styles131(theme) {
    return {
      root: {
        display: "flex",
        alignItems: "center",
        "&$alternativeLabel": {
          flexDirection: "column"
        },
        "&$disabled": {
          cursor: "default"
        }
      },
      horizontal: {},
      vertical: {},
      label: {
        color: theme.palette.text.secondary,
        "&$active": {
          color: theme.palette.text.primary,
          fontWeight: 500
        },
        "&$completed": {
          color: theme.palette.text.primary,
          fontWeight: 500
        },
        "&$alternativeLabel": {
          textAlign: "center",
          marginTop: 16
        },
        "&$error": {
          color: theme.palette.error.main
        }
      },
      active: {},
      completed: {},
      error: {},
      disabled: {},
      iconContainer: {
        flexShrink: 0,
        display: "flex",
        paddingRight: 8,
        "&$alternativeLabel": {
          paddingRight: 0
        }
      },
      alternativeLabel: {},
      labelContainer: {
        width: "100%"
      }
    };
  };
  var StepLabel2 = React110.forwardRef(function StepLabel4(props, ref) {
    var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, children = props.children, classes = props.classes, className = props.className, _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, expanded = props.expanded, icon = props.icon, last = props.last, optional = props.optional, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, StepIconComponentProp = props.StepIconComponent, StepIconProps = props.StepIconProps, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "error", "expanded", "icon", "last", "optional", "orientation", "StepIconComponent", "StepIconProps"]);
    var StepIconComponent = StepIconComponentProp;
    if (icon && !StepIconComponent) {
      StepIconComponent = StepIcon_default;
    }
    return React110.createElement("span", _extends({
      className: clsx_m_default(classes.root, classes[orientation], className, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),
      ref
    }, other), icon || StepIconComponent ? React110.createElement("span", {
      className: clsx_m_default(classes.iconContainer, alternativeLabel && classes.alternativeLabel)
    }, React110.createElement(StepIconComponent, _extends({
      completed,
      active,
      error,
      icon
    }, StepIconProps))) : null, React110.createElement("span", {
      className: classes.labelContainer
    }, children ? React110.createElement(Typography_default, {
      variant: "body2",
      component: "span",
      display: "block",
      className: clsx_m_default(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error)
    }, children) : null, optional));
  });
  StepLabel2.propTypes = {
    children: prop_types103.default.node,
    classes: prop_types103.default.object,
    className: prop_types103.default.string,
    disabled: prop_types103.default.bool,
    error: prop_types103.default.bool,
    icon: prop_types103.default.node,
    optional: prop_types103.default.node,
    StepIconComponent: prop_types103.default.elementType,
    StepIconProps: prop_types103.default.object
  };
  StepLabel2.muiName = "StepLabel";
  const StepLabel_default = withStyles_default(styles94, {
    name: "MuiStepLabel"
  })(StepLabel2);

  // node_modules/@material-ui/core/esm/StepButton/StepButton.js
  const React106 = __toModule(require_react());
  const prop_types99 = __toModule(require_prop_types());
  var styles90 = {
    root: {
      width: "100%",
      padding: "24px 16px",
      margin: "-24px -16px",
      boxSizing: "content-box"
    },
    horizontal: {},
    vertical: {
      justifyContent: "flex-start",
      padding: "8px",
      margin: "-8px"
    },
    touchRipple: {
      color: "rgba(0, 0, 0, 0.3)"
    }
  };
  var StepButton = React106.forwardRef(function StepButton3(props, ref) {
    var active = props.active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, completed = props.completed, disabled = props.disabled, expanded = props.expanded, icon = props.icon, last = props.last, optional = props.optional, orientation = props.orientation, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "expanded", "icon", "last", "optional", "orientation"]);
    var childProps = {
      active,
      alternativeLabel,
      completed,
      disabled,
      icon,
      optional,
      orientation
    };
    var child = isMuiElement2(children, ["StepLabel"]) ? React106.cloneElement(children, childProps) : React106.createElement(StepLabel_default, childProps, children);
    return React106.createElement(ButtonBase_default, _extends({
      focusRipple: true,
      disabled,
      TouchRippleProps: {
        className: classes.touchRipple
      },
      className: clsx_m_default(classes.root, classes[orientation], className),
      ref
    }, other), child);
  });
  StepButton.propTypes = {
    active: prop_types99.default.bool,
    alternativeLabel: prop_types99.default.bool,
    children: prop_types99.default.node,
    classes: prop_types99.default.object.isRequired,
    className: prop_types99.default.string,
    completed: prop_types99.default.bool,
    disabled: prop_types99.default.bool,
    expanded: prop_types99.default.bool,
    icon: prop_types99.default.node,
    last: prop_types99.default.bool,
    optional: prop_types99.default.node,
    orientation: prop_types99.default.oneOf(["horizontal", "vertical"])
  };
  const StepButton_default = withStyles_default(styles90, {
    name: "MuiStepButton"
  })(StepButton);

  // node_modules/@material-ui/core/esm/StepConnector/StepConnector.js
  const React107 = __toModule(require_react());
  const prop_types100 = __toModule(require_prop_types());
  var styles91 = function styles131(theme) {
    return {
      root: {
        flex: "1 1 auto"
      },
      horizontal: {},
      vertical: {
        marginLeft: 12,
        padding: "0 0 8px"
      },
      alternativeLabel: {
        position: "absolute",
        top: 8 + 4,
        left: "calc(-50% + 20px)",
        right: "calc(50% + 20px)"
      },
      active: {},
      completed: {},
      disabled: {},
      line: {
        display: "block",
        borderColor: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600]
      },
      lineHorizontal: {
        borderTopStyle: "solid",
        borderTopWidth: 1
      },
      lineVertical: {
        borderLeftStyle: "solid",
        borderLeftWidth: 1,
        minHeight: 24
      }
    };
  };
  var StepConnector = React107.forwardRef(function StepConnector4(props, ref) {
    var active = props.active, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, classes = props.classes, className = props.className, completed = props.completed, disabled = props.disabled, index3 = props.index, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "classes", "className", "completed", "disabled", "index", "orientation"]);
    return React107.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),
      ref
    }, other), React107.createElement("span", {
      className: clsx_m_default(classes.line, {
        horizontal: classes.lineHorizontal,
        vertical: classes.lineVertical
      }[orientation])
    }));
  });
  StepConnector.propTypes = {
    classes: prop_types100.default.object,
    className: prop_types100.default.string
  };
  const StepConnector_default = withStyles_default(styles91, {
    name: "MuiStepConnector"
  })(StepConnector);

  // node_modules/@material-ui/core/esm/StepContent/StepContent.js
  const React108 = __toModule(require_react());
  const prop_types101 = __toModule(require_prop_types());
  var styles92 = function styles131(theme) {
    return {
      root: {
        marginTop: 8,
        marginLeft: 12,
        paddingLeft: 8 + 12,
        paddingRight: 8,
        borderLeft: "1px solid ".concat(theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600])
      },
      last: {
        borderLeft: "none"
      },
      transition: {}
    };
  };
  var StepContent = React108.forwardRef(function StepContent3(props, ref) {
    var active = props.active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, completed = props.completed, expanded = props.expanded, last = props.last, optional = props.optional, orientation = props.orientation, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Collapse_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDurationProp = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "expanded", "last", "optional", "orientation", "TransitionComponent", "transitionDuration", "TransitionProps"]);
    if (true) {
      if (orientation !== "vertical") {
        console.error("Material-UI: <StepContent /> is only designed for use with the vertical stepper.");
      }
    }
    var transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    return React108.createElement("div", _extends({
      className: clsx_m_default(classes.root, className, last && classes.last),
      ref
    }, other), React108.createElement(TransitionComponent, _extends({
      in: active || expanded,
      className: classes.transition,
      timeout: transitionDuration,
      unmountOnExit: true
    }, TransitionProps), children));
  });
  StepContent.propTypes = {
    children: prop_types101.default.node,
    classes: prop_types101.default.object,
    className: prop_types101.default.string,
    TransitionComponent: prop_types101.default.elementType,
    transitionDuration: prop_types101.default.oneOfType([prop_types101.default.oneOf(["auto"]), prop_types101.default.number, prop_types101.default.shape({
      appear: prop_types101.default.number,
      enter: prop_types101.default.number,
      exit: prop_types101.default.number
    })]),
    TransitionProps: prop_types101.default.object
  };
  const StepContent_default = withStyles_default(styles92, {
    name: "MuiStepContent"
  })(StepContent);

  // node_modules/@material-ui/core/esm/Stepper/Stepper.js
  const React111 = __toModule(require_react());
  const prop_types104 = __toModule(require_prop_types());
  var styles95 = {
    root: {
      display: "flex",
      padding: 24
    },
    horizontal: {
      flexDirection: "row",
      alignItems: "center"
    },
    vertical: {
      flexDirection: "column"
    },
    alternativeLabel: {
      alignItems: "flex-start"
    }
  };
  var defaultConnector = React111.createElement(StepConnector_default, null);
  var Stepper = React111.forwardRef(function Stepper3(props, ref) {
    var _props$activeStep = props.activeStep, activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, children = props.children, classes = props.classes, className = props.className, _props$connector = props.connector, connectorProp = _props$connector === void 0 ? defaultConnector : _props$connector, _props$nonLinear = props.nonLinear, nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, other = _objectWithoutProperties(props, ["activeStep", "alternativeLabel", "children", "classes", "className", "connector", "nonLinear", "orientation"]);
    var connector = React111.isValidElement(connectorProp) ? React111.cloneElement(connectorProp, {
      orientation
    }) : null;
    var childrenArray = React111.Children.toArray(children);
    var steps = childrenArray.map(function(step, index3) {
      var state = {
        index: index3,
        active: false,
        completed: false,
        disabled: false
      };
      if (activeStep === index3) {
        state.active = true;
      } else if (!nonLinear && activeStep > index3) {
        state.completed = true;
      } else if (!nonLinear && activeStep < index3) {
        state.disabled = true;
      }
      return React111.cloneElement(step, _extends({
        alternativeLabel,
        connector,
        last: index3 + 1 === childrenArray.length,
        orientation
      }, state, step.props));
    });
    return React111.createElement(Paper_default, _extends({
      square: true,
      elevation: 0,
      className: clsx_m_default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),
      ref
    }, other), steps);
  });
  Stepper.propTypes = {
    activeStep: prop_types104.default.number,
    alternativeLabel: prop_types104.default.bool,
    children: prop_types104.default.node,
    classes: prop_types104.default.object,
    className: prop_types104.default.string,
    connector: prop_types104.default.element,
    nonLinear: prop_types104.default.bool,
    orientation: prop_types104.default.oneOf(["horizontal", "vertical"])
  };
  const Stepper_default = withStyles_default(styles95, {
    name: "MuiStepper"
  })(Stepper);

  // node_modules/@material-ui/core/esm/SwipeableDrawer/SwipeArea.js
  const React113 = __toModule(require_react());
  const prop_types106 = __toModule(require_prop_types());
  var styles97 = function styles131(theme) {
    return {
      root: {
        position: "fixed",
        top: 0,
        left: 0,
        bottom: 0,
        zIndex: theme.zIndex.drawer - 1
      },
      anchorLeft: {
        right: "auto"
      },
      anchorRight: {
        left: "auto",
        right: 0
      },
      anchorTop: {
        bottom: "auto",
        right: 0
      },
      anchorBottom: {
        top: "auto",
        bottom: 0,
        right: 0
      }
    };
  };
  var SwipeArea = React113.forwardRef(function SwipeArea3(props, ref) {
    var anchor = props.anchor, classes = props.classes, className = props.className, width2 = props.width, other = _objectWithoutProperties(props, ["anchor", "classes", "className", "width"]);
    return React113.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes["anchor".concat(capitalize2(anchor))], className),
      ref,
      style: _defineProperty({}, isHorizontal(anchor) ? "width" : "height", width2)
    }, other));
  });
  SwipeArea.propTypes = {
    anchor: prop_types106.default.oneOf(["left", "top", "right", "bottom"]).isRequired,
    classes: prop_types106.default.object.isRequired,
    className: prop_types106.default.string,
    width: prop_types106.default.number.isRequired
  };
  const SwipeArea_default = withStyles_default(styles97, {
    name: "PrivateSwipeArea"
  })(SwipeArea);

  // node_modules/@material-ui/core/esm/SwipeableDrawer/SwipeableDrawer.js
  const React114 = __toModule(require_react());
  const prop_types107 = __toModule(require_prop_types());
  const ReactDOM11 = __toModule(require_react_dom());
  var UNCERTAINTY_THRESHOLD = 3;
  var nodeThatClaimedTheSwipe = null;
  function calculateCurrentX(anchor, touches) {
    return anchor === "right" ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;
  }
  function calculateCurrentY(anchor, touches) {
    return anchor === "bottom" ? window.innerHeight - touches[0].clientY : touches[0].clientY;
  }
  function getMaxTranslate(horizontalSwipe, paperInstance) {
    return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
  }
  function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
    return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
  }
  function getDomTreeShapes(element, rootNode) {
    var domTreeShapes = [];
    while (element && element !== rootNode) {
      var style13 = window.getComputedStyle(element);
      if (style13.getPropertyValue("position") === "absolute" || style13.getPropertyValue("overflow-x") === "hidden") {
        domTreeShapes = [];
      } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
        domTreeShapes.push(element);
      }
      element = element.parentElement;
    }
    return domTreeShapes;
  }
  function findNativeHandler(_ref6) {
    var domTreeShapes = _ref6.domTreeShapes, start = _ref6.start, current = _ref6.current, anchor = _ref6.anchor;
    var axisProperties = {
      scrollPosition: {
        x: "scrollLeft",
        y: "scrollTop"
      },
      scrollLength: {
        x: "scrollWidth",
        y: "scrollHeight"
      },
      clientLength: {
        x: "clientWidth",
        y: "clientHeight"
      }
    };
    return domTreeShapes.some(function(shape3) {
      var goingForward = current >= start;
      if (anchor === "top" || anchor === "left") {
        goingForward = !goingForward;
      }
      var axis = anchor === "left" || anchor === "right" ? "x" : "y";
      var scrollPosition = shape3[axisProperties.scrollPosition[axis]];
      var areNotAtStart = scrollPosition > 0;
      var areNotAtEnd = scrollPosition + shape3[axisProperties.clientLength[axis]] < shape3[axisProperties.scrollLength[axis]];
      if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
        return shape3;
      }
      return null;
    });
  }
  var iOS = typeof navigator !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent);
  var transitionDurationDefault = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var useEnhancedEffect8 = typeof window !== "undefined" ? React114.useLayoutEffect : React114.useEffect;
  var SwipeableDrawer = React114.forwardRef(function SwipeableDrawer3(inProps, ref) {
    var theme = useTheme2();
    var props = getThemeProps({
      name: "MuiSwipeableDrawer",
      props: _extends({}, inProps),
      theme
    });
    var _props$anchor = props.anchor, anchor = _props$anchor === void 0 ? "left" : _props$anchor, _props$disableBackdro = props.disableBackdropTransition, disableBackdropTransition = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableDiscove = props.disableDiscovery, disableDiscovery = _props$disableDiscove === void 0 ? false : _props$disableDiscove, _props$disableSwipeTo = props.disableSwipeToOpen, disableSwipeToOpen = _props$disableSwipeTo === void 0 ? iOS : _props$disableSwipeTo, hideBackdrop = props.hideBackdrop, _props$hysteresis = props.hysteresis, hysteresis = _props$hysteresis === void 0 ? 0.52 : _props$hysteresis, _props$minFlingVeloci = props.minFlingVelocity, minFlingVelocity = _props$minFlingVeloci === void 0 ? 450 : _props$minFlingVeloci, _props$ModalProps = props.ModalProps;
    _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
    var BackdropProps = _props$ModalProps.BackdropProps, ModalPropsProp = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]), onClose = props.onClose, onOpen = props.onOpen, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, SwipeAreaProps = props.SwipeAreaProps, _props$swipeAreaWidth = props.swipeAreaWidth, swipeAreaWidth = _props$swipeAreaWidth === void 0 ? 20 : _props$swipeAreaWidth, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? transitionDurationDefault : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? "temporary" : _props$variant, other = _objectWithoutProperties(props, ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"]);
    var _React$useState = React114.useState(false), maybeSwiping = _React$useState[0], setMaybeSwiping = _React$useState[1];
    var swipeInstance = React114.useRef({
      isSwiping: null
    });
    var swipeAreaRef = React114.useRef();
    var backdropRef = React114.useRef();
    var paperRef = React114.useRef();
    var touchDetected = React114.useRef(false);
    var calculatedDurationRef = React114.useRef();
    useEnhancedEffect8(function() {
      calculatedDurationRef.current = null;
    }, [open]);
    var setPosition = React114.useCallback(function(translate) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _options$mode = options.mode, mode = _options$mode === void 0 ? null : _options$mode, _options$changeTransi = options.changeTransition, changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;
      var anchorRtl = getAnchor(theme, anchor);
      var rtlTranslateMultiplier = ["right", "bottom"].indexOf(anchorRtl) !== -1 ? 1 : -1;
      var horizontalSwipe = isHorizontal(anchor);
      var transform3 = horizontalSwipe ? "translate(".concat(rtlTranslateMultiplier * translate, "px, 0)") : "translate(0, ".concat(rtlTranslateMultiplier * translate, "px)");
      var drawerStyle = paperRef.current.style;
      drawerStyle.webkitTransform = transform3;
      drawerStyle.transform = transform3;
      var transition2 = "";
      if (mode) {
        transition2 = theme.transitions.create("all", getTransitionProps({
          timeout: transitionDuration
        }, {
          mode
        }));
      }
      if (changeTransition) {
        drawerStyle.webkitTransition = transition2;
        drawerStyle.transition = transition2;
      }
      if (!disableBackdropTransition && !hideBackdrop) {
        var backdropStyle = backdropRef.current.style;
        backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);
        if (changeTransition) {
          backdropStyle.webkitTransition = transition2;
          backdropStyle.transition = transition2;
        }
      }
    }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
    var handleBodyTouchEnd = useEventCallback2(function(event) {
      if (!touchDetected.current) {
        return;
      }
      nodeThatClaimedTheSwipe = null;
      touchDetected.current = false;
      setMaybeSwiping(false);
      if (!swipeInstance.current.isSwiping) {
        swipeInstance.current.isSwiping = null;
        return;
      }
      swipeInstance.current.isSwiping = null;
      var anchorRtl = getAnchor(theme, anchor);
      var horizontal = isHorizontal(anchor);
      var current;
      if (horizontal) {
        current = calculateCurrentX(anchorRtl, event.changedTouches);
      } else {
        current = calculateCurrentY(anchorRtl, event.changedTouches);
      }
      var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
      var maxTranslate = getMaxTranslate(horizontal, paperRef.current);
      var currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
      var translateRatio = currentTranslate / maxTranslate;
      if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
        calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1e3;
      }
      if (open) {
        if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
          onClose();
        } else {
          setPosition(0, {
            mode: "exit"
          });
        }
        return;
      }
      if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
        onOpen();
      } else {
        setPosition(getMaxTranslate(horizontal, paperRef.current), {
          mode: "enter"
        });
      }
    });
    var handleBodyTouchMove = useEventCallback2(function(event) {
      if (!paperRef.current || !touchDetected.current) {
        return;
      }
      if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {
        return;
      }
      var anchorRtl = getAnchor(theme, anchor);
      var horizontalSwipe = isHorizontal(anchor);
      var currentX = calculateCurrentX(anchorRtl, event.touches);
      var currentY = calculateCurrentY(anchorRtl, event.touches);
      if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {
        var domTreeShapes = getDomTreeShapes(event.target, paperRef.current);
        var nativeHandler = findNativeHandler({
          domTreeShapes,
          start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
          current: horizontalSwipe ? currentX : currentY,
          anchor
        });
        if (nativeHandler) {
          nodeThatClaimedTheSwipe = nativeHandler;
          return;
        }
        nodeThatClaimedTheSwipe = swipeInstance.current;
      }
      if (swipeInstance.current.isSwiping == null) {
        var dx = Math.abs(currentX - swipeInstance.current.startX);
        var dy = Math.abs(currentY - swipeInstance.current.startY);
        if (dx > dy) {
          if (event.cancelable) {
            event.preventDefault();
          }
        }
        var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;
        if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
          swipeInstance.current.isSwiping = definitelySwiping;
          if (!definitelySwiping) {
            handleBodyTouchEnd(event);
            return;
          }
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
          if (!disableDiscovery && !open) {
            if (horizontalSwipe) {
              swipeInstance.current.startX -= swipeAreaWidth;
            } else {
              swipeInstance.current.startY -= swipeAreaWidth;
            }
          }
        }
      }
      if (!swipeInstance.current.isSwiping) {
        return;
      }
      var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
      var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;
      if (open && !swipeInstance.current.paperHit) {
        startLocation = Math.min(startLocation, maxTranslate);
      }
      var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);
      if (open) {
        if (!swipeInstance.current.paperHit) {
          var paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;
          if (paperHit) {
            swipeInstance.current.paperHit = true;
            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY;
          } else {
            return;
          }
        } else if (translate === 0) {
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
        }
      }
      if (swipeInstance.current.lastTranslate === null) {
        swipeInstance.current.lastTranslate = translate;
        swipeInstance.current.lastTime = performance.now() + 1;
      }
      var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;
      swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
      swipeInstance.current.lastTranslate = translate;
      swipeInstance.current.lastTime = performance.now();
      if (event.cancelable) {
        event.preventDefault();
      }
      setPosition(translate);
    });
    var handleBodyTouchStart = useEventCallback2(function(event) {
      if (event.defaultPrevented) {
        return;
      }
      if (event.muiHandled) {
        return;
      }
      if (open && !backdropRef.current.contains(event.target) && !paperRef.current.contains(event.target)) {
        return;
      }
      var anchorRtl = getAnchor(theme, anchor);
      var horizontalSwipe = isHorizontal(anchor);
      var currentX = calculateCurrentX(anchorRtl, event.touches);
      var currentY = calculateCurrentY(anchorRtl, event.touches);
      if (!open) {
        if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {
          return;
        }
        if (horizontalSwipe) {
          if (currentX > swipeAreaWidth) {
            return;
          }
        } else if (currentY > swipeAreaWidth) {
          return;
        }
      }
      event.muiHandled = true;
      nodeThatClaimedTheSwipe = null;
      swipeInstance.current.startX = currentX;
      swipeInstance.current.startY = currentY;
      setMaybeSwiping(true);
      if (!open && paperRef.current) {
        setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {
          changeTransition: false
        });
      }
      swipeInstance.current.velocity = 0;
      swipeInstance.current.lastTime = null;
      swipeInstance.current.lastTranslate = null;
      swipeInstance.current.paperHit = false;
      touchDetected.current = true;
    });
    React114.useEffect(function() {
      if (variant === "temporary") {
        var doc = ownerDocument2(paperRef.current);
        doc.addEventListener("touchstart", handleBodyTouchStart);
        doc.addEventListener("touchmove", handleBodyTouchMove, {
          passive: false
        });
        doc.addEventListener("touchend", handleBodyTouchEnd);
        return function() {
          doc.removeEventListener("touchstart", handleBodyTouchStart);
          doc.removeEventListener("touchmove", handleBodyTouchMove, {
            passive: false
          });
          doc.removeEventListener("touchend", handleBodyTouchEnd);
        };
      }
      return void 0;
    }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
    React114.useEffect(function() {
      return function() {
        if (nodeThatClaimedTheSwipe === swipeInstance.current) {
          nodeThatClaimedTheSwipe = null;
        }
      };
    }, []);
    React114.useEffect(function() {
      if (!open) {
        setMaybeSwiping(false);
      }
    }, [open]);
    var handleBackdropRef = React114.useCallback(function(instance) {
      backdropRef.current = ReactDOM11.findDOMNode(instance);
    }, []);
    return React114.createElement(React114.Fragment, null, React114.createElement(Drawer_default, _extends({
      open: variant === "temporary" && maybeSwiping ? true : open,
      variant,
      ModalProps: _extends({
        BackdropProps: _extends({}, BackdropProps, {
          ref: handleBackdropRef
        })
      }, ModalPropsProp),
      PaperProps: _extends({}, PaperProps, {
        style: _extends({
          pointerEvents: variant === "temporary" && !open ? "none" : ""
        }, PaperProps.style),
        ref: paperRef
      }),
      anchor,
      transitionDuration: calculatedDurationRef.current || transitionDuration,
      onClose,
      ref
    }, other)), !disableSwipeToOpen && variant === "temporary" && React114.createElement(NoSsr_default, null, React114.createElement(SwipeArea_default, _extends({
      anchor,
      ref: swipeAreaRef,
      width: swipeAreaWidth
    }, SwipeAreaProps))));
  });
  SwipeableDrawer.propTypes = {
    anchor: prop_types107.default.oneOf(["left", "top", "right", "bottom"]),
    children: prop_types107.default.node,
    disableBackdropTransition: prop_types107.default.bool,
    disableDiscovery: prop_types107.default.bool,
    disableSwipeToOpen: prop_types107.default.bool,
    hideBackdrop: prop_types107.default.bool,
    hysteresis: prop_types107.default.number,
    minFlingVelocity: prop_types107.default.number,
    ModalProps: prop_types107.default.shape({
      BackdropProps: prop_types107.default.shape({
        component: elementTypeAcceptingRef_default
      })
    }),
    onClose: prop_types107.default.func.isRequired,
    onOpen: prop_types107.default.func.isRequired,
    open: prop_types107.default.bool.isRequired,
    PaperProps: prop_types107.default.shape({
      component: elementTypeAcceptingRef_default,
      style: prop_types107.default.object
    }),
    SwipeAreaProps: prop_types107.default.object,
    swipeAreaWidth: prop_types107.default.number,
    transitionDuration: prop_types107.default.oneOfType([prop_types107.default.number, prop_types107.default.shape({
      enter: prop_types107.default.number,
      exit: prop_types107.default.number
    })]),
    variant: prop_types107.default.oneOf(["permanent", "persistent", "temporary"])
  };
  const SwipeableDrawer_default = SwipeableDrawer;

  // node_modules/@material-ui/core/esm/Switch/Switch.js
  const React115 = __toModule(require_react());
  const prop_types108 = __toModule(require_prop_types());
  var styles99 = function styles131(theme) {
    return {
      root: {
        display: "inline-flex",
        width: 34 + 12 * 2,
        height: 14 + 12 * 2,
        overflow: "hidden",
        padding: 12,
        boxSizing: "border-box",
        position: "relative",
        flexShrink: 0,
        zIndex: 0,
        verticalAlign: "middle",
        "@media print": {
          colorAdjust: "exact"
        }
      },
      edgeStart: {
        marginLeft: -8
      },
      edgeEnd: {
        marginRight: -8
      },
      switchBase: {
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 1,
        color: theme.palette.type === "light" ? theme.palette.grey[50] : theme.palette.grey[400],
        transition: theme.transitions.create(["left", "transform"], {
          duration: theme.transitions.duration.shortest
        }),
        "&$checked": {
          transform: "translateX(20px)"
        },
        "&$disabled": {
          color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
        },
        "&$checked + $track": {
          opacity: 0.5
        },
        "&$disabled + $track": {
          opacity: theme.palette.type === "light" ? 0.12 : 0.1
        }
      },
      colorPrimary: {
        "&$checked": {
          color: theme.palette.primary.main,
          "&:hover": {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
        },
        "&$checked + $track": {
          backgroundColor: theme.palette.primary.main
        },
        "&$disabled + $track": {
          backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white
        }
      },
      colorSecondary: {
        "&$checked": {
          color: theme.palette.secondary.main,
          "&:hover": {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
        },
        "&$checked + $track": {
          backgroundColor: theme.palette.secondary.main
        },
        "&$disabled + $track": {
          backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white
        }
      },
      sizeSmall: {
        width: 40,
        height: 24,
        padding: 7,
        "& $thumb": {
          width: 16,
          height: 16
        },
        "& $switchBase": {
          padding: 4,
          "&$checked": {
            transform: "translateX(16px)"
          }
        }
      },
      checked: {},
      disabled: {},
      input: {
        left: "-100%",
        width: "300%"
      },
      thumb: {
        boxShadow: theme.shadows[1],
        backgroundColor: "currentColor",
        width: 20,
        height: 20,
        borderRadius: "50%"
      },
      track: {
        height: "100%",
        width: "100%",
        borderRadius: 14 / 2,
        zIndex: -1,
        transition: theme.transitions.create(["opacity", "background-color"], {
          duration: theme.transitions.duration.shortest
        }),
        backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white,
        opacity: theme.palette.type === "light" ? 0.38 : 0.3
      }
    };
  };
  var Switch = React115.forwardRef(function Switch4(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "secondary" : _props$color, _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["classes", "className", "color", "edge", "size"]);
    var icon = React115.createElement("span", {
      className: classes.thumb
    });
    return React115.createElement("span", {
      className: clsx_m_default(classes.root, className, {
        start: classes.edgeStart,
        end: classes.edgeEnd
      }[edge], size === "small" && classes["size".concat(capitalize2(size))])
    }, React115.createElement(SwitchBase_default, _extends({
      type: "checkbox",
      icon,
      checkedIcon: icon,
      classes: {
        root: clsx_m_default(classes.switchBase, classes["color".concat(capitalize2(color2))]),
        input: classes.input,
        checked: classes.checked,
        disabled: classes.disabled
      },
      ref
    }, other)), React115.createElement("span", {
      className: classes.track
    }));
  });
  Switch.propTypes = {
    checked: prop_types108.default.bool,
    checkedIcon: prop_types108.default.node,
    classes: prop_types108.default.object,
    className: prop_types108.default.string,
    color: prop_types108.default.oneOf(["default", "primary", "secondary"]),
    defaultChecked: prop_types108.default.bool,
    disabled: prop_types108.default.bool,
    disableRipple: prop_types108.default.bool,
    edge: prop_types108.default.oneOf(["end", "start", false]),
    icon: prop_types108.default.node,
    id: prop_types108.default.string,
    inputProps: prop_types108.default.object,
    inputRef: refType_default,
    onChange: prop_types108.default.func,
    required: prop_types108.default.bool,
    size: prop_types108.default.oneOf(["medium", "small"]),
    value: prop_types108.default.any
  };
  const Switch_default = withStyles_default(styles99, {
    name: "MuiSwitch"
  })(Switch);

  // node_modules/@material-ui/core/esm/Tab/Tab.js
  const React116 = __toModule(require_react());
  const prop_types109 = __toModule(require_prop_types());
  var styles100 = function styles131(theme) {
    var _extends22;
    return {
      root: _extends({}, theme.typography.button, (_extends22 = {
        maxWidth: 264,
        minWidth: 72,
        position: "relative",
        boxSizing: "border-box",
        minHeight: 48,
        flexShrink: 0,
        padding: "6px 12px"
      }, _defineProperty(_extends22, theme.breakpoints.up("sm"), {
        padding: "6px 24px"
      }), _defineProperty(_extends22, "overflow", "hidden"), _defineProperty(_extends22, "whiteSpace", "normal"), _defineProperty(_extends22, "textAlign", "center"), _defineProperty(_extends22, theme.breakpoints.up("sm"), {
        minWidth: 160
      }), _extends22)),
      labelIcon: {
        minHeight: 72,
        paddingTop: 9,
        "& $wrapper > *:first-child": {
          marginBottom: 6
        }
      },
      textColorInherit: {
        color: "inherit",
        opacity: 0.7,
        "&$selected": {
          opacity: 1
        },
        "&$disabled": {
          opacity: 0.5
        }
      },
      textColorPrimary: {
        color: theme.palette.text.secondary,
        "&$selected": {
          color: theme.palette.primary.main
        },
        "&$disabled": {
          color: theme.palette.text.disabled
        }
      },
      textColorSecondary: {
        color: theme.palette.text.secondary,
        "&$selected": {
          color: theme.palette.secondary.main
        },
        "&$disabled": {
          color: theme.palette.text.disabled
        }
      },
      selected: {},
      disabled: {},
      fullWidth: {
        flexShrink: 1,
        flexGrow: 1,
        flexBasis: 0,
        maxWidth: "none"
      },
      wrapped: {
        fontSize: theme.typography.pxToRem(12),
        lineHeight: 1.5
      },
      wrapper: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: "100%",
        flexDirection: "column"
      }
    };
  };
  var Tab = React116.forwardRef(function Tab3(props, ref) {
    var classes = props.classes, className = props.className, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, fullWidth = props.fullWidth, icon = props.icon, indicator = props.indicator, label = props.label, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, selected = props.selected, selectionFollowsFocus = props.selectionFollowsFocus, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? "inherit" : _props$textColor, value = props.value, _props$wrapped = props.wrapped, wrapped = _props$wrapped === void 0 ? false : _props$wrapped, other = _objectWithoutProperties(props, ["classes", "className", "disabled", "disableFocusRipple", "fullWidth", "icon", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"]);
    var handleClick = function handleClick2(event) {
      if (onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    var handleFocus = function handleFocus2(event) {
      if (selectionFollowsFocus && !selected && onChange) {
        onChange(event, value);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    return React116.createElement(ButtonBase_default, _extends({
      focusRipple: !disableFocusRipple,
      className: clsx_m_default(classes.root, classes["textColor".concat(capitalize2(textColor))], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),
      ref,
      role: "tab",
      "aria-selected": selected,
      disabled,
      onClick: handleClick,
      onFocus: handleFocus,
      tabIndex: selected ? 0 : -1
    }, other), React116.createElement("span", {
      className: classes.wrapper
    }, icon, label), indicator);
  });
  Tab.propTypes = {
    children: unsupportedProp2,
    classes: prop_types109.default.object.isRequired,
    className: prop_types109.default.string,
    disabled: prop_types109.default.bool,
    disableFocusRipple: prop_types109.default.bool,
    disableRipple: prop_types109.default.bool,
    fullWidth: prop_types109.default.bool,
    icon: prop_types109.default.node,
    indicator: prop_types109.default.node,
    label: prop_types109.default.node,
    onChange: prop_types109.default.func,
    onClick: prop_types109.default.func,
    onFocus: prop_types109.default.func,
    selected: prop_types109.default.bool,
    selectionFollowsFocus: prop_types109.default.bool,
    textColor: prop_types109.default.oneOf(["secondary", "primary", "inherit"]),
    value: prop_types109.default.any,
    wrapped: prop_types109.default.bool
  };
  const Tab_default = withStyles_default(styles100, {
    name: "MuiTab"
  })(Tab);

  // node_modules/@material-ui/core/esm/Table/TableContext.js
  const React119 = __toModule(require_react());
  var TableContext2 = React119.createContext();
  if (true) {
    TableContext2.displayName = "TableContext";
  }
  const TableContext_default = TableContext2;

  // node_modules/@material-ui/core/esm/Table/Table.js
  const React118 = __toModule(require_react());
  const prop_types111 = __toModule(require_prop_types());
  var styles102 = function styles131(theme) {
    return {
      root: {
        display: "table",
        width: "100%",
        borderCollapse: "collapse",
        borderSpacing: 0,
        "& caption": _extends({}, theme.typography.body2, {
          padding: theme.spacing(2),
          color: theme.palette.text.secondary,
          textAlign: "left",
          captionSide: "bottom"
        })
      },
      stickyHeader: {
        borderCollapse: "separate"
      }
    };
  };
  var defaultComponent = "table";
  var Table = React118.forwardRef(function Table3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? defaultComponent : _props$component, _props$padding = props.padding, padding = _props$padding === void 0 ? "default" : _props$padding, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$stickyHeader = props.stickyHeader, stickyHeader = _props$stickyHeader === void 0 ? false : _props$stickyHeader, other = _objectWithoutProperties(props, ["classes", "className", "component", "padding", "size", "stickyHeader"]);
    var table = React118.useMemo(function() {
      return {
        padding,
        size,
        stickyHeader
      };
    }, [padding, size, stickyHeader]);
    return React118.createElement(TableContext_default.Provider, {
      value: table
    }, React118.createElement(Component7, _extends({
      role: Component7 === defaultComponent ? null : "table",
      ref,
      className: clsx_m_default(classes.root, className, stickyHeader && classes.stickyHeader)
    }, other)));
  });
  Table.propTypes = {
    children: prop_types111.default.node.isRequired,
    classes: prop_types111.default.object.isRequired,
    className: prop_types111.default.string,
    component: prop_types111.default.elementType,
    padding: prop_types111.default.oneOf(["default", "checkbox", "none"]),
    size: prop_types111.default.oneOf(["small", "medium"]),
    stickyHeader: prop_types111.default.bool
  };
  const Table_default = withStyles_default(styles102, {
    name: "MuiTable"
  })(Table);

  // node_modules/@material-ui/core/esm/Table/Tablelvl2Context.js
  const React120 = __toModule(require_react());
  var Tablelvl2Context = React120.createContext();
  if (true) {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  const Tablelvl2Context_default = Tablelvl2Context;

  // node_modules/@material-ui/core/esm/TableBody/TableBody.js
  const React121 = __toModule(require_react());
  const prop_types112 = __toModule(require_prop_types());
  var styles103 = {
    root: {
      display: "table-row-group"
    }
  };
  var tablelvl2 = {
    variant: "body"
  };
  var defaultComponent2 = "tbody";
  var TableBody = React121.forwardRef(function TableBody3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? defaultComponent2 : _props$component, other = _objectWithoutProperties(props, ["classes", "className", "component"]);
    return React121.createElement(Tablelvl2Context_default.Provider, {
      value: tablelvl2
    }, React121.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref,
      role: Component7 === defaultComponent2 ? null : "rowgroup"
    }, other)));
  });
  TableBody.propTypes = {
    children: prop_types112.default.node,
    classes: prop_types112.default.object.isRequired,
    className: prop_types112.default.string,
    component: prop_types112.default.elementType
  };
  const TableBody_default = withStyles_default(styles103, {
    name: "MuiTableBody"
  })(TableBody);

  // node_modules/@material-ui/core/esm/TableCell/TableCell.js
  const React122 = __toModule(require_react());
  const prop_types113 = __toModule(require_prop_types());
  var styles104 = function styles131(theme) {
    return {
      root: _extends({}, theme.typography.body2, {
        display: "table-cell",
        verticalAlign: "inherit",
        borderBottom: "1px solid\n    ".concat(theme.palette.type === "light" ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)),
        textAlign: "left",
        padding: 16
      }),
      head: {
        color: theme.palette.text.primary,
        lineHeight: theme.typography.pxToRem(24),
        fontWeight: theme.typography.fontWeightMedium
      },
      body: {
        color: theme.palette.text.primary
      },
      footer: {
        color: theme.palette.text.secondary,
        lineHeight: theme.typography.pxToRem(21),
        fontSize: theme.typography.pxToRem(12)
      },
      sizeSmall: {
        padding: "6px 24px 6px 16px",
        "&:last-child": {
          paddingRight: 16
        },
        "&$paddingCheckbox": {
          width: 24,
          padding: "0 12px 0 16px",
          "&:last-child": {
            paddingLeft: 12,
            paddingRight: 16
          },
          "& > *": {
            padding: 0
          }
        }
      },
      paddingCheckbox: {
        width: 48,
        padding: "0 0 0 4px",
        "&:last-child": {
          paddingLeft: 0,
          paddingRight: 4
        }
      },
      paddingNone: {
        padding: 0,
        "&:last-child": {
          padding: 0
        }
      },
      alignLeft: {
        textAlign: "left"
      },
      alignCenter: {
        textAlign: "center"
      },
      alignRight: {
        textAlign: "right",
        flexDirection: "row-reverse"
      },
      alignJustify: {
        textAlign: "justify"
      },
      stickyHeader: {
        position: "sticky",
        top: 0,
        left: 0,
        zIndex: 2,
        backgroundColor: theme.palette.background.default
      }
    };
  };
  var TableCell = React122.forwardRef(function TableCell4(props, ref) {
    var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, component = props.component, paddingProp = props.padding, scopeProp = props.scope, sizeProp = props.size, sortDirection = props.sortDirection, variantProp = props.variant, other = _objectWithoutProperties(props, ["align", "classes", "className", "component", "padding", "scope", "size", "sortDirection", "variant"]);
    var table = React122.useContext(TableContext_default);
    var tablelvl24 = React122.useContext(Tablelvl2Context_default);
    var isHeadCell = tablelvl24 && tablelvl24.variant === "head";
    var role;
    var Component7;
    if (component) {
      Component7 = component;
      role = isHeadCell ? "columnheader" : "cell";
    } else {
      Component7 = isHeadCell ? "th" : "td";
    }
    var scope = scopeProp;
    if (!scope && isHeadCell) {
      scope = "col";
    }
    var padding = paddingProp || (table && table.padding ? table.padding : "default");
    var size = sizeProp || (table && table.size ? table.size : "medium");
    var variant = variantProp || tablelvl24 && tablelvl24.variant;
    var ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return React122.createElement(Component7, _extends({
      ref,
      className: clsx_m_default(classes.root, classes[variant], className, align !== "inherit" && classes["align".concat(capitalize2(align))], padding !== "default" && classes["padding".concat(capitalize2(padding))], size !== "medium" && classes["size".concat(capitalize2(size))], variant === "head" && table && table.stickyHeader && classes.stickyHeader),
      "aria-sort": ariaSort,
      role,
      scope
    }, other));
  });
  TableCell.propTypes = {
    align: prop_types113.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    children: prop_types113.default.node,
    classes: prop_types113.default.object,
    className: prop_types113.default.string,
    component: prop_types113.default.elementType,
    padding: prop_types113.default.oneOf(["checkbox", "default", "none"]),
    scope: prop_types113.default.string,
    size: prop_types113.default.oneOf(["medium", "small"]),
    sortDirection: prop_types113.default.oneOf(["asc", "desc", false]),
    variant: prop_types113.default.oneOf(["body", "footer", "head"])
  };
  const TableCell_default = withStyles_default(styles104, {
    name: "MuiTableCell"
  })(TableCell);

  // node_modules/@material-ui/core/esm/TableContainer/TableContainer.js
  const React123 = __toModule(require_react());
  const prop_types114 = __toModule(require_prop_types());
  var styles105 = {
    root: {
      width: "100%",
      overflowX: "auto"
    }
  };
  var TableContainer = React123.forwardRef(function TableContainer3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, other = _objectWithoutProperties(props, ["classes", "className", "component"]);
    return React123.createElement(Component7, _extends({
      ref,
      className: clsx_m_default(classes.root, className)
    }, other));
  });
  TableContainer.propTypes = {
    children: prop_types114.default.node,
    classes: prop_types114.default.object.isRequired,
    className: prop_types114.default.string,
    component: prop_types114.default.elementType
  };
  const TableContainer_default = withStyles_default(styles105, {
    name: "MuiTableContainer"
  })(TableContainer);

  // node_modules/@material-ui/core/esm/TableFooter/TableFooter.js
  const React124 = __toModule(require_react());
  const prop_types115 = __toModule(require_prop_types());
  var styles106 = {
    root: {
      display: "table-footer-group"
    }
  };
  var tablelvl22 = {
    variant: "footer"
  };
  var defaultComponent3 = "tfoot";
  var TableFooter = React124.forwardRef(function TableFooter3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? defaultComponent3 : _props$component, other = _objectWithoutProperties(props, ["classes", "className", "component"]);
    return React124.createElement(Tablelvl2Context_default.Provider, {
      value: tablelvl22
    }, React124.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref,
      role: Component7 === defaultComponent3 ? null : "rowgroup"
    }, other)));
  });
  TableFooter.propTypes = {
    children: prop_types115.default.node,
    classes: prop_types115.default.object.isRequired,
    className: prop_types115.default.string,
    component: prop_types115.default.elementType
  };
  const TableFooter_default = withStyles_default(styles106, {
    name: "MuiTableFooter"
  })(TableFooter);

  // node_modules/@material-ui/core/esm/TableHead/TableHead.js
  const React125 = __toModule(require_react());
  const prop_types116 = __toModule(require_prop_types());
  var styles107 = {
    root: {
      display: "table-header-group"
    }
  };
  var tablelvl23 = {
    variant: "head"
  };
  var defaultComponent4 = "thead";
  var TableHead = React125.forwardRef(function TableHead3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? defaultComponent4 : _props$component, other = _objectWithoutProperties(props, ["classes", "className", "component"]);
    return React125.createElement(Tablelvl2Context_default.Provider, {
      value: tablelvl23
    }, React125.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      ref,
      role: Component7 === defaultComponent4 ? null : "rowgroup"
    }, other)));
  });
  TableHead.propTypes = {
    children: prop_types116.default.node,
    classes: prop_types116.default.object.isRequired,
    className: prop_types116.default.string,
    component: prop_types116.default.elementType
  };
  const TableHead_default = withStyles_default(styles107, {
    name: "MuiTableHead"
  })(TableHead);

  // node_modules/@material-ui/core/esm/Toolbar/Toolbar.js
  const React135 = __toModule(require_react());
  const prop_types126 = __toModule(require_prop_types());
  var styles116 = function styles131(theme) {
    return {
      root: {
        position: "relative",
        display: "flex",
        alignItems: "center"
      },
      gutters: _defineProperty({
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2)
      }, theme.breakpoints.up("sm"), {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }),
      regular: theme.mixins.toolbar,
      dense: {
        minHeight: 48
      }
    };
  };
  var Toolbar2 = React135.forwardRef(function Toolbar5(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$variant = props.variant, variant = _props$variant === void 0 ? "regular" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "variant"]);
    return React135.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, classes[variant], className, !disableGutters && classes.gutters),
      ref
    }, other));
  });
  Toolbar2.propTypes = {
    children: prop_types126.default.node,
    classes: prop_types126.default.object.isRequired,
    className: prop_types126.default.string,
    component: prop_types126.default.elementType,
    disableGutters: prop_types126.default.bool,
    variant: prop_types126.default.oneOf(["regular", "dense"])
  };
  const Toolbar_default = withStyles_default(styles116, {
    name: "MuiToolbar"
  })(Toolbar2);

  // node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowLeft.js
  const React148 = __toModule(require_react());
  const KeyboardArrowLeft_default = createSvgIcon2(React148.createElement("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowRight.js
  const React149 = __toModule(require_react());
  const KeyboardArrowRight_default = createSvgIcon2(React149.createElement("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@material-ui/core/esm/TablePagination/TablePaginationActions.js
  const React127 = __toModule(require_react());
  const prop_types118 = __toModule(require_prop_types());
  var _ref5 = React127.createElement(KeyboardArrowRight_default, null);
  var _ref23 = React127.createElement(KeyboardArrowLeft_default, null);
  var _ref32 = React127.createElement(KeyboardArrowLeft_default, null);
  var _ref42 = React127.createElement(KeyboardArrowRight_default, null);
  var TablePaginationActions2 = React127.forwardRef(function TablePaginationActions3(props, ref) {
    var backIconButtonProps = props.backIconButtonProps, count = props.count, nextIconButtonProps = props.nextIconButtonProps, onChangePage = props.onChangePage, page = props.page, rowsPerPage = props.rowsPerPage, other = _objectWithoutProperties(props, ["backIconButtonProps", "count", "nextIconButtonProps", "onChangePage", "page", "rowsPerPage"]);
    var theme = useTheme2();
    var handleBackButtonClick = function handleBackButtonClick2(event) {
      onChangePage(event, page - 1);
    };
    var handleNextButtonClick = function handleNextButtonClick2(event) {
      onChangePage(event, page + 1);
    };
    return React127.createElement("div", _extends({
      ref
    }, other), React127.createElement(IconButton_default, _extends({
      onClick: handleBackButtonClick,
      disabled: page === 0,
      color: "inherit"
    }, backIconButtonProps), theme.direction === "rtl" ? _ref5 : _ref23), React127.createElement(IconButton_default, _extends({
      onClick: handleNextButtonClick,
      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
      color: "inherit"
    }, nextIconButtonProps), theme.direction === "rtl" ? _ref32 : _ref42));
  });
  TablePaginationActions2.propTypes = {
    backIconButtonProps: prop_types118.default.object,
    count: prop_types118.default.number.isRequired,
    nextIconButtonProps: prop_types118.default.object,
    onChangePage: prop_types118.default.func.isRequired,
    page: prop_types118.default.number.isRequired,
    rowsPerPage: prop_types118.default.number.isRequired
  };
  const TablePaginationActions_default = TablePaginationActions2;

  // node_modules/@material-ui/core/esm/TablePagination/TablePagination.js
  const React126 = __toModule(require_react());
  const prop_types117 = __toModule(require_prop_types());
  var styles108 = function styles131(theme) {
    return {
      root: {
        color: theme.palette.text.primary,
        fontSize: theme.typography.pxToRem(14),
        overflow: "auto",
        "&:last-child": {
          padding: 0
        }
      },
      toolbar: {
        minHeight: 52,
        paddingRight: 2
      },
      spacer: {
        flex: "1 1 100%"
      },
      caption: {
        flexShrink: 0
      },
      selectRoot: {
        marginRight: 32,
        marginLeft: 8
      },
      select: {
        paddingLeft: 8,
        paddingRight: 24,
        textAlign: "right",
        textAlignLast: "right"
      },
      selectIcon: {},
      input: {
        color: "inherit",
        fontSize: "inherit",
        flexShrink: 0
      },
      menuItem: {},
      actions: {
        flexShrink: 0,
        marginLeft: 20
      }
    };
  };
  var defaultLabelDisplayedRows = function defaultLabelDisplayedRows2(_ref6) {
    var from = _ref6.from, to = _ref6.to, count = _ref6.count;
    return "".concat(from, "-").concat(to, " of ").concat(count !== -1 ? count : "more than ".concat(to));
  };
  var defaultRowsPerPageOptions = [10, 25, 50, 100];
  var TablePagination = React126.forwardRef(function TablePagination3(props, ref) {
    var _props$ActionsCompone = props.ActionsComponent, ActionsComponent = _props$ActionsCompone === void 0 ? TablePaginationActions_default : _props$ActionsCompone, backIconButtonProps = props.backIconButtonProps, _props$backIconButton = props.backIconButtonText, backIconButtonText = _props$backIconButton === void 0 ? "Previous page" : _props$backIconButton, classes = props.classes, className = props.className, colSpanProp = props.colSpan, _props$component = props.component, Component7 = _props$component === void 0 ? TableCell_default : _props$component, count = props.count, _props$labelDisplayed = props.labelDisplayedRows, labelDisplayedRows = _props$labelDisplayed === void 0 ? defaultLabelDisplayedRows : _props$labelDisplayed, _props$labelRowsPerPa = props.labelRowsPerPage, labelRowsPerPage = _props$labelRowsPerPa === void 0 ? "Rows per page:" : _props$labelRowsPerPa, nextIconButtonProps = props.nextIconButtonProps, _props$nextIconButton = props.nextIconButtonText, nextIconButtonText = _props$nextIconButton === void 0 ? "Next page" : _props$nextIconButton, onChangePage = props.onChangePage, onChangeRowsPerPage = props.onChangeRowsPerPage, page = props.page, rowsPerPage = props.rowsPerPage, _props$rowsPerPageOpt = props.rowsPerPageOptions, rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? defaultRowsPerPageOptions : _props$rowsPerPageOpt, _props$SelectProps = props.SelectProps, SelectProps = _props$SelectProps === void 0 ? {} : _props$SelectProps, other = _objectWithoutProperties(props, ["ActionsComponent", "backIconButtonProps", "backIconButtonText", "classes", "className", "colSpan", "component", "count", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "nextIconButtonText", "onChangePage", "onChangeRowsPerPage", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps"]);
    var colSpan;
    if (Component7 === TableCell_default || Component7 === "td") {
      colSpan = colSpanProp || 1e3;
    }
    var selectId = useId();
    var labelId = useId();
    var MenuItemComponent = SelectProps.native ? "option" : MenuItem_default;
    return React126.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className),
      colSpan,
      ref
    }, other), React126.createElement(Toolbar_default, {
      className: classes.toolbar
    }, React126.createElement("div", {
      className: classes.spacer
    }), rowsPerPageOptions.length > 1 && React126.createElement(Typography_default, {
      color: "inherit",
      variant: "body2",
      className: classes.caption,
      id: labelId
    }, labelRowsPerPage), rowsPerPageOptions.length > 1 && React126.createElement(Select_default, _extends({
      classes: {
        select: classes.select,
        icon: classes.selectIcon
      },
      input: React126.createElement(InputBase_default, {
        className: clsx_m_default(classes.input, classes.selectRoot)
      }),
      value: rowsPerPage,
      onChange: onChangeRowsPerPage,
      id: selectId,
      labelId
    }, SelectProps), rowsPerPageOptions.map(function(rowsPerPageOption) {
      return React126.createElement(MenuItemComponent, {
        className: classes.menuItem,
        key: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption,
        value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
      }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption);
    })), React126.createElement(Typography_default, {
      color: "inherit",
      variant: "body2",
      className: classes.caption
    }, labelDisplayedRows({
      from: count === 0 ? 0 : page * rowsPerPage + 1,
      to: count !== -1 ? Math.min(count, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage,
      count: count === -1 ? -1 : count,
      page
    })), React126.createElement(ActionsComponent, {
      className: classes.actions,
      backIconButtonProps: _extends({
        title: backIconButtonText,
        "aria-label": backIconButtonText
      }, backIconButtonProps),
      count,
      nextIconButtonProps: _extends({
        title: nextIconButtonText,
        "aria-label": nextIconButtonText
      }, nextIconButtonProps),
      onChangePage,
      page,
      rowsPerPage
    })));
  });
  TablePagination.propTypes = {
    ActionsComponent: prop_types117.default.elementType,
    backIconButtonProps: prop_types117.default.object,
    backIconButtonText: prop_types117.default.string,
    classes: prop_types117.default.object.isRequired,
    className: prop_types117.default.string,
    colSpan: prop_types117.default.number,
    component: prop_types117.default.elementType,
    count: prop_types117.default.number.isRequired,
    labelDisplayedRows: prop_types117.default.func,
    labelRowsPerPage: prop_types117.default.node,
    nextIconButtonProps: prop_types117.default.object,
    nextIconButtonText: prop_types117.default.string,
    onChangePage: prop_types117.default.func.isRequired,
    onChangeRowsPerPage: prop_types117.default.func,
    page: chainPropTypes(prop_types117.default.number.isRequired, function(props) {
      var count = props.count, page = props.page, rowsPerPage = props.rowsPerPage;
      if (count === -1) {
        return null;
      }
      var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error("Material-UI: The page prop of a TablePagination is out of range " + "(0 to ".concat(newLastPage, ", but page is ").concat(page, ")."));
      }
      return null;
    }),
    rowsPerPage: prop_types117.default.number.isRequired,
    rowsPerPageOptions: prop_types117.default.array,
    SelectProps: prop_types117.default.object
  };
  const TablePagination_default = withStyles_default(styles108, {
    name: "MuiTablePagination"
  })(TablePagination);

  // node_modules/@material-ui/core/esm/TableRow/TableRow.js
  const React128 = __toModule(require_react());
  const prop_types119 = __toModule(require_prop_types());
  var styles109 = function styles131(theme) {
    return {
      root: {
        color: "inherit",
        display: "table-row",
        verticalAlign: "middle",
        outline: 0,
        "&$hover:hover": {
          backgroundColor: theme.palette.action.hover
        },
        "&$selected, &$selected:hover": {
          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.selectedOpacity)
        }
      },
      selected: {},
      hover: {},
      head: {},
      footer: {}
    };
  };
  var defaultComponent5 = "tr";
  var TableRow = React128.forwardRef(function TableRow3(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? defaultComponent5 : _props$component, _props$hover = props.hover, hover = _props$hover === void 0 ? false : _props$hover, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = _objectWithoutProperties(props, ["classes", "className", "component", "hover", "selected"]);
    var tablelvl24 = React128.useContext(Tablelvl2Context_default);
    return React128.createElement(Component7, _extends({
      ref,
      className: clsx_m_default(classes.root, className, tablelvl24 && {
        head: classes.head,
        footer: classes.footer
      }[tablelvl24.variant], hover && classes.hover, selected && classes.selected),
      role: Component7 === defaultComponent5 ? null : "row"
    }, other));
  });
  TableRow.propTypes = {
    children: prop_types119.default.node,
    classes: prop_types119.default.object.isRequired,
    className: prop_types119.default.string,
    component: prop_types119.default.elementType,
    hover: prop_types119.default.bool,
    selected: prop_types119.default.bool
  };
  const TableRow_default = withStyles_default(styles109, {
    name: "MuiTableRow"
  })(TableRow);

  // node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDownward.js
  const React141 = __toModule(require_react());
  const ArrowDownward_default = createSvgIcon2(React141.createElement("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");

  // node_modules/@material-ui/core/esm/TableSortLabel/TableSortLabel.js
  const React129 = __toModule(require_react());
  const prop_types120 = __toModule(require_prop_types());
  var styles110 = function styles131(theme) {
    return {
      root: {
        cursor: "pointer",
        display: "inline-flex",
        justifyContent: "flex-start",
        flexDirection: "inherit",
        alignItems: "center",
        "&:focus": {
          color: theme.palette.text.secondary
        },
        "&:hover": {
          color: theme.palette.text.secondary,
          "& $icon": {
            opacity: 0.5
          }
        },
        "&$active": {
          color: theme.palette.text.primary,
          "&& $icon": {
            opacity: 1,
            color: theme.palette.text.secondary
          }
        }
      },
      active: {},
      icon: {
        fontSize: 18,
        marginRight: 4,
        marginLeft: 4,
        opacity: 0,
        transition: theme.transitions.create(["opacity", "transform"], {
          duration: theme.transitions.duration.shorter
        }),
        userSelect: "none"
      },
      iconDirectionDesc: {
        transform: "rotate(0deg)"
      },
      iconDirectionAsc: {
        transform: "rotate(180deg)"
      }
    };
  };
  var TableSortLabel = React129.forwardRef(function TableSortLabel3(props, ref) {
    var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, children = props.children, classes = props.classes, className = props.className, _props$direction = props.direction, direction = _props$direction === void 0 ? "asc" : _props$direction, _props$hideSortIcon = props.hideSortIcon, hideSortIcon = _props$hideSortIcon === void 0 ? false : _props$hideSortIcon, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDownward_default : _props$IconComponent, other = _objectWithoutProperties(props, ["active", "children", "classes", "className", "direction", "hideSortIcon", "IconComponent"]);
    return React129.createElement(ButtonBase_default, _extends({
      className: clsx_m_default(classes.root, className, active && classes.active),
      component: "span",
      disableRipple: true,
      ref
    }, other), children, hideSortIcon && !active ? null : React129.createElement(IconComponent, {
      className: clsx_m_default(classes.icon, classes["iconDirection".concat(capitalize2(direction))])
    }));
  });
  TableSortLabel.propTypes = {
    active: prop_types120.default.bool,
    children: prop_types120.default.node,
    classes: prop_types120.default.object.isRequired,
    className: prop_types120.default.string,
    direction: prop_types120.default.oneOf(["asc", "desc"]),
    hideSortIcon: prop_types120.default.bool,
    IconComponent: prop_types120.default.elementType
  };
  const TableSortLabel_default = withStyles_default(styles110, {
    name: "MuiTableSortLabel"
  })(TableSortLabel);

  // node_modules/@material-ui/core/esm/utils/scrollLeft.js
  var cachedType;
  function detectScrollType() {
    if (cachedType) {
      return cachedType;
    }
    var dummy = document.createElement("div");
    dummy.appendChild(document.createTextNode("ABCD"));
    dummy.dir = "rtl";
    dummy.style.fontSize = "14px";
    dummy.style.width = "4px";
    dummy.style.height = "1px";
    dummy.style.position = "absolute";
    dummy.style.top = "-1000px";
    dummy.style.overflow = "scroll";
    document.body.appendChild(dummy);
    cachedType = "reverse";
    if (dummy.scrollLeft > 0) {
      cachedType = "default";
    } else {
      dummy.scrollLeft = 1;
      if (dummy.scrollLeft === 0) {
        cachedType = "negative";
      }
    }
    document.body.removeChild(dummy);
    return cachedType;
  }
  function getNormalizedScrollLeft(element, direction) {
    var scrollLeft2 = element.scrollLeft;
    if (direction !== "rtl") {
      return scrollLeft2;
    }
    var type = detectScrollType();
    switch (type) {
      case "negative":
        return element.scrollWidth - element.clientWidth + scrollLeft2;
      case "reverse":
        return element.scrollWidth - element.clientWidth - scrollLeft2;
      default:
        return scrollLeft2;
    }
  }

  // node_modules/@material-ui/core/esm/internal/animate.js
  function easeInOutSin(time) {
    return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
  }
  function animate2(property, element, to) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var cb = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
    };
    var _options$ease = options.ease, ease = _options$ease === void 0 ? easeInOutSin : _options$ease, _options$duration = options.duration, duration2 = _options$duration === void 0 ? 300 : _options$duration;
    var start = null;
    var from = element[property];
    var cancelled = false;
    var cancel = function cancel2() {
      cancelled = true;
    };
    var step = function step2(timestamp) {
      if (cancelled) {
        cb(new Error("Animation cancelled"));
        return;
      }
      if (start === null) {
        start = timestamp;
      }
      var time = Math.min(1, (timestamp - start) / duration2);
      element[property] = ease(time) * (to - from) + from;
      if (time >= 1) {
        requestAnimationFrame(function() {
          cb(null);
        });
        return;
      }
      requestAnimationFrame(step2);
    };
    if (from === to) {
      cb(new Error("Element already at target position"));
      return cancel;
    }
    requestAnimationFrame(step);
    return cancel;
  }

  // node_modules/@material-ui/core/esm/Tabs/ScrollbarSize.js
  const React130 = __toModule(require_react());
  const prop_types121 = __toModule(require_prop_types());
  var styles111 = {
    width: 99,
    height: 99,
    position: "absolute",
    top: -9999,
    overflow: "scroll"
  };
  function ScrollbarSize(props) {
    var onChange = props.onChange, other = _objectWithoutProperties(props, ["onChange"]);
    var scrollbarHeight = React130.useRef();
    var nodeRef = React130.useRef(null);
    var setMeasurements = function setMeasurements2() {
      scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
    };
    React130.useEffect(function() {
      var handleResize = debounce2(function() {
        var prevHeight = scrollbarHeight.current;
        setMeasurements();
        if (prevHeight !== scrollbarHeight.current) {
          onChange(scrollbarHeight.current);
        }
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [onChange]);
    React130.useEffect(function() {
      setMeasurements();
      onChange(scrollbarHeight.current);
    }, [onChange]);
    return React130.createElement("div", _extends({
      style: styles111,
      ref: nodeRef
    }, other));
  }
  ScrollbarSize.propTypes = {
    onChange: prop_types121.default.func.isRequired
  };

  // node_modules/@material-ui/core/esm/Tabs/TabIndicator.js
  const React131 = __toModule(require_react());
  const prop_types122 = __toModule(require_prop_types());
  var styles112 = function styles131(theme) {
    return {
      root: {
        position: "absolute",
        height: 2,
        bottom: 0,
        width: "100%",
        transition: theme.transitions.create()
      },
      colorPrimary: {
        backgroundColor: theme.palette.primary.main
      },
      colorSecondary: {
        backgroundColor: theme.palette.secondary.main
      },
      vertical: {
        height: "100%",
        width: 2,
        right: 0
      }
    };
  };
  var TabIndicator = React131.forwardRef(function TabIndicator3(props, ref) {
    var classes = props.classes, className = props.className, color2 = props.color, orientation = props.orientation, other = _objectWithoutProperties(props, ["classes", "className", "color", "orientation"]);
    return React131.createElement("span", _extends({
      className: clsx_m_default(classes.root, classes["color".concat(capitalize2(color2))], className, orientation === "vertical" && classes.vertical),
      ref
    }, other));
  });
  TabIndicator.propTypes = {
    classes: prop_types122.default.object.isRequired,
    className: prop_types122.default.string,
    color: prop_types122.default.oneOf(["primary", "secondary"]).isRequired,
    orientation: prop_types122.default.oneOf(["horizontal", "vertical"]).isRequired
  };
  const TabIndicator_default = withStyles_default(styles112, {
    name: "PrivateTabIndicator"
  })(TabIndicator);

  // node_modules/@material-ui/core/esm/TabScrollButton/TabScrollButton.js
  const React117 = __toModule(require_react());
  const prop_types110 = __toModule(require_prop_types());
  var styles101 = {
    root: {
      width: 40,
      flexShrink: 0,
      opacity: 0.8,
      "&$disabled": {
        opacity: 0
      }
    },
    vertical: {
      width: "100%",
      height: 40,
      "& svg": {
        transform: "rotate(90deg)"
      }
    },
    disabled: {}
  };
  var _ref4 = React117.createElement(KeyboardArrowLeft_default, {
    fontSize: "small"
  });
  var _ref22 = React117.createElement(KeyboardArrowRight_default, {
    fontSize: "small"
  });
  var TabScrollButton = React117.forwardRef(function TabScrollButton4(props, ref) {
    var classes = props.classes, classNameProp = props.className, direction = props.direction, orientation = props.orientation, disabled = props.disabled, other = _objectWithoutProperties(props, ["classes", "className", "direction", "orientation", "disabled"]);
    return React117.createElement(ButtonBase_default, _extends({
      component: "div",
      className: clsx_m_default(classes.root, classNameProp, disabled && classes.disabled, orientation === "vertical" && classes.vertical),
      ref,
      role: null,
      tabIndex: null
    }, other), direction === "left" ? _ref4 : _ref22);
  });
  TabScrollButton.propTypes = {
    children: prop_types110.default.node,
    classes: prop_types110.default.object,
    className: prop_types110.default.string,
    direction: prop_types110.default.oneOf(["left", "right"]).isRequired,
    disabled: prop_types110.default.bool,
    orientation: prop_types110.default.oneOf(["horizontal", "vertical"]).isRequired
  };
  const TabScrollButton_default = withStyles_default(styles101, {
    name: "MuiTabScrollButton"
  })(TabScrollButton);

  // node_modules/@material-ui/core/esm/Tabs/Tabs.js
  const React132 = __toModule(require_react());
  const react_is11 = __toModule(require_react_is());
  const prop_types123 = __toModule(require_prop_types());
  var styles113 = function styles131(theme) {
    return {
      root: {
        overflow: "hidden",
        minHeight: 48,
        WebkitOverflowScrolling: "touch",
        display: "flex"
      },
      vertical: {
        flexDirection: "column"
      },
      flexContainer: {
        display: "flex"
      },
      flexContainerVertical: {
        flexDirection: "column"
      },
      centered: {
        justifyContent: "center"
      },
      scroller: {
        position: "relative",
        display: "inline-block",
        flex: "1 1 auto",
        whiteSpace: "nowrap"
      },
      fixed: {
        overflowX: "hidden",
        width: "100%"
      },
      scrollable: {
        overflowX: "scroll",
        scrollbarWidth: "none",
        "&::-webkit-scrollbar": {
          display: "none"
        }
      },
      scrollButtons: {},
      scrollButtonsDesktop: _defineProperty({}, theme.breakpoints.down("xs"), {
        display: "none"
      }),
      indicator: {}
    };
  };
  var Tabs = React132.forwardRef(function Tabs3(props, ref) {
    var ariaLabel = props["aria-label"], ariaLabelledBy = props["aria-labelledby"], action = props.action, _props$centered = props.centered, centered = _props$centered === void 0 ? false : _props$centered, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component7 = _props$component === void 0 ? "div" : _props$component, _props$indicatorColor = props.indicatorColor, indicatorColor = _props$indicatorColor === void 0 ? "secondary" : _props$indicatorColor, onChange = props.onChange, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$ScrollButtonCo = props.ScrollButtonComponent, ScrollButtonComponent = _props$ScrollButtonCo === void 0 ? TabScrollButton_default : _props$ScrollButtonCo, _props$scrollButtons = props.scrollButtons, scrollButtons = _props$scrollButtons === void 0 ? "auto" : _props$scrollButtons, selectionFollowsFocus = props.selectionFollowsFocus, _props$TabIndicatorPr = props.TabIndicatorProps, TabIndicatorProps = _props$TabIndicatorPr === void 0 ? {} : _props$TabIndicatorPr, TabScrollButtonProps = props.TabScrollButtonProps, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? "inherit" : _props$textColor, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["aria-label", "aria-labelledby", "action", "centered", "children", "classes", "className", "component", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant"]);
    var theme = useTheme2();
    var scrollable = variant === "scrollable";
    var isRtl = theme.direction === "rtl";
    var vertical = orientation === "vertical";
    var scrollStart = vertical ? "scrollTop" : "scrollLeft";
    var start = vertical ? "top" : "left";
    var end = vertical ? "bottom" : "right";
    var clientSize = vertical ? "clientHeight" : "clientWidth";
    var size = vertical ? "height" : "width";
    if (true) {
      if (centered && scrollable) {
        console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
      }
    }
    var _React$useState = React132.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
    var _React$useState2 = React132.useState({}), indicatorStyle = _React$useState2[0], setIndicatorStyle = _React$useState2[1];
    var _React$useState3 = React132.useState({
      start: false,
      end: false
    }), displayScroll = _React$useState3[0], setDisplayScroll = _React$useState3[1];
    var _React$useState4 = React132.useState({
      overflow: "hidden",
      marginBottom: null
    }), scrollerStyle = _React$useState4[0], setScrollerStyle = _React$useState4[1];
    var valueToIndex = new Map();
    var tabsRef = React132.useRef(null);
    var tabListRef = React132.useRef(null);
    var getTabsMeta = function getTabsMeta2() {
      var tabsNode = tabsRef.current;
      var tabsMeta;
      if (tabsNode) {
        var rect = tabsNode.getBoundingClientRect();
        tabsMeta = {
          clientWidth: tabsNode.clientWidth,
          scrollLeft: tabsNode.scrollLeft,
          scrollTop: tabsNode.scrollTop,
          scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
          scrollWidth: tabsNode.scrollWidth,
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right
        };
      }
      var tabMeta;
      if (tabsNode && value !== false) {
        var _children = tabListRef.current.children;
        if (_children.length > 0) {
          var tab = _children[valueToIndex.get(value)];
          if (true) {
            if (!tab) {
              console.error(["Material-UI: The value provided to the Tabs component is invalid.", "None of the Tabs' children match with `".concat(value, "`."), valueToIndex.keys ? "You can provide one of the following values: ".concat(Array.from(valueToIndex.keys()).join(", "), ".") : null].join("\n"));
            }
          }
          tabMeta = tab ? tab.getBoundingClientRect() : null;
        }
      }
      return {
        tabsMeta,
        tabMeta
      };
    };
    var updateIndicatorState = useEventCallback2(function() {
      var _newIndicatorStyle;
      var _getTabsMeta = getTabsMeta(), tabsMeta = _getTabsMeta.tabsMeta, tabMeta = _getTabsMeta.tabMeta;
      var startValue = 0;
      if (tabMeta && tabsMeta) {
        if (vertical) {
          startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
        } else {
          var correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
          startValue = tabMeta.left - tabsMeta.left + correction;
        }
      }
      var newIndicatorStyle = (_newIndicatorStyle = {}, _defineProperty(_newIndicatorStyle, start, startValue), _defineProperty(_newIndicatorStyle, size, tabMeta ? tabMeta[size] : 0), _newIndicatorStyle);
      if (isNaN(indicatorStyle[start]) || isNaN(indicatorStyle[size])) {
        setIndicatorStyle(newIndicatorStyle);
      } else {
        var dStart = Math.abs(indicatorStyle[start] - newIndicatorStyle[start]);
        var dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
        if (dStart >= 1 || dSize >= 1) {
          setIndicatorStyle(newIndicatorStyle);
        }
      }
    });
    var scroll = function scroll2(scrollValue) {
      animate2(scrollStart, tabsRef.current, scrollValue);
    };
    var moveTabsScroll = function moveTabsScroll2(delta) {
      var scrollValue = tabsRef.current[scrollStart];
      if (vertical) {
        scrollValue += delta;
      } else {
        scrollValue += delta * (isRtl ? -1 : 1);
        scrollValue *= isRtl && detectScrollType() === "reverse" ? -1 : 1;
      }
      scroll(scrollValue);
    };
    var handleStartScrollClick = function handleStartScrollClick2() {
      moveTabsScroll(-tabsRef.current[clientSize]);
    };
    var handleEndScrollClick = function handleEndScrollClick2() {
      moveTabsScroll(tabsRef.current[clientSize]);
    };
    var handleScrollbarSizeChange = React132.useCallback(function(scrollbarHeight) {
      setScrollerStyle({
        overflow: null,
        marginBottom: -scrollbarHeight
      });
    }, []);
    var getConditionalElements = function getConditionalElements2() {
      var conditionalElements2 = {};
      conditionalElements2.scrollbarSizeListener = scrollable ? React132.createElement(ScrollbarSize, {
        className: classes.scrollable,
        onChange: handleScrollbarSizeChange
      }) : null;
      var scrollButtonsActive = displayScroll.start || displayScroll.end;
      var showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === "desktop" || scrollButtons === "on");
      conditionalElements2.scrollButtonStart = showScrollButtons ? React132.createElement(ScrollButtonComponent, _extends({
        orientation,
        direction: isRtl ? "right" : "left",
        onClick: handleStartScrollClick,
        disabled: !displayScroll.start,
        className: clsx_m_default(classes.scrollButtons, scrollButtons !== "on" && classes.scrollButtonsDesktop)
      }, TabScrollButtonProps)) : null;
      conditionalElements2.scrollButtonEnd = showScrollButtons ? React132.createElement(ScrollButtonComponent, _extends({
        orientation,
        direction: isRtl ? "left" : "right",
        onClick: handleEndScrollClick,
        disabled: !displayScroll.end,
        className: clsx_m_default(classes.scrollButtons, scrollButtons !== "on" && classes.scrollButtonsDesktop)
      }, TabScrollButtonProps)) : null;
      return conditionalElements2;
    };
    var scrollSelectedIntoView = useEventCallback2(function() {
      var _getTabsMeta2 = getTabsMeta(), tabsMeta = _getTabsMeta2.tabsMeta, tabMeta = _getTabsMeta2.tabMeta;
      if (!tabMeta || !tabsMeta) {
        return;
      }
      if (tabMeta[start] < tabsMeta[start]) {
        var nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
        scroll(nextScrollStart);
      } else if (tabMeta[end] > tabsMeta[end]) {
        var _nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
        scroll(_nextScrollStart);
      }
    });
    var updateScrollButtonState = useEventCallback2(function() {
      if (scrollable && scrollButtons !== "off") {
        var _tabsRef$current = tabsRef.current, scrollTop = _tabsRef$current.scrollTop, scrollHeight = _tabsRef$current.scrollHeight, clientHeight = _tabsRef$current.clientHeight, scrollWidth = _tabsRef$current.scrollWidth, clientWidth = _tabsRef$current.clientWidth;
        var showStartScroll;
        var showEndScroll;
        if (vertical) {
          showStartScroll = scrollTop > 1;
          showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
        } else {
          var scrollLeft2 = getNormalizedScrollLeft(tabsRef.current, theme.direction);
          showStartScroll = isRtl ? scrollLeft2 < scrollWidth - clientWidth - 1 : scrollLeft2 > 1;
          showEndScroll = !isRtl ? scrollLeft2 < scrollWidth - clientWidth - 1 : scrollLeft2 > 1;
        }
        if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
          setDisplayScroll({
            start: showStartScroll,
            end: showEndScroll
          });
        }
      }
    });
    React132.useEffect(function() {
      var handleResize = debounce2(function() {
        updateIndicatorState();
        updateScrollButtonState();
      });
      var win = ownerWindow2(tabsRef.current);
      win.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        win.removeEventListener("resize", handleResize);
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    var handleTabsScroll = React132.useCallback(debounce2(function() {
      updateScrollButtonState();
    }));
    React132.useEffect(function() {
      return function() {
        handleTabsScroll.clear();
      };
    }, [handleTabsScroll]);
    React132.useEffect(function() {
      setMounted(true);
    }, []);
    React132.useEffect(function() {
      updateIndicatorState();
      updateScrollButtonState();
    });
    React132.useEffect(function() {
      scrollSelectedIntoView();
    }, [scrollSelectedIntoView, indicatorStyle]);
    React132.useImperativeHandle(action, function() {
      return {
        updateIndicator: updateIndicatorState,
        updateScrollButtons: updateScrollButtonState
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    var indicator = React132.createElement(TabIndicator_default, _extends({
      className: classes.indicator,
      orientation,
      color: indicatorColor
    }, TabIndicatorProps, {
      style: _extends({}, indicatorStyle, TabIndicatorProps.style)
    }));
    var childIndex = 0;
    var children = React132.Children.map(childrenProp, function(child) {
      if (!React132.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is11.isFragment(child)) {
          console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var childValue = child.props.value === void 0 ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      var selected = childValue === value;
      childIndex += 1;
      return React132.cloneElement(child, {
        fullWidth: variant === "fullWidth",
        indicator: selected && !mounted && indicator,
        selected,
        selectionFollowsFocus,
        onChange,
        textColor,
        value: childValue
      });
    });
    var handleKeyDown2 = function handleKeyDown3(event) {
      var target = event.target;
      var role = target.getAttribute("role");
      if (role !== "tab") {
        return;
      }
      var newFocusTarget = null;
      var previousItemKey = orientation !== "vertical" ? "ArrowLeft" : "ArrowUp";
      var nextItemKey = orientation !== "vertical" ? "ArrowRight" : "ArrowDown";
      if (orientation !== "vertical" && theme.direction === "rtl") {
        previousItemKey = "ArrowRight";
        nextItemKey = "ArrowLeft";
      }
      switch (event.key) {
        case previousItemKey:
          newFocusTarget = target.previousElementSibling || tabListRef.current.lastChild;
          break;
        case nextItemKey:
          newFocusTarget = target.nextElementSibling || tabListRef.current.firstChild;
          break;
        case "Home":
          newFocusTarget = tabListRef.current.firstChild;
          break;
        case "End":
          newFocusTarget = tabListRef.current.lastChild;
          break;
        default:
          break;
      }
      if (newFocusTarget !== null) {
        newFocusTarget.focus();
        event.preventDefault();
      }
    };
    var conditionalElements = getConditionalElements();
    return React132.createElement(Component7, _extends({
      className: clsx_m_default(classes.root, className, vertical && classes.vertical),
      ref
    }, other), conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, React132.createElement("div", {
      className: clsx_m_default(classes.scroller, scrollable ? classes.scrollable : classes.fixed),
      style: scrollerStyle,
      ref: tabsRef,
      onScroll: handleTabsScroll
    }, React132.createElement("div", {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      className: clsx_m_default(classes.flexContainer, vertical && classes.flexContainerVertical, centered && !scrollable && classes.centered),
      onKeyDown: handleKeyDown2,
      ref: tabListRef,
      role: "tablist"
    }, children), mounted && indicator), conditionalElements.scrollButtonEnd);
  });
  Tabs.propTypes = {
    action: refType_default,
    "aria-label": prop_types123.default.string,
    "aria-labelledby": prop_types123.default.string,
    centered: prop_types123.default.bool,
    children: prop_types123.default.node,
    classes: prop_types123.default.object,
    className: prop_types123.default.string,
    component: prop_types123.default.elementType,
    indicatorColor: prop_types123.default.oneOf(["primary", "secondary"]),
    onChange: prop_types123.default.func,
    orientation: prop_types123.default.oneOf(["horizontal", "vertical"]),
    ScrollButtonComponent: prop_types123.default.elementType,
    scrollButtons: prop_types123.default.oneOf(["auto", "desktop", "off", "on"]),
    selectionFollowsFocus: prop_types123.default.bool,
    TabIndicatorProps: prop_types123.default.object,
    TabScrollButtonProps: prop_types123.default.object,
    textColor: prop_types123.default.oneOf(["inherit", "primary", "secondary"]),
    value: prop_types123.default.any,
    variant: prop_types123.default.oneOf(["fullWidth", "scrollable", "standard"])
  };
  const Tabs_default = withStyles_default(styles113, {
    name: "MuiTabs"
  })(Tabs);

  // node_modules/@material-ui/core/esm/TextField/TextField.js
  const React133 = __toModule(require_react());
  const prop_types124 = __toModule(require_prop_types());
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var styles114 = {
    root: {}
  };
  var TextField = React133.forwardRef(function TextField4(props, ref) {
    var autoComplete = props.autoComplete, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color2 = _props$color === void 0 ? "primary" : _props$color, defaultValue = props.defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, FormHelperTextProps = props.FormHelperTextProps, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, helperText = props.helperText, hiddenLabel = props.hiddenLabel, id = props.id, InputLabelProps = props.InputLabelProps, inputProps = props.inputProps, InputProps = props.InputProps, inputRef = props.inputRef, label = props.label, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, placeholder = props.placeholder, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, rows = props.rows, rowsMax = props.rowsMax, _props$select = props.select, select = _props$select === void 0 ? false : _props$select, SelectProps = props.SelectProps, type = props.type, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);
    if (true) {
      if (select && !children) {
        console.error("Material-UI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    var InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      if (label) {
        var _InputLabelProps$requ;
        var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
        InputMore.label = React133.createElement(React133.Fragment, null, label, displayRequired && " *");
      }
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    var helperTextId = helperText && id ? "".concat(id, "-helper-text") : void 0;
    var inputLabelId = label && id ? "".concat(id, "-label") : void 0;
    var InputComponent = variantComponent[variant];
    var InputElement = React133.createElement(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      rowsMax,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return React133.createElement(FormControl_default, _extends({
      className: clsx_m_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      ref,
      required,
      color: color2,
      variant
    }, other), label && React133.createElement(InputLabel_default, _extends({
      htmlFor: id,
      id: inputLabelId
    }, InputLabelProps), label), select ? React133.createElement(Select_default, _extends({
      "aria-describedby": helperTextId,
      id,
      labelId: inputLabelId,
      value,
      input: InputElement
    }, SelectProps), children) : InputElement, helperText && React133.createElement(FormHelperText_default, _extends({
      id: helperTextId
    }, FormHelperTextProps), helperText));
  });
  TextField.propTypes = {
    autoComplete: prop_types124.default.string,
    autoFocus: prop_types124.default.bool,
    children: prop_types124.default.node,
    classes: prop_types124.default.object,
    className: prop_types124.default.string,
    color: prop_types124.default.oneOf(["primary", "secondary"]),
    defaultValue: prop_types124.default.any,
    disabled: prop_types124.default.bool,
    error: prop_types124.default.bool,
    FormHelperTextProps: prop_types124.default.object,
    fullWidth: prop_types124.default.bool,
    helperText: prop_types124.default.node,
    hiddenLabel: prop_types124.default.bool,
    id: prop_types124.default.string,
    InputLabelProps: prop_types124.default.object,
    inputProps: prop_types124.default.object,
    InputProps: prop_types124.default.object,
    inputRef: refType_default,
    label: prop_types124.default.node,
    margin: prop_types124.default.oneOf(["dense", "none", "normal"]),
    multiline: prop_types124.default.bool,
    name: prop_types124.default.string,
    onBlur: prop_types124.default.func,
    onChange: prop_types124.default.func,
    onFocus: prop_types124.default.func,
    placeholder: prop_types124.default.string,
    required: prop_types124.default.bool,
    rows: prop_types124.default.oneOfType([prop_types124.default.number, prop_types124.default.string]),
    rowsMax: prop_types124.default.oneOfType([prop_types124.default.number, prop_types124.default.string]),
    select: prop_types124.default.bool,
    SelectProps: prop_types124.default.object,
    size: prop_types124.default.oneOf(["medium", "small"]),
    type: prop_types124.default.string,
    value: prop_types124.default.any,
    variant: prop_types124.default.oneOf(["filled", "outlined", "standard"])
  };
  const TextField_default = withStyles_default(styles114, {
    name: "MuiTextField"
  })(TextField);

  // node_modules/@material-ui/core/esm/Tooltip/Tooltip.js
  const React136 = __toModule(require_react());
  const ReactDOM12 = __toModule(require_react_dom());
  const prop_types127 = __toModule(require_prop_types());
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  function arrowGenerator() {
    return {
      '&[x-placement*="bottom"] $arrow': {
        top: 0,
        left: 0,
        marginTop: "-0.71em",
        marginLeft: 4,
        marginRight: 4,
        "&::before": {
          transformOrigin: "0 100%"
        }
      },
      '&[x-placement*="top"] $arrow': {
        bottom: 0,
        left: 0,
        marginBottom: "-0.71em",
        marginLeft: 4,
        marginRight: 4,
        "&::before": {
          transformOrigin: "100% 0"
        }
      },
      '&[x-placement*="right"] $arrow': {
        left: 0,
        marginLeft: "-0.71em",
        height: "1em",
        width: "0.71em",
        marginTop: 4,
        marginBottom: 4,
        "&::before": {
          transformOrigin: "100% 100%"
        }
      },
      '&[x-placement*="left"] $arrow': {
        right: 0,
        marginRight: "-0.71em",
        height: "1em",
        width: "0.71em",
        marginTop: 4,
        marginBottom: 4,
        "&::before": {
          transformOrigin: "0 0"
        }
      }
    };
  }
  var styles117 = function styles131(theme) {
    return {
      popper: {
        zIndex: theme.zIndex.tooltip,
        pointerEvents: "none"
      },
      popperInteractive: {
        pointerEvents: "auto"
      },
      popperArrow: arrowGenerator(),
      tooltip: {
        backgroundColor: fade(theme.palette.grey[700], 0.9),
        borderRadius: theme.shape.borderRadius,
        color: theme.palette.common.white,
        fontFamily: theme.typography.fontFamily,
        padding: "4px 8px",
        fontSize: theme.typography.pxToRem(10),
        lineHeight: "".concat(round(14 / 10), "em"),
        maxWidth: 300,
        wordWrap: "break-word",
        fontWeight: theme.typography.fontWeightMedium
      },
      tooltipArrow: {
        position: "relative",
        margin: "0"
      },
      arrow: {
        overflow: "hidden",
        position: "absolute",
        width: "1em",
        height: "0.71em",
        boxSizing: "border-box",
        color: fade(theme.palette.grey[700], 0.9),
        "&::before": {
          content: '""',
          margin: "auto",
          display: "block",
          width: "100%",
          height: "100%",
          backgroundColor: "currentColor",
          transform: "rotate(45deg)"
        }
      },
      touch: {
        padding: "8px 16px",
        fontSize: theme.typography.pxToRem(14),
        lineHeight: "".concat(round(16 / 14), "em"),
        fontWeight: theme.typography.fontWeightRegular
      },
      tooltipPlacementLeft: _defineProperty({
        transformOrigin: "right center",
        margin: "0 24px "
      }, theme.breakpoints.up("sm"), {
        margin: "0 14px"
      }),
      tooltipPlacementRight: _defineProperty({
        transformOrigin: "left center",
        margin: "0 24px"
      }, theme.breakpoints.up("sm"), {
        margin: "0 14px"
      }),
      tooltipPlacementTop: _defineProperty({
        transformOrigin: "center bottom",
        margin: "24px 0"
      }, theme.breakpoints.up("sm"), {
        margin: "14px 0"
      }),
      tooltipPlacementBottom: _defineProperty({
        transformOrigin: "center top",
        margin: "24px 0"
      }, theme.breakpoints.up("sm"), {
        margin: "14px 0"
      })
    };
  };
  var hystersisOpen = false;
  var hystersisTimer = null;
  var Tooltip = React136.forwardRef(function Tooltip3(props, ref) {
    var _props$arrow = props.arrow, arrow2 = _props$arrow === void 0 ? false : _props$arrow, children = props.children, classes = props.classes, _props$disableFocusLi = props.disableFocusListener, disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi, _props$disableHoverLi = props.disableHoverListener, disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi, _props$disableTouchLi = props.disableTouchListener, disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi, _props$enterDelay = props.enterDelay, enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay, _props$enterNextDelay = props.enterNextDelay, enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay, _props$enterTouchDela = props.enterTouchDelay, enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela, idProp = props.id, _props$interactive = props.interactive, interactive = _props$interactive === void 0 ? false : _props$interactive, _props$leaveDelay = props.leaveDelay, leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay, _props$leaveTouchDela = props.leaveTouchDelay, leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela, onClose = props.onClose, onOpen = props.onOpen, openProp = props.open, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottom" : _props$placement, _props$PopperComponen = props.PopperComponent, PopperComponent = _props$PopperComponen === void 0 ? Popper_default : _props$PopperComponen, PopperProps = props.PopperProps, title = props.title, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Grow_default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["arrow", "children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"]);
    var theme = useTheme2();
    var _React$useState = React136.useState(), childNode = _React$useState[0], setChildNode = _React$useState[1];
    var _React$useState2 = React136.useState(null), arrowRef = _React$useState2[0], setArrowRef = _React$useState2[1];
    var ignoreNonTouchEvents = React136.useRef(false);
    var closeTimer = React136.useRef();
    var enterTimer = React136.useRef();
    var leaveTimer = React136.useRef();
    var touchTimer = React136.useRef();
    var _useControlled = useControlled2({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), openState = _useControlled2[0], setOpenState = _useControlled2[1];
    var open = openState;
    if (true) {
      var _React$useRef = React136.useRef(openProp !== void 0), isControlled = _React$useRef.current;
      React136.useEffect(function() {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["Material-UI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    var id = useId(idProp);
    React136.useEffect(function() {
      return function() {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        clearTimeout(touchTimer.current);
      };
    }, []);
    var handleOpen = function handleOpen2(event) {
      clearTimeout(hystersisTimer);
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    var handleEnter = function handleEnter2() {
      var forward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return function(event) {
        var childrenProps2 = children.props;
        if (event.type === "mouseover" && childrenProps2.onMouseOver && forward) {
          childrenProps2.onMouseOver(event);
        }
        if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
          return;
        }
        if (childNode) {
          childNode.removeAttribute("title");
        }
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        if (enterDelay || hystersisOpen && enterNextDelay) {
          event.persist();
          enterTimer.current = setTimeout(function() {
            handleOpen(event);
          }, hystersisOpen ? enterNextDelay : enterDelay);
        } else {
          handleOpen(event);
        }
      };
    };
    var _useIsFocusVisible = useIsFocusVisible2(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    var _React$useState3 = React136.useState(false), childIsFocusVisible = _React$useState3[0], setChildIsFocusVisible = _React$useState3[1];
    var handleBlur = function handleBlur2() {
      if (childIsFocusVisible) {
        setChildIsFocusVisible(false);
        onBlurVisible();
      }
    };
    var handleFocus = function handleFocus2() {
      var forward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return function(event) {
        if (!childNode) {
          setChildNode(event.currentTarget);
        }
        if (isFocusVisible2(event)) {
          setChildIsFocusVisible(true);
          handleEnter()(event);
        }
        var childrenProps2 = children.props;
        if (childrenProps2.onFocus && forward) {
          childrenProps2.onFocus(event);
        }
      };
    };
    var handleClose = function handleClose2(event) {
      clearTimeout(hystersisTimer);
      hystersisTimer = setTimeout(function() {
        hystersisOpen = false;
      }, 800 + leaveDelay);
      setOpenState(false);
      if (onClose) {
        onClose(event);
      }
      clearTimeout(closeTimer.current);
      closeTimer.current = setTimeout(function() {
        ignoreNonTouchEvents.current = false;
      }, theme.transitions.duration.shortest);
    };
    var handleLeave = function handleLeave2() {
      var forward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return function(event) {
        var childrenProps2 = children.props;
        if (event.type === "blur") {
          if (childrenProps2.onBlur && forward) {
            childrenProps2.onBlur(event);
          }
          handleBlur();
        }
        if (event.type === "mouseleave" && childrenProps2.onMouseLeave && event.currentTarget === childNode) {
          childrenProps2.onMouseLeave(event);
        }
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        event.persist();
        leaveTimer.current = setTimeout(function() {
          handleClose(event);
        }, leaveDelay);
      };
    };
    var detectTouchStart = function detectTouchStart2(event) {
      ignoreNonTouchEvents.current = true;
      var childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    var handleTouchStart = function handleTouchStart2(event) {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      clearTimeout(touchTimer.current);
      event.persist();
      touchTimer.current = setTimeout(function() {
        handleEnter()(event);
      }, enterTouchDelay);
    };
    var handleTouchEnd = function handleTouchEnd2(event) {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      clearTimeout(touchTimer.current);
      clearTimeout(leaveTimer.current);
      event.persist();
      leaveTimer.current = setTimeout(function() {
        handleClose(event);
      }, leaveTouchDelay);
    };
    var handleUseRef = useForkRef2(setChildNode, ref);
    var handleFocusRef = useForkRef2(focusVisibleRef, handleUseRef);
    var handleOwnRef = React136.useCallback(function(instance) {
      setRef2(handleFocusRef, ReactDOM12.findDOMNode(instance));
    }, [handleFocusRef]);
    var handleRef = useForkRef2(children.ref, handleOwnRef);
    if (title === "") {
      open = false;
    }
    var shouldShowNativeTitle = !open && !disableHoverListener;
    var childrenProps = _extends({
      "aria-describedby": open ? id : null,
      title: shouldShowNativeTitle && typeof title === "string" ? title : null
    }, other, children.props, {
      className: clsx_m_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    });
    var interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = handleEnter();
      childrenProps.onMouseLeave = handleLeave();
      if (interactive) {
        interactiveWrapperListeners.onMouseOver = handleEnter(false);
        interactiveWrapperListeners.onMouseLeave = handleLeave(false);
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = handleFocus();
      childrenProps.onBlur = handleLeave();
      if (interactive) {
        interactiveWrapperListeners.onFocus = handleFocus(false);
        interactiveWrapperListeners.onBlur = handleLeave(false);
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["Material-UI: You have provided a `title` prop to the child of <Tooltip />.", "Remove this title prop `".concat(children.props.title, "` or the Tooltip component.")].join("\n"));
      }
    }
    var mergedPopperProps = React136.useMemo(function() {
      return deepmerge({
        popperOptions: {
          modifiers: {
            arrow: {
              enabled: Boolean(arrowRef),
              element: arrowRef
            }
          }
        }
      }, PopperProps);
    }, [arrowRef, PopperProps]);
    return React136.createElement(React136.Fragment, null, React136.cloneElement(children, childrenProps), React136.createElement(PopperComponent, _extends({
      className: clsx_m_default(classes.popper, interactive && classes.popperInteractive, arrow2 && classes.popperArrow),
      placement,
      anchorEl: childNode,
      open: childNode ? open : false,
      id: childrenProps["aria-describedby"],
      transition: true
    }, interactiveWrapperListeners, mergedPopperProps), function(_ref6) {
      var placementInner = _ref6.placement, TransitionPropsInner = _ref6.TransitionProps;
      return React136.createElement(TransitionComponent, _extends({
        timeout: theme.transitions.duration.shorter
      }, TransitionPropsInner, TransitionProps), React136.createElement("div", {
        className: clsx_m_default(classes.tooltip, classes["tooltipPlacement".concat(capitalize2(placementInner.split("-")[0]))], ignoreNonTouchEvents.current && classes.touch, arrow2 && classes.tooltipArrow)
      }, title, arrow2 ? React136.createElement("span", {
        className: classes.arrow,
        ref: setArrowRef
      }) : null));
    }));
  });
  Tooltip.propTypes = {
    arrow: prop_types127.default.bool,
    children: elementAcceptingRef_default.isRequired,
    classes: prop_types127.default.object,
    className: prop_types127.default.string,
    disableFocusListener: prop_types127.default.bool,
    disableHoverListener: prop_types127.default.bool,
    disableTouchListener: prop_types127.default.bool,
    enterDelay: prop_types127.default.number,
    enterNextDelay: prop_types127.default.number,
    enterTouchDelay: prop_types127.default.number,
    id: prop_types127.default.string,
    interactive: prop_types127.default.bool,
    leaveDelay: prop_types127.default.number,
    leaveTouchDelay: prop_types127.default.number,
    onClose: prop_types127.default.func,
    onOpen: prop_types127.default.func,
    open: prop_types127.default.bool,
    placement: prop_types127.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    PopperComponent: prop_types127.default.elementType,
    PopperProps: prop_types127.default.object,
    title: prop_types127.default.node.isRequired,
    TransitionComponent: prop_types127.default.elementType,
    TransitionProps: prop_types127.default.object
  };
  const Tooltip_default = withStyles_default(styles117, {
    name: "MuiTooltip",
    flip: false
  })(Tooltip);

  // node_modules/@material-ui/core/esm/useScrollTrigger/useScrollTrigger.js
  const React157 = __toModule(require_react());
  function defaultTrigger(store, options) {
    var _options$disableHyste = options.disableHysteresis, disableHysteresis = _options$disableHyste === void 0 ? false : _options$disableHyste, _options$threshold = options.threshold, threshold = _options$threshold === void 0 ? 100 : _options$threshold, target = options.target;
    var previous = store.current;
    if (target) {
      store.current = target.pageYOffset !== void 0 ? target.pageYOffset : target.scrollTop;
    }
    if (!disableHysteresis && previous !== void 0) {
      if (store.current < previous) {
        return false;
      }
    }
    return store.current > threshold;
  }
  var defaultTarget = typeof window !== "undefined" ? window : null;
  function useScrollTrigger2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _options$getTrigger = options.getTrigger, getTrigger = _options$getTrigger === void 0 ? defaultTrigger : _options$getTrigger, _options$target = options.target, target = _options$target === void 0 ? defaultTarget : _options$target, other = _objectWithoutProperties(options, ["getTrigger", "target"]);
    var store = React157.useRef();
    var _React$useState = React157.useState(function() {
      return getTrigger(store, other);
    }), trigger = _React$useState[0], setTrigger = _React$useState[1];
    React157.useEffect(function() {
      var handleScroll = function handleScroll2() {
        setTrigger(getTrigger(store, _extends({
          target
        }, other)));
      };
      handleScroll();
      target.addEventListener("scroll", handleScroll);
      return function() {
        target.removeEventListener("scroll", handleScroll);
      };
    }, [target, getTrigger, JSON.stringify(other)]);
    return trigger;
  }

  // node_modules/@material-ui/core/esm/withMobileDialog/withMobileDialog.js
  const React165 = __toModule(require_react());
  const prop_types132 = __toModule(require_prop_types());
  var withMobileDialog2 = function withMobileDialog3() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return function(Component7) {
      var _options$breakpoint = options.breakpoint, breakpoint = _options$breakpoint === void 0 ? "sm" : _options$breakpoint;
      function WithMobileDialog(props) {
        return React165.createElement(Component7, _extends({
          fullScreen: isWidthDown(breakpoint, props.width)
        }, props));
      }
      WithMobileDialog.propTypes = {
        width: prop_types132.default.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired
      };
      return withWidth_default()(WithMobileDialog);
    };
  };
  const withMobileDialog_default = withMobileDialog2;

  // node_modules/@material-ui/core/esm/Zoom/Zoom.js
  const React139 = __toModule(require_react());
  const prop_types130 = __toModule(require_prop_types());
  var styles119 = {
    entering: {
      transform: "none"
    },
    entered: {
      transform: "none"
    }
  };
  var defaultTimeout3 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Zoom = React139.forwardRef(function Zoom3(props, ref) {
    var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style13 = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout3 : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var theme = useTheme2();
    var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React139.useRef(null);
    var foreignRef = useForkRef2(children.ref, ref);
    var handleRef = useForkRef2(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref6 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref24 = _slicedToArray(_ref6, 2), node = _ref24[0], isAppearing = _ref24[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      reflow(node);
      var transitionProps = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme.transitions.create("transform", transitionProps);
      node.style.transition = theme.transitions.create("transform", transitionProps);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var transitionProps = getTransitionProps({
        style: style13,
        timeout
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme.transitions.create("transform", transitionProps);
      node.style.transition = theme.transitions.create("transform", transitionProps);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    return React139.createElement(TransitionComponent, _extends({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      timeout
    }, other), function(state, childProps) {
      return React139.cloneElement(children, _extends({
        style: _extends({
          transform: "scale(0)",
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles119[state], style13, children.props.style),
        ref: handleRef
      }, childProps));
    });
  });
  Zoom.propTypes = {
    children: prop_types130.default.element,
    disableStrictModeCompat: prop_types130.default.bool,
    in: prop_types130.default.bool,
    onEnter: prop_types130.default.func,
    onEntered: prop_types130.default.func,
    onEntering: prop_types130.default.func,
    onExit: prop_types130.default.func,
    onExited: prop_types130.default.func,
    onExiting: prop_types130.default.func,
    style: prop_types130.default.object,
    timeout: prop_types130.default.oneOfType([prop_types130.default.number, prop_types130.default.shape({
      appear: prop_types130.default.number,
      enter: prop_types130.default.number,
      exit: prop_types130.default.number
    })])
  };
  const Zoom_default = Zoom;

  // src/components/NavBar.js
  const react22 = __toModule(require_react());
  const core = __toModule(require_esm());
  const NavBar = () => {
    return react22.default.createElement("div", null, react22.default.createElement(core.AppBar, {
      position: "static"
    }, react22.default.createElement(core.Toolbar, null, react22.default.createElement(core.Typography, {
      variant: "title",
      color: "inherit"
    }, "React & Material-UI Sample Application"))));
  };
  const NavBar_default = NavBar;

  // src/components/SignIn.js
  const react23 = __toModule(require_react());
  const LockOutlined = __toModule(require_LockOutlined());
  function Copyright() {
    return react23.default.createElement(Typography_default, {
      variant: "body2",
      color: "textSecondary",
      align: "center"
    }, "Copyright © ", react23.default.createElement(Link_default, {
      color: "inherit",
      href: "https://material-ui.com/"
    }, "Your Website"), " ", new Date().getFullYear(), ".");
  }
  const useStyles = makeStyles_default((theme) => ({
    paper: {
      marginTop: theme.spacing(8),
      display: "flex",
      flexDirection: "column",
      alignItems: "center"
    },
    avatar: {
      margin: theme.spacing(1),
      backgroundColor: theme.palette.secondary.main
    },
    form: {
      width: "100%",
      marginTop: theme.spacing(1)
    },
    submit: {
      margin: theme.spacing(3, 0, 2)
    }
  }));
  function SignIn() {
    const classes = useStyles();
    return react23.default.createElement(Container_default, {
      component: "main",
      maxWidth: "xs"
    }, react23.default.createElement(CssBaseline_default, null), react23.default.createElement("div", {
      className: classes.paper
    }, react23.default.createElement(Avatar_default, {
      className: classes.avatar
    }, react23.default.createElement(LockOutlined.default, null)), react23.default.createElement(Typography_default, {
      component: "h1",
      variant: "h5"
    }, "Sign in"), react23.default.createElement("form", {
      className: classes.form,
      noValidate: true
    }, react23.default.createElement(TextField_default, {
      variant: "outlined",
      margin: "normal",
      required: true,
      fullWidth: true,
      id: "email",
      label: "Email Address",
      name: "email",
      autoComplete: "email",
      autoFocus: true
    }), react23.default.createElement(TextField_default, {
      variant: "outlined",
      margin: "normal",
      required: true,
      fullWidth: true,
      name: "password",
      label: "Password",
      type: "password",
      id: "password",
      autoComplete: "current-password"
    }), react23.default.createElement(FormControlLabel_default, {
      control: react23.default.createElement(Checkbox_default, {
        value: "remember",
        color: "primary"
      }),
      label: "Remember me"
    }), react23.default.createElement(Button_default, {
      type: "submit",
      fullWidth: true,
      variant: "contained",
      color: "primary",
      className: classes.submit
    }, "Sign In"), react23.default.createElement(Grid_default, {
      container: true
    }, react23.default.createElement(Grid_default, {
      item: true,
      xs: true
    }, react23.default.createElement(Link_default, {
      href: "#",
      variant: "body2"
    }, "Forgot password?")), react23.default.createElement(Grid_default, {
      item: true
    }, react23.default.createElement(Link_default, {
      href: "#",
      variant: "body2"
    }, "Don't have an account? Sign Up"))))), react23.default.createElement(Box_default, {
      mt: 8
    }, react23.default.createElement(Copyright, null)));
  }

  // src/pages/sign_in_employee.js
  const react24 = __toModule(require_react());
  function sign_in_employee() {
    return react24.default.createElement("div", {
      className: "sign_in_employee"
    }, react24.default.createElement("p", null, SignIn()));
  }
  const sign_in_employee_default = sign_in_employee;

  // node_modules/resolve-pathname/esm/resolve-pathname.js
  function isAbsolute(pathname) {
    return pathname.charAt(0) === "/";
  }
  function spliceOne(list, index3) {
    for (var i = index3, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
      list[i] = list[k];
    }
    list.pop();
  }
  function resolvePathname(to, from) {
    if (from === void 0)
      from = "";
    var toParts = to && to.split("/") || [];
    var fromParts = from && from.split("/") || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) {
      fromParts = toParts;
    } else if (toParts.length) {
      fromParts.pop();
      fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length)
      return "/";
    var hasTrailingSlash;
    if (fromParts.length) {
      var last = fromParts[fromParts.length - 1];
      hasTrailingSlash = last === "." || last === ".." || last === "";
    } else {
      hasTrailingSlash = false;
    }
    var up = 0;
    for (var i = fromParts.length; i >= 0; i--) {
      var part = fromParts[i];
      if (part === ".") {
        spliceOne(fromParts, i);
      } else if (part === "..") {
        spliceOne(fromParts, i);
        up++;
      } else if (up) {
        spliceOne(fromParts, i);
        up--;
      }
    }
    if (!mustEndAbs)
      for (; up--; up)
        fromParts.unshift("..");
    if (mustEndAbs && fromParts[0] !== "" && (!fromParts[0] || !isAbsolute(fromParts[0])))
      fromParts.unshift("");
    var result = fromParts.join("/");
    if (hasTrailingSlash && result.substr(-1) !== "/")
      result += "/";
    return result;
  }
  const resolve_pathname_default = resolvePathname;

  // node_modules/value-equal/esm/value-equal.js
  function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
  }
  function valueEqual(a, b) {
    if (a === b)
      return true;
    if (a == null || b == null)
      return false;
    if (Array.isArray(a)) {
      return Array.isArray(b) && a.length === b.length && a.every(function(item, index3) {
        return valueEqual(item, b[index3]);
      });
    }
    if (typeof a === "object" || typeof b === "object") {
      var aValue = valueOf(a);
      var bValue = valueOf(b);
      if (aValue !== a || bValue !== b)
        return valueEqual(aValue, bValue);
      return Object.keys(Object.assign({}, a, b)).every(function(key3) {
        return valueEqual(a[key3], b[key3]);
      });
    }
    return false;
  }
  const value_equal_default = valueEqual;

  // node_modules/tiny-invariant/dist/tiny-invariant.esm.js
  var isProduction = false;
  var prefix2 = "Invariant failed";
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix2);
    }
    throw new Error(prefix2 + ": " + (message || ""));
  }
  const tiny_invariant_esm_default = invariant;

  // node_modules/history/esm/history.js
  function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }
  function stripLeadingSlash(path) {
    return path.charAt(0) === "/" ? path.substr(1) : path;
  }
  function hasBasename(path, prefix3) {
    return path.toLowerCase().indexOf(prefix3.toLowerCase()) === 0 && "/?#".indexOf(path.charAt(prefix3.length)) !== -1;
  }
  function stripBasename(path, prefix3) {
    return hasBasename(path, prefix3) ? path.substr(prefix3.length) : path;
  }
  function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === "/" ? path.slice(0, -1) : path;
  }
  function parsePath(path) {
    var pathname = path || "/";
    var search = "";
    var hash = "";
    var hashIndex = pathname.indexOf("#");
    if (hashIndex !== -1) {
      hash = pathname.substr(hashIndex);
      pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf("?");
    if (searchIndex !== -1) {
      search = pathname.substr(searchIndex);
      pathname = pathname.substr(0, searchIndex);
    }
    return {
      pathname,
      search: search === "?" ? "" : search,
      hash: hash === "#" ? "" : hash
    };
  }
  function createPath(location) {
    var pathname = location.pathname, search = location.search, hash = location.hash;
    var path = pathname || "/";
    if (search && search !== "?")
      path += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      path += hash.charAt(0) === "#" ? hash : "#" + hash;
    return path;
  }
  function createLocation(path, state, key3, currentLocation) {
    var location;
    if (typeof path === "string") {
      location = parsePath(path);
      location.state = state;
    } else {
      location = _extends({}, path);
      if (location.pathname === void 0)
        location.pathname = "";
      if (location.search) {
        if (location.search.charAt(0) !== "?")
          location.search = "?" + location.search;
      } else {
        location.search = "";
      }
      if (location.hash) {
        if (location.hash.charAt(0) !== "#")
          location.hash = "#" + location.hash;
      } else {
        location.hash = "";
      }
      if (state !== void 0 && location.state === void 0)
        location.state = state;
    }
    try {
      location.pathname = decodeURI(location.pathname);
    } catch (e) {
      if (e instanceof URIError) {
        throw new URIError('Pathname "' + location.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.');
      } else {
        throw e;
      }
    }
    if (key3)
      location.key = key3;
    if (currentLocation) {
      if (!location.pathname) {
        location.pathname = currentLocation.pathname;
      } else if (location.pathname.charAt(0) !== "/") {
        location.pathname = resolve_pathname_default(location.pathname, currentLocation.pathname);
      }
    } else {
      if (!location.pathname) {
        location.pathname = "/";
      }
    }
    return location;
  }
  function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && value_equal_default(a.state, b.state);
  }
  function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
      tiny_warning_esm_default(prompt == null, "A history supports only one prompt at a time");
      prompt = nextPrompt;
      return function() {
        if (prompt === nextPrompt)
          prompt = null;
      };
    }
    function confirmTransitionTo(location, action, getUserConfirmation, callback) {
      if (prompt != null) {
        var result = typeof prompt === "function" ? prompt(location, action) : prompt;
        if (typeof result === "string") {
          if (typeof getUserConfirmation === "function") {
            getUserConfirmation(result, callback);
          } else {
            tiny_warning_esm_default(false, "A history needs a getUserConfirmation function in order to use a prompt message");
            callback(true);
          }
        } else {
          callback(result !== false);
        }
      } else {
        callback(true);
      }
    }
    var listeners = [];
    function appendListener(fn) {
      var isActive = true;
      function listener() {
        if (isActive)
          fn.apply(void 0, arguments);
      }
      listeners.push(listener);
      return function() {
        isActive = false;
        listeners = listeners.filter(function(item) {
          return item !== listener;
        });
      };
    }
    function notifyListeners() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      listeners.forEach(function(listener) {
        return listener.apply(void 0, args);
      });
    }
    return {
      setPrompt,
      confirmTransitionTo,
      appendListener,
      notifyListeners
    };
  }
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  function getConfirmation(message, callback) {
    callback(window.confirm(message));
  }
  function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1)
      return false;
    return window.history && "pushState" in window.history;
  }
  function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf("Trident") === -1;
  }
  function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf("Firefox") === -1;
  }
  function isExtraneousPopstateEvent(event) {
    return event.state === void 0 && navigator.userAgent.indexOf("CriOS") === -1;
  }
  var PopStateEvent = "popstate";
  var HashChangeEvent = "hashchange";
  function getHistoryState() {
    try {
      return window.history.state || {};
    } catch (e) {
      return {};
    }
  }
  function createBrowserHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? tiny_invariant_esm_default(false, "Browser history needs a DOM") : void 0;
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    function getDOMLocation(historyState) {
      var _ref6 = historyState || {}, key3 = _ref6.key, state = _ref6.state;
      var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
      var path = pathname + search + hash;
      tiny_warning_esm_default(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
      if (basename)
        path = stripBasename(path, basename);
      return createLocation(path, state, key3);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = globalHistory.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    function handlePopState(event) {
      if (isExtraneousPopstateEvent(event))
        return;
      handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
      handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location
            });
          } else {
            revertPop(location);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history3.location;
      var toIndex = allKeys.indexOf(toLocation.key);
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allKeys.indexOf(fromLocation.key);
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];
    function createHref(location) {
      return basename + createPath(location);
    }
    function push(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "PUSH";
      var location = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location);
        var key3 = location.key, state2 = location.state;
        if (canUseHistory) {
          globalHistory.pushState({
            key: key3,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.href = href;
          } else {
            var prevIndex = allKeys.indexOf(history3.location.key);
            var nextKeys = allKeys.slice(0, prevIndex + 1);
            nextKeys.push(location.key);
            allKeys = nextKeys;
            setState({
              action,
              location
            });
          }
        } else {
          tiny_warning_esm_default(state2 === void 0, "Browser history cannot push state in browsers that do not support HTML5 history");
          window.location.href = href;
        }
      });
    }
    function replace(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "REPLACE";
      var location = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location);
        var key3 = location.key, state2 = location.state;
        if (canUseHistory) {
          globalHistory.replaceState({
            key: key3,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.replace(href);
          } else {
            var prevIndex = allKeys.indexOf(history3.location.key);
            if (prevIndex !== -1)
              allKeys[prevIndex] = location.key;
            setState({
              action,
              location
            });
          }
        } else {
          tiny_warning_esm_default(state2 === void 0, "Browser history cannot replace state in browsers that do not support HTML5 history");
          window.location.replace(href);
        }
      });
    }
    function go(n) {
      globalHistory.go(n);
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.addEventListener(HashChangeEvent, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.removeEventListener(HashChangeEvent, handleHashChange);
      }
    }
    var isBlocked = false;
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history3 = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      block,
      listen
    };
    return history3;
  }
  var HashChangeEvent$1 = "hashchange";
  var HashPathCoders = {
    hashbang: {
      encodePath: function encodePath(path) {
        return path.charAt(0) === "!" ? path : "!/" + stripLeadingSlash(path);
      },
      decodePath: function decodePath(path) {
        return path.charAt(0) === "!" ? path.substr(1) : path;
      }
    },
    noslash: {
      encodePath: stripLeadingSlash,
      decodePath: addLeadingSlash
    },
    slash: {
      encodePath: addLeadingSlash,
      decodePath: addLeadingSlash
    }
  };
  function stripHash(url) {
    var hashIndex = url.indexOf("#");
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
  }
  function getHashPath() {
    var href = window.location.href;
    var hashIndex = href.indexOf("#");
    return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
  }
  function pushHashPath(path) {
    window.location.hash = path;
  }
  function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + "#" + path);
  }
  function createHashHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? tiny_invariant_esm_default(false, "Hash history needs a DOM") : void 0;
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
      var path2 = decodePath(getHashPath());
      tiny_warning_esm_default(!basename || hasBasename(path2, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path2 + '" to begin with "' + basename + '".');
      if (basename)
        path2 = stripBasename(path2, basename);
      return createLocation(path2);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = globalHistory.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a, b) {
      return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
    }
    function handleHashChange() {
      var path2 = getHashPath();
      var encodedPath2 = encodePath(path2);
      if (path2 !== encodedPath2) {
        replaceHashPath(encodedPath2);
      } else {
        var location = getDOMLocation();
        var prevLocation = history3.location;
        if (!forceNextPop && locationsAreEqual$$1(prevLocation, location))
          return;
        if (ignorePath === createPath(location))
          return;
        ignorePath = null;
        handlePop(location);
      }
    }
    function handlePop(location) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location
            });
          } else {
            revertPop(location);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history3.location;
      var toIndex = allPaths.lastIndexOf(createPath(toLocation));
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath)
      replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [createPath(initialLocation)];
    function createHref(location) {
      var baseTag = document.querySelector("base");
      var href = "";
      if (baseTag && baseTag.getAttribute("href")) {
        href = stripHash(window.location.href);
      }
      return href + "#" + encodePath(basename + createPath(location));
    }
    function push(path2, state) {
      tiny_warning_esm_default(state === void 0, "Hash history cannot push state; it is ignored");
      var action = "PUSH";
      var location = createLocation(path2, void 0, void 0, history3.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path3 = createPath(location);
        var encodedPath2 = encodePath(basename + path3);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path3;
          pushHashPath(encodedPath2);
          var prevIndex = allPaths.lastIndexOf(createPath(history3.location));
          var nextPaths = allPaths.slice(0, prevIndex + 1);
          nextPaths.push(path3);
          allPaths = nextPaths;
          setState({
            action,
            location
          });
        } else {
          tiny_warning_esm_default(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack");
          setState();
        }
      });
    }
    function replace(path2, state) {
      tiny_warning_esm_default(state === void 0, "Hash history cannot replace state; it is ignored");
      var action = "REPLACE";
      var location = createLocation(path2, void 0, void 0, history3.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path3 = createPath(location);
        var encodedPath2 = encodePath(basename + path3);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path3;
          replaceHashPath(encodedPath2);
        }
        var prevIndex = allPaths.indexOf(createPath(history3.location));
        if (prevIndex !== -1)
          allPaths[prevIndex] = path3;
        setState({
          action,
          location
        });
      });
    }
    function go(n) {
      tiny_warning_esm_default(canGoWithoutReload, "Hash history go(n) causes a full page reload in this browser");
      globalHistory.go(n);
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(HashChangeEvent$1, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(HashChangeEvent$1, handleHashChange);
      }
    }
    var isBlocked = false;
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history3 = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      block,
      listen
    };
    return history3;
  }
  function clamp3(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
  }
  function createMemoryHistory(props) {
    if (props === void 0) {
      props = {};
    }
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ["/"] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = history3.entries.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var index3 = clamp3(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
      return typeof entry === "string" ? createLocation(entry, void 0, createKey()) : createLocation(entry, void 0, entry.key || createKey());
    });
    var createHref = createPath;
    function push(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "PUSH";
      var location = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var prevIndex = history3.index;
        var nextIndex = prevIndex + 1;
        var nextEntries = history3.entries.slice(0);
        if (nextEntries.length > nextIndex) {
          nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
        } else {
          nextEntries.push(location);
        }
        setState({
          action,
          location,
          index: nextIndex,
          entries: nextEntries
        });
      });
    }
    function replace(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "REPLACE";
      var location = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        history3.entries[history3.index] = location;
        setState({
          action,
          location
        });
      });
    }
    function go(n) {
      var nextIndex = clamp3(history3.index + n, 0, history3.entries.length - 1);
      var action = "POP";
      var location = history3.entries[nextIndex];
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location,
            index: nextIndex
          });
        } else {
          setState();
        }
      });
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    function canGo(n) {
      var nextIndex = history3.index + n;
      return nextIndex >= 0 && nextIndex < history3.entries.length;
    }
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
      return transitionManager.appendListener(listener);
    }
    var history3 = {
      length: entries.length,
      action: "POP",
      location: entries[index3],
      index: index3,
      entries,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      canGo,
      block,
      listen
    };
    return history3;
  }

  // node_modules/mini-create-react-context/dist/esm/index.js
  const react12 = __toModule(require_react());
  const prop_types144 = __toModule(require_prop_types());
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  function getUniqueId() {
    var key3 = "__global_unique_id__";
    return commonjsGlobal[key3] = (commonjsGlobal[key3] || 0) + 1;
  }
  function objectIs(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function(h) {
          return h !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function(handler) {
          return handler(value, changedBits);
        });
      }
    };
  }
  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }
  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = "__create-react-context-" + getUniqueId() + "__";
    var Provider = function(_Component) {
      _inheritsLoose(Provider2, _Component);
      function Provider2() {
        var _this;
        _this = _Component.apply(this, arguments) || this;
        _this.emitter = createEventEmitter(_this.props.value);
        return _this;
      }
      var _proto = Provider2.prototype;
      _proto.getChildContext = function getChildContext() {
        var _ref6;
        return _ref6 = {}, _ref6[contextProp] = this.emitter, _ref6;
      };
      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits;
          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === "function" ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if (true) {
              tiny_warning_esm_default((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
            }
            changedBits |= 0;
            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };
      _proto.render = function render() {
        return this.props.children;
      };
      return Provider2;
    }(react12.Component);
    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types144.default.object.isRequired, _Provider$childContex);
    var Consumer = function(_Component2) {
      _inheritsLoose(Consumer2, _Component2);
      function Consumer2() {
        var _this2;
        _this2 = _Component2.apply(this, arguments) || this;
        _this2.state = {
          value: _this2.getValue()
        };
        _this2.onUpdate = function(newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;
          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        };
        return _this2;
      }
      var _proto2 = Consumer2.prototype;
      _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };
      _proto2.getValue = function getValue2() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };
      _proto2.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };
      return Consumer2;
    }(react12.Component);
    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types144.default.object, _Consumer$contextType);
    return {
      Provider,
      Consumer
    };
  }
  var index2 = react12.default.createContext || createReactContext;
  const esm_default = index2;

  // node_modules/react-router/esm/react-router.js
  const react14 = __toModule(require_react());
  const prop_types146 = __toModule(require_prop_types());
  const path_to_regexp = __toModule(require_path_to_regexp());
  const react_is13 = __toModule(require_react_is());
  const hoist_non_react_statics5 = __toModule(require_hoist_non_react_statics_cjs());
  var createNamedContext = function createNamedContext2(name) {
    var context2 = esm_default();
    context2.displayName = name;
    return context2;
  };
  var historyContext = createNamedContext("Router-History");
  var createNamedContext$1 = function createNamedContext2(name) {
    var context2 = esm_default();
    context2.displayName = name;
    return context2;
  };
  var context = createNamedContext$1("Router");
  var Router = function(_React$Component) {
    _inheritsLoose(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
      return {
        path: "/",
        url: "/",
        params: {},
        isExact: pathname === "/"
      };
    };
    function Router2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this.state = {
        location: props.history.location
      };
      _this._isMounted = false;
      _this._pendingLocation = null;
      if (!props.staticContext) {
        _this.unlisten = props.history.listen(function(location) {
          if (_this._isMounted) {
            _this.setState({
              location
            });
          } else {
            _this._pendingLocation = location;
          }
        });
      }
      return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._isMounted = true;
      if (this._pendingLocation) {
        this.setState({
          location: this._pendingLocation
        });
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.unlisten)
        this.unlisten();
    };
    _proto.render = function render() {
      return react14.default.createElement(context.Provider, {
        value: {
          history: this.props.history,
          location: this.state.location,
          match: Router2.computeRootMatch(this.state.location.pathname),
          staticContext: this.props.staticContext
        }
      }, react14.default.createElement(historyContext.Provider, {
        children: this.props.children || null,
        value: this.props.history
      }));
    };
    return Router2;
  }(react14.default.Component);
  if (true) {
    Router.propTypes = {
      children: prop_types146.default.node,
      history: prop_types146.default.object.isRequired,
      staticContext: prop_types146.default.object
    };
    Router.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(prevProps.history === this.props.history, "You cannot change <Router history>");
    };
  }
  var MemoryRouter = function(_React$Component) {
    _inheritsLoose(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createMemoryHistory(_this.props);
      return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
      return react14.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return MemoryRouter2;
  }(react14.default.Component);
  if (true) {
    MemoryRouter.propTypes = {
      initialEntries: prop_types146.default.array,
      initialIndex: prop_types146.default.number,
      getUserConfirmation: prop_types146.default.func,
      keyLength: prop_types146.default.number,
      children: prop_types146.default.node
    };
    MemoryRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
    };
  }
  var Lifecycle = function(_React$Component) {
    _inheritsLoose(Lifecycle2, _React$Component);
    function Lifecycle2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      if (this.props.onMount)
        this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.onUpdate)
        this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.props.onUnmount)
        this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
      return null;
    };
    return Lifecycle2;
  }(react14.default.Component);
  function Prompt(_ref6) {
    var message = _ref6.message, _ref$when = _ref6.when, when = _ref$when === void 0 ? true : _ref$when;
    return react14.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <Prompt> outside a <Router>") : void 0;
      if (!when || context2.staticContext)
        return null;
      var method = context2.history.block;
      return react14.default.createElement(Lifecycle, {
        onMount: function onMount(self2) {
          self2.release = method(message);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          if (prevProps.message !== message) {
            self2.release();
            self2.release = method(message);
          }
        },
        onUnmount: function onUnmount(self2) {
          self2.release();
        },
        message
      });
    });
  }
  if (true) {
    var messageType = prop_types146.default.oneOfType([prop_types146.default.func, prop_types146.default.string]);
    Prompt.propTypes = {
      when: prop_types146.default.bool,
      message: messageType.isRequired
    };
  }
  var cache3 = {};
  var cacheLimit = 1e4;
  var cacheCount = 0;
  function compilePath(path) {
    if (cache3[path])
      return cache3[path];
    var generator = path_to_regexp.default.compile(path);
    if (cacheCount < cacheLimit) {
      cache3[path] = generator;
      cacheCount++;
    }
    return generator;
  }
  function generatePath(path, params) {
    if (path === void 0) {
      path = "/";
    }
    if (params === void 0) {
      params = {};
    }
    return path === "/" ? path : compilePath(path)(params, {
      pretty: true
    });
  }
  function Redirect(_ref6) {
    var computedMatch = _ref6.computedMatch, to = _ref6.to, _ref$push = _ref6.push, push = _ref$push === void 0 ? false : _ref$push;
    return react14.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <Redirect> outside a <Router>") : void 0;
      var history3 = context2.history, staticContext = context2.staticContext;
      var method = push ? history3.push : history3.replace;
      var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
        pathname: generatePath(to.pathname, computedMatch.params)
      }) : to);
      if (staticContext) {
        method(location);
        return null;
      }
      return react14.default.createElement(Lifecycle, {
        onMount: function onMount() {
          method(location);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          var prevLocation = createLocation(prevProps.to);
          if (!locationsAreEqual(prevLocation, _extends({}, location, {
            key: prevLocation.key
          }))) {
            method(location);
          }
        },
        to
      });
    });
  }
  if (true) {
    Redirect.propTypes = {
      push: prop_types146.default.bool,
      from: prop_types146.default.string,
      to: prop_types146.default.oneOfType([prop_types146.default.string, prop_types146.default.object]).isRequired
    };
  }
  var cache$12 = {};
  var cacheLimit$1 = 1e4;
  var cacheCount$1 = 0;
  function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$12[cacheKey] || (cache$12[cacheKey] = {});
    if (pathCache[path])
      return pathCache[path];
    var keys2 = [];
    var regexp = path_to_regexp.default(path, keys2, options);
    var result = {
      regexp,
      keys: keys2
    };
    if (cacheCount$1 < cacheLimit$1) {
      pathCache[path] = result;
      cacheCount$1++;
    }
    return result;
  }
  function matchPath(pathname, options) {
    if (options === void 0) {
      options = {};
    }
    if (typeof options === "string" || Array.isArray(options)) {
      options = {
        path: options
      };
    }
    var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function(matched, path2) {
      if (!path2 && path2 !== "")
        return null;
      if (matched)
        return matched;
      var _compilePath = compilePath$1(path2, {
        end: exact,
        strict,
        sensitive
      }), regexp = _compilePath.regexp, keys2 = _compilePath.keys;
      var match = regexp.exec(pathname);
      if (!match)
        return null;
      var url = match[0], values3 = match.slice(1);
      var isExact = pathname === url;
      if (exact && !isExact)
        return null;
      return {
        path: path2,
        url: path2 === "/" && url === "" ? "/" : url,
        isExact,
        params: keys2.reduce(function(memo2, key3, index3) {
          memo2[key3.name] = values3[index3];
          return memo2;
        }, {})
      };
    }, null);
  }
  function isEmptyChildren(children) {
    return react14.default.Children.count(children) === 0;
  }
  function evalChildrenDev(children, props, path) {
    var value = children(props);
    tiny_warning_esm_default(value !== void 0, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? ' path="' + path + '"' : "") + ">, but you ") + "should have returned a React element or `null`");
    return value || null;
  }
  var Route = function(_React$Component) {
    _inheritsLoose(Route2, _React$Component);
    function Route2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route2.prototype;
    _proto.render = function render() {
      var _this = this;
      return react14.default.createElement(context.Consumer, null, function(context$1) {
        !context$1 ? tiny_invariant_esm_default(false, "You should not use <Route> outside a <Router>") : void 0;
        var location = _this.props.location || context$1.location;
        var match = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
        var props = _extends({}, context$1, {
          location,
          match
        });
        var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render2 = _this$props.render;
        if (Array.isArray(children) && children.length === 0) {
          children = null;
        }
        return react14.default.createElement(context.Provider, {
          value: props
        }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component ? react14.default.createElement(component, props) : render2 ? render2(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null);
      });
    };
    return Route2;
  }(react14.default.Component);
  if (true) {
    Route.propTypes = {
      children: prop_types146.default.oneOfType([prop_types146.default.func, prop_types146.default.node]),
      component: function component(props, propName) {
        if (props[propName] && !react_is13.isValidElementType(props[propName])) {
          return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
        }
      },
      exact: prop_types146.default.bool,
      location: prop_types146.default.object,
      path: prop_types146.default.oneOfType([prop_types146.default.string, prop_types146.default.arrayOf(prop_types146.default.string)]),
      render: prop_types146.default.func,
      sensitive: prop_types146.default.bool,
      strict: prop_types146.default.bool
    };
    Route.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
      tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
      tiny_warning_esm_default(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
    };
    Route.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
  }
  function addLeadingSlash2(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }
  function addBasename(basename, location) {
    if (!basename)
      return location;
    return _extends({}, location, {
      pathname: addLeadingSlash2(basename) + location.pathname
    });
  }
  function stripBasename2(basename, location) {
    if (!basename)
      return location;
    var base = addLeadingSlash2(basename);
    if (location.pathname.indexOf(base) !== 0)
      return location;
    return _extends({}, location, {
      pathname: location.pathname.substr(base.length)
    });
  }
  function createURL(location) {
    return typeof location === "string" ? location : createPath(location);
  }
  function staticHandler(methodName) {
    return function() {
      tiny_invariant_esm_default(false, "You cannot %s with <StaticRouter>", methodName);
    };
  }
  function noop() {
  }
  var StaticRouter = function(_React$Component) {
    _inheritsLoose(StaticRouter2, _React$Component);
    function StaticRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlePush = function(location) {
        return _this.navigateTo(location, "PUSH");
      };
      _this.handleReplace = function(location) {
        return _this.navigateTo(location, "REPLACE");
      };
      _this.handleListen = function() {
        return noop;
      };
      _this.handleBlock = function() {
        return noop;
      };
      return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location, action) {
      var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context2 = _this$props$context === void 0 ? {} : _this$props$context;
      context2.action = action;
      context2.location = addBasename(basename, createLocation(location));
      context2.url = createURL(context2.location);
    };
    _proto.render = function render() {
      var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context2 = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);
      var history3 = {
        createHref: function createHref(path) {
          return addLeadingSlash2(basename + createURL(path));
        },
        action: "POP",
        location: stripBasename2(basename, createLocation(location)),
        push: this.handlePush,
        replace: this.handleReplace,
        go: staticHandler("go"),
        goBack: staticHandler("goBack"),
        goForward: staticHandler("goForward"),
        listen: this.handleListen,
        block: this.handleBlock
      };
      return react14.default.createElement(Router, _extends({}, rest, {
        history: history3,
        staticContext: context2
      }));
    };
    return StaticRouter2;
  }(react14.default.Component);
  if (true) {
    StaticRouter.propTypes = {
      basename: prop_types146.default.string,
      context: prop_types146.default.object,
      location: prop_types146.default.oneOfType([prop_types146.default.string, prop_types146.default.object])
    };
    StaticRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
    };
  }
  var Switch3 = function(_React$Component) {
    _inheritsLoose(Switch4, _React$Component);
    function Switch4() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch4.prototype;
    _proto.render = function render() {
      var _this = this;
      return react14.default.createElement(context.Consumer, null, function(context2) {
        !context2 ? tiny_invariant_esm_default(false, "You should not use <Switch> outside a <Router>") : void 0;
        var location = _this.props.location || context2.location;
        var element, match;
        react14.default.Children.forEach(_this.props.children, function(child) {
          if (match == null && react14.default.isValidElement(child)) {
            element = child;
            var path = child.props.path || child.props.from;
            match = path ? matchPath(location.pathname, _extends({}, child.props, {
              path
            })) : context2.match;
          }
        });
        return match ? react14.default.cloneElement(element, {
          location,
          computedMatch: match
        }) : null;
      });
    };
    return Switch4;
  }(react14.default.Component);
  if (true) {
    Switch3.propTypes = {
      children: prop_types146.default.node,
      location: prop_types146.default.object
    };
    Switch3.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
  }
  var useContext12 = react14.default.useContext;
  if (true) {
    if (typeof window !== "undefined") {
      var global2 = window;
      var key2 = "__react_router_build__";
      var buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
      };
      if (global2[key2] && global2[key2] !== "esm") {
        var initialBuildName = buildNames[global2[key2]];
        var secondaryBuildName = buildNames["esm"];
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
      }
      global2[key2] = "esm";
    }
  }

  // node_modules/react-router-dom/esm/react-router-dom.js
  const react13 = __toModule(require_react());
  const prop_types145 = __toModule(require_prop_types());
  var BrowserRouter = function(_React$Component) {
    _inheritsLoose(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createBrowserHistory(_this.props);
      return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
      return react13.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return BrowserRouter2;
  }(react13.default.Component);
  if (true) {
    BrowserRouter.propTypes = {
      basename: prop_types145.default.string,
      children: prop_types145.default.node,
      forceRefresh: prop_types145.default.bool,
      getUserConfirmation: prop_types145.default.func,
      keyLength: prop_types145.default.number
    };
    BrowserRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
    };
  }
  var HashRouter = function(_React$Component) {
    _inheritsLoose(HashRouter2, _React$Component);
    function HashRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createHashHistory(_this.props);
      return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
      return react13.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return HashRouter2;
  }(react13.default.Component);
  if (true) {
    HashRouter.propTypes = {
      basename: prop_types145.default.string,
      children: prop_types145.default.node,
      getUserConfirmation: prop_types145.default.func,
      hashType: prop_types145.default.oneOf(["hashbang", "noslash", "slash"])
    };
    HashRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
    };
  }
  var resolveToLocation = function resolveToLocation2(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
  };
  var normalizeToLocation = function normalizeToLocation2(to, currentLocation) {
    return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
  };
  var forwardRefShim = function forwardRefShim2(C) {
    return C;
  };
  var forwardRef120 = react13.default.forwardRef;
  if (typeof forwardRef120 === "undefined") {
    forwardRef120 = forwardRefShim;
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  var LinkAnchor = forwardRef120(function(_ref6, forwardedRef) {
    var innerRef = _ref6.innerRef, navigate = _ref6.navigate, _onClick = _ref6.onClick, rest = _objectWithoutPropertiesLoose(_ref6, ["innerRef", "navigate", "onClick"]);
    var target = rest.target;
    var props = _extends({}, rest, {
      onClick: function onClick(event) {
        try {
          if (_onClick)
            _onClick(event);
        } catch (ex) {
          event.preventDefault();
          throw ex;
        }
        if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
          event.preventDefault();
          navigate();
        }
      }
    });
    if (forwardRefShim !== forwardRef120) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.ref = innerRef;
    }
    return react13.default.createElement("a", props);
  });
  if (true) {
    LinkAnchor.displayName = "LinkAnchor";
  }
  var Link3 = forwardRef120(function(_ref24, forwardedRef) {
    var _ref2$component = _ref24.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref24.replace, to = _ref24.to, innerRef = _ref24.innerRef, rest = _objectWithoutPropertiesLoose(_ref24, ["component", "replace", "to", "innerRef"]);
    return react13.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <Link> outside a <Router>") : void 0;
      var history3 = context2.history;
      var location = normalizeToLocation(resolveToLocation(to, context2.location), context2.location);
      var href = location ? history3.createHref(location) : "";
      var props = _extends({}, rest, {
        href,
        navigate: function navigate() {
          var location2 = resolveToLocation(to, context2.location);
          var method = replace ? history3.replace : history3.push;
          method(location2);
        }
      });
      if (forwardRefShim !== forwardRef120) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return react13.default.createElement(component, props);
    });
  });
  if (true) {
    var toType = prop_types145.default.oneOfType([prop_types145.default.string, prop_types145.default.object, prop_types145.default.func]);
    var refType3 = prop_types145.default.oneOfType([prop_types145.default.string, prop_types145.default.func, prop_types145.default.shape({
      current: prop_types145.default.any
    })]);
    Link3.displayName = "Link";
    Link3.propTypes = {
      innerRef: refType3,
      onClick: prop_types145.default.func,
      replace: prop_types145.default.bool,
      target: prop_types145.default.string,
      to: toType.isRequired
    };
  }
  var forwardRefShim$1 = function forwardRefShim2(C) {
    return C;
  };
  var forwardRef$1 = react13.default.forwardRef;
  if (typeof forwardRef$1 === "undefined") {
    forwardRef$1 = forwardRefShim$1;
  }
  function joinClassnames() {
    for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
      classnames[_key] = arguments[_key];
    }
    return classnames.filter(function(i) {
      return i;
    }).join(" ");
  }
  var NavLink = forwardRef$1(function(_ref6, forwardedRef) {
    var _ref$ariaCurrent = _ref6["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref6.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref6.activeStyle, classNameProp = _ref6.className, exact = _ref6.exact, isActiveProp = _ref6.isActive, locationProp = _ref6.location, sensitive = _ref6.sensitive, strict = _ref6.strict, styleProp = _ref6.style, to = _ref6.to, innerRef = _ref6.innerRef, rest = _objectWithoutPropertiesLoose(_ref6, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
    return react13.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <NavLink> outside a <Router>") : void 0;
      var currentLocation = locationProp || context2.location;
      var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
      var path = toLocation.pathname;
      var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
      var match = escapedPath ? matchPath(currentLocation.pathname, {
        path: escapedPath,
        exact,
        sensitive,
        strict
      }) : null;
      var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
      var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
      var style13 = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;
      var props = _extends({
        "aria-current": isActive && ariaCurrent || null,
        className,
        style: style13,
        to: toLocation
      }, rest);
      if (forwardRefShim$1 !== forwardRef$1) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return react13.default.createElement(Link3, props);
    });
  });
  if (true) {
    NavLink.displayName = "NavLink";
    var ariaCurrentType = prop_types145.default.oneOf(["page", "step", "location", "date", "time", "true"]);
    NavLink.propTypes = _extends({}, Link3.propTypes, {
      "aria-current": ariaCurrentType,
      activeClassName: prop_types145.default.string,
      activeStyle: prop_types145.default.object,
      className: prop_types145.default.string,
      exact: prop_types145.default.bool,
      isActive: prop_types145.default.func,
      location: prop_types145.default.object,
      sensitive: prop_types145.default.bool,
      strict: prop_types145.default.bool,
      style: prop_types145.default.object
    });
  }
  require_App();
})();
//# sourceMappingURL=bundle.js.map
